
11_Systick_delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001450  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08001620  08001620  00011620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016d4  080016d4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080016d4  080016d4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016d4  080016d4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016d4  080016d4  000116d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016d8  080016d8  000116d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080016dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  08001740  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08001740  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001227  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005bf  00000000  00000000  000212bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000180  00000000  00000000  00021880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000128  00000000  00000000  00021a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000203b  00000000  00000000  00021b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002071  00000000  00000000  00023b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a02c1  00000000  00000000  00025bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c5e95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c6c  00000000  00000000  000c5ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001608 	.word	0x08001608

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08001608 	.word	0x08001608

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <SysTickDelayMs>:
#include "core_cm7.h"

#define SYSTICK_LOAD_VAL 		16000 //CPU cycles per millisecond

void SysTickDelayMs(int delay)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	//Configure Systick

	//Reload timer with number of clocks per millisecond
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <SysTickDelayMs+0x50>)
 80002ba:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80002be:	605a      	str	r2, [r3, #4]

	//clear systick current value register
	SysTick->VAL = 0;
 80002c0:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <SysTickDelayMs+0x50>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	609a      	str	r2, [r3, #8]

	// enable systick and select clock source as CPU clock
	SysTick->CTRL = (SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk);
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <SysTickDelayMs+0x50>)
 80002c8:	2205      	movs	r2, #5
 80002ca:	601a      	str	r2, [r3, #0]

	for(int i=0; i<delay; i++)
 80002cc:	2300      	movs	r3, #0
 80002ce:	60fb      	str	r3, [r7, #12]
 80002d0:	e009      	b.n	80002e6 <SysTickDelayMs+0x36>
	{
		//wait for count flag to be set before looping again
		while((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0){}
 80002d2:	bf00      	nop
 80002d4:	4b0a      	ldr	r3, [pc, #40]	; (8000300 <SysTickDelayMs+0x50>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d0f9      	beq.n	80002d4 <SysTickDelayMs+0x24>
	for(int i=0; i<delay; i++)
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	3301      	adds	r3, #1
 80002e4:	60fb      	str	r3, [r7, #12]
 80002e6:	68fa      	ldr	r2, [r7, #12]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	dbf1      	blt.n	80002d2 <SysTickDelayMs+0x22>
	}
	SysTick->CTRL = 0;
 80002ee:	4b04      	ldr	r3, [pc, #16]	; (8000300 <SysTickDelayMs+0x50>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
}
 80002f4:	bf00      	nop
 80002f6:	3714      	adds	r7, #20
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	e000e010 	.word	0xe000e010

08000304 <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart3_tx_init(void);
void uart3_write(int ch);

int __io_putchar(int ch)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	uart3_write(ch);
 800030c:	6878      	ldr	r0, [r7, #4]
 800030e:	f000 f85d 	bl	80003cc <uart3_write>
	return ch;
 8000312:	687b      	ldr	r3, [r7, #4]
}
 8000314:	4618      	mov	r0, r3
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <uart3_tx_rx_init>:

void uart3_tx_rx_init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	/******************Configure USART GPIO Pins******************/

	/*Enable GPIOD clock (Pins for USART are on GPIOD)*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000320:	4b26      	ldr	r3, [pc, #152]	; (80003bc <uart3_tx_rx_init+0xa0>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a25      	ldr	r2, [pc, #148]	; (80003bc <uart3_tx_rx_init+0xa0>)
 8000326:	f043 0308 	orr.w	r3, r3, #8
 800032a:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PD8 to alternate function mode*/
	GPIOD->MODER &=~ GPIO_MODER_MODER8_0;
 800032c:	4b24      	ldr	r3, [pc, #144]	; (80003c0 <uart3_tx_rx_init+0xa4>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a23      	ldr	r2, [pc, #140]	; (80003c0 <uart3_tx_rx_init+0xa4>)
 8000332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000336:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODER8_1;
 8000338:	4b21      	ldr	r3, [pc, #132]	; (80003c0 <uart3_tx_rx_init+0xa4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a20      	ldr	r2, [pc, #128]	; (80003c0 <uart3_tx_rx_init+0xa4>)
 800033e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000342:	6013      	str	r3, [r2, #0]
	/*Set PD8 alternate function mode to UART_TX*/
	GPIOD->AFR[1] |= (GPIO_AFRH_AFRH0_0 | GPIO_AFRH_AFRH0_1 | GPIO_AFRH_AFRH0_2) ;
 8000344:	4b1e      	ldr	r3, [pc, #120]	; (80003c0 <uart3_tx_rx_init+0xa4>)
 8000346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000348:	4a1d      	ldr	r2, [pc, #116]	; (80003c0 <uart3_tx_rx_init+0xa4>)
 800034a:	f043 0307 	orr.w	r3, r3, #7
 800034e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &=~ GPIO_AFRH_AFRH0_3;
 8000350:	4b1b      	ldr	r3, [pc, #108]	; (80003c0 <uart3_tx_rx_init+0xa4>)
 8000352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000354:	4a1a      	ldr	r2, [pc, #104]	; (80003c0 <uart3_tx_rx_init+0xa4>)
 8000356:	f023 0308 	bic.w	r3, r3, #8
 800035a:	6253      	str	r3, [r2, #36]	; 0x24

	/*Set PD9 to alternate function mode*/
	GPIOD->MODER &=~ GPIO_MODER_MODER9_0;
 800035c:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <uart3_tx_rx_init+0xa4>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a17      	ldr	r2, [pc, #92]	; (80003c0 <uart3_tx_rx_init+0xa4>)
 8000362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000366:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODER9_1;
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <uart3_tx_rx_init+0xa4>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a14      	ldr	r2, [pc, #80]	; (80003c0 <uart3_tx_rx_init+0xa4>)
 800036e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000372:	6013      	str	r3, [r2, #0]
	/*Set PD9 alternate function mode to UART_TX*/
	GPIOD->AFR[1] |= (GPIO_AFRH_AFRH1_0 | GPIO_AFRH_AFRH1_1 | GPIO_AFRH_AFRH1_2) ;
 8000374:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <uart3_tx_rx_init+0xa4>)
 8000376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000378:	4a11      	ldr	r2, [pc, #68]	; (80003c0 <uart3_tx_rx_init+0xa4>)
 800037a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800037e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &=~ GPIO_AFRH_AFRH1_3;
 8000380:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <uart3_tx_rx_init+0xa4>)
 8000382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000384:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <uart3_tx_rx_init+0xa4>)
 8000386:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800038a:	6253      	str	r3, [r2, #36]	; 0x24


	/******************Configure USART module******************/

	/*Enable USART2 clock*/
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 800038c:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <uart3_tx_rx_init+0xa0>)
 800038e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000390:	4a0a      	ldr	r2, [pc, #40]	; (80003bc <uart3_tx_rx_init+0xa0>)
 8000392:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000396:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure Baudrate*/
	uart_set_baudrate(USART3, APB1_CLK, UART_BAUDRATE);
 8000398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800039c:	4909      	ldr	r1, [pc, #36]	; (80003c4 <uart3_tx_rx_init+0xa8>)
 800039e:	480a      	ldr	r0, [pc, #40]	; (80003c8 <uart3_tx_rx_init+0xac>)
 80003a0:	f000 f82c 	bl	80003fc <uart_set_baudrate>

	/*Enable Transmit and Receive and set UART defaults*/
	USART3->CR1 = (USART_CR1_TE | USART_CR1_RE);
 80003a4:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <uart3_tx_rx_init+0xac>)
 80003a6:	220c      	movs	r2, #12
 80003a8:	601a      	str	r2, [r3, #0]

	/*Enable UART Module*/
	USART3->CR1 |= USART_CR1_UE;
 80003aa:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <uart3_tx_rx_init+0xac>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a06      	ldr	r2, [pc, #24]	; (80003c8 <uart3_tx_rx_init+0xac>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6013      	str	r3, [r2, #0]
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40023800 	.word	0x40023800
 80003c0:	40020c00 	.word	0x40020c00
 80003c4:	00f42400 	.word	0x00f42400
 80003c8:	40004800 	.word	0x40004800

080003cc <uart3_write>:
	/*Read RX data register*/
	return USART3->RDR;
}

void uart3_write(int ch)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	/*Make sure TX data register is empty*/
	while(!(USART3->ISR & USART_ISR_TXE)){}
 80003d4:	bf00      	nop
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <uart3_write+0x2c>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d0f9      	beq.n	80003d6 <uart3_write+0xa>

	/*Write to TX data register*/
	USART3->TDR = (ch & 0xFF);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <uart3_write+0x2c>)
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	40004800 	.word	0x40004800

080003fc <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000408:	6879      	ldr	r1, [r7, #4]
 800040a:	68b8      	ldr	r0, [r7, #8]
 800040c:	f000 f808 	bl	8000420 <compute_uart_bd>
 8000410:	4603      	mov	r3, r0
 8000412:	461a      	mov	r2, r3
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	60da      	str	r2, [r3, #12]
}
 8000418:	bf00      	nop
 800041a:	3710      	adds	r7, #16
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	085a      	lsrs	r2, r3, #1
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	441a      	add	r2, r3
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	fbb2 f3f3 	udiv	r3, r2, r3
 8000438:	b29b      	uxth	r3, r3
}
 800043a:	4618      	mov	r0, r3
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
	...

08000448 <main>:
#define BTN_Pin			(1U<<13)



int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	/*setup*/

	//Initialize UART TX/RX so that we can transmit ADC values over serial
	uart3_tx_rx_init();
 800044c:	f7ff ff66 	bl	800031c <uart3_tx_rx_init>

	/*Enable clock to GPIOB and GPIOC*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;
 8000450:	4b22      	ldr	r3, [pc, #136]	; (80004dc <main+0x94>)
 8000452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000454:	4a21      	ldr	r2, [pc, #132]	; (80004dc <main+0x94>)
 8000456:	f043 0306 	orr.w	r3, r3, #6
 800045a:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PB0 as output pin*/
	GPIOB->MODER |= GPIO_MODER_MODER0_0;
 800045c:	4b20      	ldr	r3, [pc, #128]	; (80004e0 <main+0x98>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a1f      	ldr	r2, [pc, #124]	; (80004e0 <main+0x98>)
 8000462:	f043 0301 	orr.w	r3, r3, #1
 8000466:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &=~ GPIO_MODER_MODER0_1;
 8000468:	4b1d      	ldr	r3, [pc, #116]	; (80004e0 <main+0x98>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a1c      	ldr	r2, [pc, #112]	; (80004e0 <main+0x98>)
 800046e:	f023 0302 	bic.w	r3, r3, #2
 8000472:	6013      	str	r3, [r2, #0]

	/*Set PB7 as output pin*/
	GPIOB->MODER |= GPIO_MODER_MODER7_0;
 8000474:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <main+0x98>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a19      	ldr	r2, [pc, #100]	; (80004e0 <main+0x98>)
 800047a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800047e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &=~ GPIO_MODER_MODER7_1;
 8000480:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <main+0x98>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a16      	ldr	r2, [pc, #88]	; (80004e0 <main+0x98>)
 8000486:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800048a:	6013      	str	r3, [r2, #0]

	/*Set PB14 as output pin*/
	GPIOB->MODER |= GPIO_MODER_MODER14_0;
 800048c:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <main+0x98>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a13      	ldr	r2, [pc, #76]	; (80004e0 <main+0x98>)
 8000492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000496:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &=~ GPIO_MODER_MODER14_1;
 8000498:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <main+0x98>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a10      	ldr	r2, [pc, #64]	; (80004e0 <main+0x98>)
 800049e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80004a2:	6013      	str	r3, [r2, #0]

	/*Set PC13 as input pin*/
	GPIOC->MODER &=~ GPIO_MODER_MODER13_0;
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <main+0x9c>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a0e      	ldr	r2, [pc, #56]	; (80004e4 <main+0x9c>)
 80004aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80004ae:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~ GPIO_MODER_MODER13_1;
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <main+0x9c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <main+0x9c>)
 80004b6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80004ba:	6013      	str	r3, [r2, #0]

	/*run loop*/
	while(1)
	{
		//toggle LED's
		GPIOB->ODR ^= R_LED_PIN | G_LED_PIN | B_LED_PIN;
 80004bc:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <main+0x98>)
 80004be:	695a      	ldr	r2, [r3, #20]
 80004c0:	4907      	ldr	r1, [pc, #28]	; (80004e0 <main+0x98>)
 80004c2:	f244 0381 	movw	r3, #16513	; 0x4081
 80004c6:	4053      	eors	r3, r2
 80004c8:	614b      	str	r3, [r1, #20]

		printf("A second has passed!! \n\r");
 80004ca:	4807      	ldr	r0, [pc, #28]	; (80004e8 <main+0xa0>)
 80004cc:	f000 f90e 	bl	80006ec <iprintf>
		SysTickDelayMs(1000);
 80004d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004d4:	f7ff feec 	bl	80002b0 <SysTickDelayMs>
		GPIOB->ODR ^= R_LED_PIN | G_LED_PIN | B_LED_PIN;
 80004d8:	e7f0      	b.n	80004bc <main+0x74>
 80004da:	bf00      	nop
 80004dc:	40023800 	.word	0x40023800
 80004e0:	40020400 	.word	0x40020400
 80004e4:	40020800 	.word	0x40020800
 80004e8:	08001620 	.word	0x08001620

080004ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	e00a      	b.n	8000514 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004fe:	f3af 8000 	nop.w
 8000502:	4601      	mov	r1, r0
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	1c5a      	adds	r2, r3, #1
 8000508:	60ba      	str	r2, [r7, #8]
 800050a:	b2ca      	uxtb	r2, r1
 800050c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	3301      	adds	r3, #1
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697a      	ldr	r2, [r7, #20]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	429a      	cmp	r2, r3
 800051a:	dbf0      	blt.n	80004fe <_read+0x12>
  }

  return len;
 800051c:	687b      	ldr	r3, [r7, #4]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3718      	adds	r7, #24
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b086      	sub	sp, #24
 800052a:	af00      	add	r7, sp, #0
 800052c:	60f8      	str	r0, [r7, #12]
 800052e:	60b9      	str	r1, [r7, #8]
 8000530:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]
 8000536:	e009      	b.n	800054c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	1c5a      	adds	r2, r3, #1
 800053c:	60ba      	str	r2, [r7, #8]
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff fedf 	bl	8000304 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	3301      	adds	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	697a      	ldr	r2, [r7, #20]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	429a      	cmp	r2, r3
 8000552:	dbf1      	blt.n	8000538 <_write+0x12>
  }
  return len;
 8000554:	687b      	ldr	r3, [r7, #4]
}
 8000556:	4618      	mov	r0, r3
 8000558:	3718      	adds	r7, #24
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <_close>:

int _close(int file)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000566:	f04f 33ff 	mov.w	r3, #4294967295
}
 800056a:	4618      	mov	r0, r3
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000586:	605a      	str	r2, [r3, #4]
  return 0;
 8000588:	2300      	movs	r3, #0
}
 800058a:	4618      	mov	r0, r3
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <_isatty>:

int _isatty(int file)
{
 8000596:	b480      	push	{r7}
 8000598:	b083      	sub	sp, #12
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005d0:	4a14      	ldr	r2, [pc, #80]	; (8000624 <_sbrk+0x5c>)
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <_sbrk+0x60>)
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <_sbrk+0x64>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d102      	bne.n	80005ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <_sbrk+0x64>)
 80005e6:	4a12      	ldr	r2, [pc, #72]	; (8000630 <_sbrk+0x68>)
 80005e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <_sbrk+0x64>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4413      	add	r3, r2
 80005f2:	693a      	ldr	r2, [r7, #16]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d207      	bcs.n	8000608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005f8:	f000 f846 	bl	8000688 <__errno>
 80005fc:	4603      	mov	r3, r0
 80005fe:	220c      	movs	r2, #12
 8000600:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	e009      	b.n	800061c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <_sbrk+0x64>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800060e:	4b07      	ldr	r3, [pc, #28]	; (800062c <_sbrk+0x64>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4413      	add	r3, r2
 8000616:	4a05      	ldr	r2, [pc, #20]	; (800062c <_sbrk+0x64>)
 8000618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800061a:	68fb      	ldr	r3, [r7, #12]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3718      	adds	r7, #24
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20050000 	.word	0x20050000
 8000628:	00000400 	.word	0x00000400
 800062c:	20000080 	.word	0x20000080
 8000630:	20000098 	.word	0x20000098

08000634 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000634:	480d      	ldr	r0, [pc, #52]	; (800066c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000636:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000638:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <LoopForever+0x6>)
  ldr r1, =_edata
 800063e:	490d      	ldr	r1, [pc, #52]	; (8000674 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000640:	4a0d      	ldr	r2, [pc, #52]	; (8000678 <LoopForever+0xe>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000644:	e002      	b.n	800064c <LoopCopyDataInit>

08000646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064a:	3304      	adds	r3, #4

0800064c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800064c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000650:	d3f9      	bcc.n	8000646 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000654:	4c0a      	ldr	r4, [pc, #40]	; (8000680 <LoopForever+0x16>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000658:	e001      	b.n	800065e <LoopFillZerobss>

0800065a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800065c:	3204      	adds	r2, #4

0800065e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000660:	d3fb      	bcc.n	800065a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000662:	f000 f817 	bl	8000694 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000666:	f7ff feef 	bl	8000448 <main>

0800066a <LoopForever>:

LoopForever:
  b LoopForever
 800066a:	e7fe      	b.n	800066a <LoopForever>
  ldr   r0, =_estack
 800066c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000674:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000678:	080016dc 	.word	0x080016dc
  ldr r2, =_sbss
 800067c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000680:	20000094 	.word	0x20000094

08000684 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000684:	e7fe      	b.n	8000684 <ADC_IRQHandler>
	...

08000688 <__errno>:
 8000688:	4b01      	ldr	r3, [pc, #4]	; (8000690 <__errno+0x8>)
 800068a:	6818      	ldr	r0, [r3, #0]
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000000 	.word	0x20000000

08000694 <__libc_init_array>:
 8000694:	b570      	push	{r4, r5, r6, lr}
 8000696:	4d0d      	ldr	r5, [pc, #52]	; (80006cc <__libc_init_array+0x38>)
 8000698:	4c0d      	ldr	r4, [pc, #52]	; (80006d0 <__libc_init_array+0x3c>)
 800069a:	1b64      	subs	r4, r4, r5
 800069c:	10a4      	asrs	r4, r4, #2
 800069e:	2600      	movs	r6, #0
 80006a0:	42a6      	cmp	r6, r4
 80006a2:	d109      	bne.n	80006b8 <__libc_init_array+0x24>
 80006a4:	4d0b      	ldr	r5, [pc, #44]	; (80006d4 <__libc_init_array+0x40>)
 80006a6:	4c0c      	ldr	r4, [pc, #48]	; (80006d8 <__libc_init_array+0x44>)
 80006a8:	f000 ffae 	bl	8001608 <_init>
 80006ac:	1b64      	subs	r4, r4, r5
 80006ae:	10a4      	asrs	r4, r4, #2
 80006b0:	2600      	movs	r6, #0
 80006b2:	42a6      	cmp	r6, r4
 80006b4:	d105      	bne.n	80006c2 <__libc_init_array+0x2e>
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80006bc:	4798      	blx	r3
 80006be:	3601      	adds	r6, #1
 80006c0:	e7ee      	b.n	80006a0 <__libc_init_array+0xc>
 80006c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80006c6:	4798      	blx	r3
 80006c8:	3601      	adds	r6, #1
 80006ca:	e7f2      	b.n	80006b2 <__libc_init_array+0x1e>
 80006cc:	080016d4 	.word	0x080016d4
 80006d0:	080016d4 	.word	0x080016d4
 80006d4:	080016d4 	.word	0x080016d4
 80006d8:	080016d8 	.word	0x080016d8

080006dc <memset>:
 80006dc:	4402      	add	r2, r0
 80006de:	4603      	mov	r3, r0
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d100      	bne.n	80006e6 <memset+0xa>
 80006e4:	4770      	bx	lr
 80006e6:	f803 1b01 	strb.w	r1, [r3], #1
 80006ea:	e7f9      	b.n	80006e0 <memset+0x4>

080006ec <iprintf>:
 80006ec:	b40f      	push	{r0, r1, r2, r3}
 80006ee:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <iprintf+0x2c>)
 80006f0:	b513      	push	{r0, r1, r4, lr}
 80006f2:	681c      	ldr	r4, [r3, #0]
 80006f4:	b124      	cbz	r4, 8000700 <iprintf+0x14>
 80006f6:	69a3      	ldr	r3, [r4, #24]
 80006f8:	b913      	cbnz	r3, 8000700 <iprintf+0x14>
 80006fa:	4620      	mov	r0, r4
 80006fc:	f000 f866 	bl	80007cc <__sinit>
 8000700:	ab05      	add	r3, sp, #20
 8000702:	9a04      	ldr	r2, [sp, #16]
 8000704:	68a1      	ldr	r1, [r4, #8]
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	4620      	mov	r0, r4
 800070a:	f000 f9bd 	bl	8000a88 <_vfiprintf_r>
 800070e:	b002      	add	sp, #8
 8000710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000714:	b004      	add	sp, #16
 8000716:	4770      	bx	lr
 8000718:	20000000 	.word	0x20000000

0800071c <std>:
 800071c:	2300      	movs	r3, #0
 800071e:	b510      	push	{r4, lr}
 8000720:	4604      	mov	r4, r0
 8000722:	e9c0 3300 	strd	r3, r3, [r0]
 8000726:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800072a:	6083      	str	r3, [r0, #8]
 800072c:	8181      	strh	r1, [r0, #12]
 800072e:	6643      	str	r3, [r0, #100]	; 0x64
 8000730:	81c2      	strh	r2, [r0, #14]
 8000732:	6183      	str	r3, [r0, #24]
 8000734:	4619      	mov	r1, r3
 8000736:	2208      	movs	r2, #8
 8000738:	305c      	adds	r0, #92	; 0x5c
 800073a:	f7ff ffcf 	bl	80006dc <memset>
 800073e:	4b05      	ldr	r3, [pc, #20]	; (8000754 <std+0x38>)
 8000740:	6263      	str	r3, [r4, #36]	; 0x24
 8000742:	4b05      	ldr	r3, [pc, #20]	; (8000758 <std+0x3c>)
 8000744:	62a3      	str	r3, [r4, #40]	; 0x28
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <std+0x40>)
 8000748:	62e3      	str	r3, [r4, #44]	; 0x2c
 800074a:	4b05      	ldr	r3, [pc, #20]	; (8000760 <std+0x44>)
 800074c:	6224      	str	r4, [r4, #32]
 800074e:	6323      	str	r3, [r4, #48]	; 0x30
 8000750:	bd10      	pop	{r4, pc}
 8000752:	bf00      	nop
 8000754:	08001031 	.word	0x08001031
 8000758:	08001053 	.word	0x08001053
 800075c:	0800108b 	.word	0x0800108b
 8000760:	080010af 	.word	0x080010af

08000764 <_cleanup_r>:
 8000764:	4901      	ldr	r1, [pc, #4]	; (800076c <_cleanup_r+0x8>)
 8000766:	f000 b8af 	b.w	80008c8 <_fwalk_reent>
 800076a:	bf00      	nop
 800076c:	08001389 	.word	0x08001389

08000770 <__sfmoreglue>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	2268      	movs	r2, #104	; 0x68
 8000774:	1e4d      	subs	r5, r1, #1
 8000776:	4355      	muls	r5, r2
 8000778:	460e      	mov	r6, r1
 800077a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800077e:	f000 f8e5 	bl	800094c <_malloc_r>
 8000782:	4604      	mov	r4, r0
 8000784:	b140      	cbz	r0, 8000798 <__sfmoreglue+0x28>
 8000786:	2100      	movs	r1, #0
 8000788:	e9c0 1600 	strd	r1, r6, [r0]
 800078c:	300c      	adds	r0, #12
 800078e:	60a0      	str	r0, [r4, #8]
 8000790:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000794:	f7ff ffa2 	bl	80006dc <memset>
 8000798:	4620      	mov	r0, r4
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__sfp_lock_acquire>:
 800079c:	4801      	ldr	r0, [pc, #4]	; (80007a4 <__sfp_lock_acquire+0x8>)
 800079e:	f000 b8b3 	b.w	8000908 <__retarget_lock_acquire_recursive>
 80007a2:	bf00      	nop
 80007a4:	20000085 	.word	0x20000085

080007a8 <__sfp_lock_release>:
 80007a8:	4801      	ldr	r0, [pc, #4]	; (80007b0 <__sfp_lock_release+0x8>)
 80007aa:	f000 b8ae 	b.w	800090a <__retarget_lock_release_recursive>
 80007ae:	bf00      	nop
 80007b0:	20000085 	.word	0x20000085

080007b4 <__sinit_lock_acquire>:
 80007b4:	4801      	ldr	r0, [pc, #4]	; (80007bc <__sinit_lock_acquire+0x8>)
 80007b6:	f000 b8a7 	b.w	8000908 <__retarget_lock_acquire_recursive>
 80007ba:	bf00      	nop
 80007bc:	20000086 	.word	0x20000086

080007c0 <__sinit_lock_release>:
 80007c0:	4801      	ldr	r0, [pc, #4]	; (80007c8 <__sinit_lock_release+0x8>)
 80007c2:	f000 b8a2 	b.w	800090a <__retarget_lock_release_recursive>
 80007c6:	bf00      	nop
 80007c8:	20000086 	.word	0x20000086

080007cc <__sinit>:
 80007cc:	b510      	push	{r4, lr}
 80007ce:	4604      	mov	r4, r0
 80007d0:	f7ff fff0 	bl	80007b4 <__sinit_lock_acquire>
 80007d4:	69a3      	ldr	r3, [r4, #24]
 80007d6:	b11b      	cbz	r3, 80007e0 <__sinit+0x14>
 80007d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007dc:	f7ff bff0 	b.w	80007c0 <__sinit_lock_release>
 80007e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80007e4:	6523      	str	r3, [r4, #80]	; 0x50
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <__sinit+0x68>)
 80007e8:	4a13      	ldr	r2, [pc, #76]	; (8000838 <__sinit+0x6c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80007ee:	42a3      	cmp	r3, r4
 80007f0:	bf04      	itt	eq
 80007f2:	2301      	moveq	r3, #1
 80007f4:	61a3      	streq	r3, [r4, #24]
 80007f6:	4620      	mov	r0, r4
 80007f8:	f000 f820 	bl	800083c <__sfp>
 80007fc:	6060      	str	r0, [r4, #4]
 80007fe:	4620      	mov	r0, r4
 8000800:	f000 f81c 	bl	800083c <__sfp>
 8000804:	60a0      	str	r0, [r4, #8]
 8000806:	4620      	mov	r0, r4
 8000808:	f000 f818 	bl	800083c <__sfp>
 800080c:	2200      	movs	r2, #0
 800080e:	60e0      	str	r0, [r4, #12]
 8000810:	2104      	movs	r1, #4
 8000812:	6860      	ldr	r0, [r4, #4]
 8000814:	f7ff ff82 	bl	800071c <std>
 8000818:	68a0      	ldr	r0, [r4, #8]
 800081a:	2201      	movs	r2, #1
 800081c:	2109      	movs	r1, #9
 800081e:	f7ff ff7d 	bl	800071c <std>
 8000822:	68e0      	ldr	r0, [r4, #12]
 8000824:	2202      	movs	r2, #2
 8000826:	2112      	movs	r1, #18
 8000828:	f7ff ff78 	bl	800071c <std>
 800082c:	2301      	movs	r3, #1
 800082e:	61a3      	str	r3, [r4, #24]
 8000830:	e7d2      	b.n	80007d8 <__sinit+0xc>
 8000832:	bf00      	nop
 8000834:	0800163c 	.word	0x0800163c
 8000838:	08000765 	.word	0x08000765

0800083c <__sfp>:
 800083c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800083e:	4607      	mov	r7, r0
 8000840:	f7ff ffac 	bl	800079c <__sfp_lock_acquire>
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <__sfp+0x84>)
 8000846:	681e      	ldr	r6, [r3, #0]
 8000848:	69b3      	ldr	r3, [r6, #24]
 800084a:	b913      	cbnz	r3, 8000852 <__sfp+0x16>
 800084c:	4630      	mov	r0, r6
 800084e:	f7ff ffbd 	bl	80007cc <__sinit>
 8000852:	3648      	adds	r6, #72	; 0x48
 8000854:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000858:	3b01      	subs	r3, #1
 800085a:	d503      	bpl.n	8000864 <__sfp+0x28>
 800085c:	6833      	ldr	r3, [r6, #0]
 800085e:	b30b      	cbz	r3, 80008a4 <__sfp+0x68>
 8000860:	6836      	ldr	r6, [r6, #0]
 8000862:	e7f7      	b.n	8000854 <__sfp+0x18>
 8000864:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000868:	b9d5      	cbnz	r5, 80008a0 <__sfp+0x64>
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <__sfp+0x88>)
 800086c:	60e3      	str	r3, [r4, #12]
 800086e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000872:	6665      	str	r5, [r4, #100]	; 0x64
 8000874:	f000 f847 	bl	8000906 <__retarget_lock_init_recursive>
 8000878:	f7ff ff96 	bl	80007a8 <__sfp_lock_release>
 800087c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000880:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000884:	6025      	str	r5, [r4, #0]
 8000886:	61a5      	str	r5, [r4, #24]
 8000888:	2208      	movs	r2, #8
 800088a:	4629      	mov	r1, r5
 800088c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000890:	f7ff ff24 	bl	80006dc <memset>
 8000894:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000898:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800089c:	4620      	mov	r0, r4
 800089e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a0:	3468      	adds	r4, #104	; 0x68
 80008a2:	e7d9      	b.n	8000858 <__sfp+0x1c>
 80008a4:	2104      	movs	r1, #4
 80008a6:	4638      	mov	r0, r7
 80008a8:	f7ff ff62 	bl	8000770 <__sfmoreglue>
 80008ac:	4604      	mov	r4, r0
 80008ae:	6030      	str	r0, [r6, #0]
 80008b0:	2800      	cmp	r0, #0
 80008b2:	d1d5      	bne.n	8000860 <__sfp+0x24>
 80008b4:	f7ff ff78 	bl	80007a8 <__sfp_lock_release>
 80008b8:	230c      	movs	r3, #12
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	e7ee      	b.n	800089c <__sfp+0x60>
 80008be:	bf00      	nop
 80008c0:	0800163c 	.word	0x0800163c
 80008c4:	ffff0001 	.word	0xffff0001

080008c8 <_fwalk_reent>:
 80008c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008cc:	4606      	mov	r6, r0
 80008ce:	4688      	mov	r8, r1
 80008d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80008d4:	2700      	movs	r7, #0
 80008d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008da:	f1b9 0901 	subs.w	r9, r9, #1
 80008de:	d505      	bpl.n	80008ec <_fwalk_reent+0x24>
 80008e0:	6824      	ldr	r4, [r4, #0]
 80008e2:	2c00      	cmp	r4, #0
 80008e4:	d1f7      	bne.n	80008d6 <_fwalk_reent+0xe>
 80008e6:	4638      	mov	r0, r7
 80008e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008ec:	89ab      	ldrh	r3, [r5, #12]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d907      	bls.n	8000902 <_fwalk_reent+0x3a>
 80008f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80008f6:	3301      	adds	r3, #1
 80008f8:	d003      	beq.n	8000902 <_fwalk_reent+0x3a>
 80008fa:	4629      	mov	r1, r5
 80008fc:	4630      	mov	r0, r6
 80008fe:	47c0      	blx	r8
 8000900:	4307      	orrs	r7, r0
 8000902:	3568      	adds	r5, #104	; 0x68
 8000904:	e7e9      	b.n	80008da <_fwalk_reent+0x12>

08000906 <__retarget_lock_init_recursive>:
 8000906:	4770      	bx	lr

08000908 <__retarget_lock_acquire_recursive>:
 8000908:	4770      	bx	lr

0800090a <__retarget_lock_release_recursive>:
 800090a:	4770      	bx	lr

0800090c <sbrk_aligned>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	4e0e      	ldr	r6, [pc, #56]	; (8000948 <sbrk_aligned+0x3c>)
 8000910:	460c      	mov	r4, r1
 8000912:	6831      	ldr	r1, [r6, #0]
 8000914:	4605      	mov	r5, r0
 8000916:	b911      	cbnz	r1, 800091e <sbrk_aligned+0x12>
 8000918:	f000 fb7a 	bl	8001010 <_sbrk_r>
 800091c:	6030      	str	r0, [r6, #0]
 800091e:	4621      	mov	r1, r4
 8000920:	4628      	mov	r0, r5
 8000922:	f000 fb75 	bl	8001010 <_sbrk_r>
 8000926:	1c43      	adds	r3, r0, #1
 8000928:	d00a      	beq.n	8000940 <sbrk_aligned+0x34>
 800092a:	1cc4      	adds	r4, r0, #3
 800092c:	f024 0403 	bic.w	r4, r4, #3
 8000930:	42a0      	cmp	r0, r4
 8000932:	d007      	beq.n	8000944 <sbrk_aligned+0x38>
 8000934:	1a21      	subs	r1, r4, r0
 8000936:	4628      	mov	r0, r5
 8000938:	f000 fb6a 	bl	8001010 <_sbrk_r>
 800093c:	3001      	adds	r0, #1
 800093e:	d101      	bne.n	8000944 <sbrk_aligned+0x38>
 8000940:	f04f 34ff 	mov.w	r4, #4294967295
 8000944:	4620      	mov	r0, r4
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	2000008c 	.word	0x2000008c

0800094c <_malloc_r>:
 800094c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000950:	1ccd      	adds	r5, r1, #3
 8000952:	f025 0503 	bic.w	r5, r5, #3
 8000956:	3508      	adds	r5, #8
 8000958:	2d0c      	cmp	r5, #12
 800095a:	bf38      	it	cc
 800095c:	250c      	movcc	r5, #12
 800095e:	2d00      	cmp	r5, #0
 8000960:	4607      	mov	r7, r0
 8000962:	db01      	blt.n	8000968 <_malloc_r+0x1c>
 8000964:	42a9      	cmp	r1, r5
 8000966:	d905      	bls.n	8000974 <_malloc_r+0x28>
 8000968:	230c      	movs	r3, #12
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	2600      	movs	r6, #0
 800096e:	4630      	mov	r0, r6
 8000970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000974:	4e2e      	ldr	r6, [pc, #184]	; (8000a30 <_malloc_r+0xe4>)
 8000976:	f000 fdbb 	bl	80014f0 <__malloc_lock>
 800097a:	6833      	ldr	r3, [r6, #0]
 800097c:	461c      	mov	r4, r3
 800097e:	bb34      	cbnz	r4, 80009ce <_malloc_r+0x82>
 8000980:	4629      	mov	r1, r5
 8000982:	4638      	mov	r0, r7
 8000984:	f7ff ffc2 	bl	800090c <sbrk_aligned>
 8000988:	1c43      	adds	r3, r0, #1
 800098a:	4604      	mov	r4, r0
 800098c:	d14d      	bne.n	8000a2a <_malloc_r+0xde>
 800098e:	6834      	ldr	r4, [r6, #0]
 8000990:	4626      	mov	r6, r4
 8000992:	2e00      	cmp	r6, #0
 8000994:	d140      	bne.n	8000a18 <_malloc_r+0xcc>
 8000996:	6823      	ldr	r3, [r4, #0]
 8000998:	4631      	mov	r1, r6
 800099a:	4638      	mov	r0, r7
 800099c:	eb04 0803 	add.w	r8, r4, r3
 80009a0:	f000 fb36 	bl	8001010 <_sbrk_r>
 80009a4:	4580      	cmp	r8, r0
 80009a6:	d13a      	bne.n	8000a1e <_malloc_r+0xd2>
 80009a8:	6821      	ldr	r1, [r4, #0]
 80009aa:	3503      	adds	r5, #3
 80009ac:	1a6d      	subs	r5, r5, r1
 80009ae:	f025 0503 	bic.w	r5, r5, #3
 80009b2:	3508      	adds	r5, #8
 80009b4:	2d0c      	cmp	r5, #12
 80009b6:	bf38      	it	cc
 80009b8:	250c      	movcc	r5, #12
 80009ba:	4629      	mov	r1, r5
 80009bc:	4638      	mov	r0, r7
 80009be:	f7ff ffa5 	bl	800090c <sbrk_aligned>
 80009c2:	3001      	adds	r0, #1
 80009c4:	d02b      	beq.n	8000a1e <_malloc_r+0xd2>
 80009c6:	6823      	ldr	r3, [r4, #0]
 80009c8:	442b      	add	r3, r5
 80009ca:	6023      	str	r3, [r4, #0]
 80009cc:	e00e      	b.n	80009ec <_malloc_r+0xa0>
 80009ce:	6822      	ldr	r2, [r4, #0]
 80009d0:	1b52      	subs	r2, r2, r5
 80009d2:	d41e      	bmi.n	8000a12 <_malloc_r+0xc6>
 80009d4:	2a0b      	cmp	r2, #11
 80009d6:	d916      	bls.n	8000a06 <_malloc_r+0xba>
 80009d8:	1961      	adds	r1, r4, r5
 80009da:	42a3      	cmp	r3, r4
 80009dc:	6025      	str	r5, [r4, #0]
 80009de:	bf18      	it	ne
 80009e0:	6059      	strne	r1, [r3, #4]
 80009e2:	6863      	ldr	r3, [r4, #4]
 80009e4:	bf08      	it	eq
 80009e6:	6031      	streq	r1, [r6, #0]
 80009e8:	5162      	str	r2, [r4, r5]
 80009ea:	604b      	str	r3, [r1, #4]
 80009ec:	4638      	mov	r0, r7
 80009ee:	f104 060b 	add.w	r6, r4, #11
 80009f2:	f000 fd83 	bl	80014fc <__malloc_unlock>
 80009f6:	f026 0607 	bic.w	r6, r6, #7
 80009fa:	1d23      	adds	r3, r4, #4
 80009fc:	1af2      	subs	r2, r6, r3
 80009fe:	d0b6      	beq.n	800096e <_malloc_r+0x22>
 8000a00:	1b9b      	subs	r3, r3, r6
 8000a02:	50a3      	str	r3, [r4, r2]
 8000a04:	e7b3      	b.n	800096e <_malloc_r+0x22>
 8000a06:	6862      	ldr	r2, [r4, #4]
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	bf0c      	ite	eq
 8000a0c:	6032      	streq	r2, [r6, #0]
 8000a0e:	605a      	strne	r2, [r3, #4]
 8000a10:	e7ec      	b.n	80009ec <_malloc_r+0xa0>
 8000a12:	4623      	mov	r3, r4
 8000a14:	6864      	ldr	r4, [r4, #4]
 8000a16:	e7b2      	b.n	800097e <_malloc_r+0x32>
 8000a18:	4634      	mov	r4, r6
 8000a1a:	6876      	ldr	r6, [r6, #4]
 8000a1c:	e7b9      	b.n	8000992 <_malloc_r+0x46>
 8000a1e:	230c      	movs	r3, #12
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4638      	mov	r0, r7
 8000a24:	f000 fd6a 	bl	80014fc <__malloc_unlock>
 8000a28:	e7a1      	b.n	800096e <_malloc_r+0x22>
 8000a2a:	6025      	str	r5, [r4, #0]
 8000a2c:	e7de      	b.n	80009ec <_malloc_r+0xa0>
 8000a2e:	bf00      	nop
 8000a30:	20000088 	.word	0x20000088

08000a34 <__sfputc_r>:
 8000a34:	6893      	ldr	r3, [r2, #8]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	b410      	push	{r4}
 8000a3c:	6093      	str	r3, [r2, #8]
 8000a3e:	da08      	bge.n	8000a52 <__sfputc_r+0x1e>
 8000a40:	6994      	ldr	r4, [r2, #24]
 8000a42:	42a3      	cmp	r3, r4
 8000a44:	db01      	blt.n	8000a4a <__sfputc_r+0x16>
 8000a46:	290a      	cmp	r1, #10
 8000a48:	d103      	bne.n	8000a52 <__sfputc_r+0x1e>
 8000a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a4e:	f000 bb33 	b.w	80010b8 <__swbuf_r>
 8000a52:	6813      	ldr	r3, [r2, #0]
 8000a54:	1c58      	adds	r0, r3, #1
 8000a56:	6010      	str	r0, [r2, #0]
 8000a58:	7019      	strb	r1, [r3, #0]
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <__sfputs_r>:
 8000a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a64:	4606      	mov	r6, r0
 8000a66:	460f      	mov	r7, r1
 8000a68:	4614      	mov	r4, r2
 8000a6a:	18d5      	adds	r5, r2, r3
 8000a6c:	42ac      	cmp	r4, r5
 8000a6e:	d101      	bne.n	8000a74 <__sfputs_r+0x12>
 8000a70:	2000      	movs	r0, #0
 8000a72:	e007      	b.n	8000a84 <__sfputs_r+0x22>
 8000a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a78:	463a      	mov	r2, r7
 8000a7a:	4630      	mov	r0, r6
 8000a7c:	f7ff ffda 	bl	8000a34 <__sfputc_r>
 8000a80:	1c43      	adds	r3, r0, #1
 8000a82:	d1f3      	bne.n	8000a6c <__sfputs_r+0xa>
 8000a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000a88 <_vfiprintf_r>:
 8000a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a8c:	460d      	mov	r5, r1
 8000a8e:	b09d      	sub	sp, #116	; 0x74
 8000a90:	4614      	mov	r4, r2
 8000a92:	4698      	mov	r8, r3
 8000a94:	4606      	mov	r6, r0
 8000a96:	b118      	cbz	r0, 8000aa0 <_vfiprintf_r+0x18>
 8000a98:	6983      	ldr	r3, [r0, #24]
 8000a9a:	b90b      	cbnz	r3, 8000aa0 <_vfiprintf_r+0x18>
 8000a9c:	f7ff fe96 	bl	80007cc <__sinit>
 8000aa0:	4b89      	ldr	r3, [pc, #548]	; (8000cc8 <_vfiprintf_r+0x240>)
 8000aa2:	429d      	cmp	r5, r3
 8000aa4:	d11b      	bne.n	8000ade <_vfiprintf_r+0x56>
 8000aa6:	6875      	ldr	r5, [r6, #4]
 8000aa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000aaa:	07d9      	lsls	r1, r3, #31
 8000aac:	d405      	bmi.n	8000aba <_vfiprintf_r+0x32>
 8000aae:	89ab      	ldrh	r3, [r5, #12]
 8000ab0:	059a      	lsls	r2, r3, #22
 8000ab2:	d402      	bmi.n	8000aba <_vfiprintf_r+0x32>
 8000ab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ab6:	f7ff ff27 	bl	8000908 <__retarget_lock_acquire_recursive>
 8000aba:	89ab      	ldrh	r3, [r5, #12]
 8000abc:	071b      	lsls	r3, r3, #28
 8000abe:	d501      	bpl.n	8000ac4 <_vfiprintf_r+0x3c>
 8000ac0:	692b      	ldr	r3, [r5, #16]
 8000ac2:	b9eb      	cbnz	r3, 8000b00 <_vfiprintf_r+0x78>
 8000ac4:	4629      	mov	r1, r5
 8000ac6:	4630      	mov	r0, r6
 8000ac8:	f000 fb5a 	bl	8001180 <__swsetup_r>
 8000acc:	b1c0      	cbz	r0, 8000b00 <_vfiprintf_r+0x78>
 8000ace:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ad0:	07dc      	lsls	r4, r3, #31
 8000ad2:	d50e      	bpl.n	8000af2 <_vfiprintf_r+0x6a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	b01d      	add	sp, #116	; 0x74
 8000ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ade:	4b7b      	ldr	r3, [pc, #492]	; (8000ccc <_vfiprintf_r+0x244>)
 8000ae0:	429d      	cmp	r5, r3
 8000ae2:	d101      	bne.n	8000ae8 <_vfiprintf_r+0x60>
 8000ae4:	68b5      	ldr	r5, [r6, #8]
 8000ae6:	e7df      	b.n	8000aa8 <_vfiprintf_r+0x20>
 8000ae8:	4b79      	ldr	r3, [pc, #484]	; (8000cd0 <_vfiprintf_r+0x248>)
 8000aea:	429d      	cmp	r5, r3
 8000aec:	bf08      	it	eq
 8000aee:	68f5      	ldreq	r5, [r6, #12]
 8000af0:	e7da      	b.n	8000aa8 <_vfiprintf_r+0x20>
 8000af2:	89ab      	ldrh	r3, [r5, #12]
 8000af4:	0598      	lsls	r0, r3, #22
 8000af6:	d4ed      	bmi.n	8000ad4 <_vfiprintf_r+0x4c>
 8000af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000afa:	f7ff ff06 	bl	800090a <__retarget_lock_release_recursive>
 8000afe:	e7e9      	b.n	8000ad4 <_vfiprintf_r+0x4c>
 8000b00:	2300      	movs	r3, #0
 8000b02:	9309      	str	r3, [sp, #36]	; 0x24
 8000b04:	2320      	movs	r3, #32
 8000b06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b0e:	2330      	movs	r3, #48	; 0x30
 8000b10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000cd4 <_vfiprintf_r+0x24c>
 8000b14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b18:	f04f 0901 	mov.w	r9, #1
 8000b1c:	4623      	mov	r3, r4
 8000b1e:	469a      	mov	sl, r3
 8000b20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b24:	b10a      	cbz	r2, 8000b2a <_vfiprintf_r+0xa2>
 8000b26:	2a25      	cmp	r2, #37	; 0x25
 8000b28:	d1f9      	bne.n	8000b1e <_vfiprintf_r+0x96>
 8000b2a:	ebba 0b04 	subs.w	fp, sl, r4
 8000b2e:	d00b      	beq.n	8000b48 <_vfiprintf_r+0xc0>
 8000b30:	465b      	mov	r3, fp
 8000b32:	4622      	mov	r2, r4
 8000b34:	4629      	mov	r1, r5
 8000b36:	4630      	mov	r0, r6
 8000b38:	f7ff ff93 	bl	8000a62 <__sfputs_r>
 8000b3c:	3001      	adds	r0, #1
 8000b3e:	f000 80aa 	beq.w	8000c96 <_vfiprintf_r+0x20e>
 8000b42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b44:	445a      	add	r2, fp
 8000b46:	9209      	str	r2, [sp, #36]	; 0x24
 8000b48:	f89a 3000 	ldrb.w	r3, [sl]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	f000 80a2 	beq.w	8000c96 <_vfiprintf_r+0x20e>
 8000b52:	2300      	movs	r3, #0
 8000b54:	f04f 32ff 	mov.w	r2, #4294967295
 8000b58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b5c:	f10a 0a01 	add.w	sl, sl, #1
 8000b60:	9304      	str	r3, [sp, #16]
 8000b62:	9307      	str	r3, [sp, #28]
 8000b64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b68:	931a      	str	r3, [sp, #104]	; 0x68
 8000b6a:	4654      	mov	r4, sl
 8000b6c:	2205      	movs	r2, #5
 8000b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b72:	4858      	ldr	r0, [pc, #352]	; (8000cd4 <_vfiprintf_r+0x24c>)
 8000b74:	f7ff fb4c 	bl	8000210 <memchr>
 8000b78:	9a04      	ldr	r2, [sp, #16]
 8000b7a:	b9d8      	cbnz	r0, 8000bb4 <_vfiprintf_r+0x12c>
 8000b7c:	06d1      	lsls	r1, r2, #27
 8000b7e:	bf44      	itt	mi
 8000b80:	2320      	movmi	r3, #32
 8000b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b86:	0713      	lsls	r3, r2, #28
 8000b88:	bf44      	itt	mi
 8000b8a:	232b      	movmi	r3, #43	; 0x2b
 8000b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b90:	f89a 3000 	ldrb.w	r3, [sl]
 8000b94:	2b2a      	cmp	r3, #42	; 0x2a
 8000b96:	d015      	beq.n	8000bc4 <_vfiprintf_r+0x13c>
 8000b98:	9a07      	ldr	r2, [sp, #28]
 8000b9a:	4654      	mov	r4, sl
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f04f 0c0a 	mov.w	ip, #10
 8000ba2:	4621      	mov	r1, r4
 8000ba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ba8:	3b30      	subs	r3, #48	; 0x30
 8000baa:	2b09      	cmp	r3, #9
 8000bac:	d94e      	bls.n	8000c4c <_vfiprintf_r+0x1c4>
 8000bae:	b1b0      	cbz	r0, 8000bde <_vfiprintf_r+0x156>
 8000bb0:	9207      	str	r2, [sp, #28]
 8000bb2:	e014      	b.n	8000bde <_vfiprintf_r+0x156>
 8000bb4:	eba0 0308 	sub.w	r3, r0, r8
 8000bb8:	fa09 f303 	lsl.w	r3, r9, r3
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	9304      	str	r3, [sp, #16]
 8000bc0:	46a2      	mov	sl, r4
 8000bc2:	e7d2      	b.n	8000b6a <_vfiprintf_r+0xe2>
 8000bc4:	9b03      	ldr	r3, [sp, #12]
 8000bc6:	1d19      	adds	r1, r3, #4
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	9103      	str	r1, [sp, #12]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	bfbb      	ittet	lt
 8000bd0:	425b      	neglt	r3, r3
 8000bd2:	f042 0202 	orrlt.w	r2, r2, #2
 8000bd6:	9307      	strge	r3, [sp, #28]
 8000bd8:	9307      	strlt	r3, [sp, #28]
 8000bda:	bfb8      	it	lt
 8000bdc:	9204      	strlt	r2, [sp, #16]
 8000bde:	7823      	ldrb	r3, [r4, #0]
 8000be0:	2b2e      	cmp	r3, #46	; 0x2e
 8000be2:	d10c      	bne.n	8000bfe <_vfiprintf_r+0x176>
 8000be4:	7863      	ldrb	r3, [r4, #1]
 8000be6:	2b2a      	cmp	r3, #42	; 0x2a
 8000be8:	d135      	bne.n	8000c56 <_vfiprintf_r+0x1ce>
 8000bea:	9b03      	ldr	r3, [sp, #12]
 8000bec:	1d1a      	adds	r2, r3, #4
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	9203      	str	r2, [sp, #12]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	bfb8      	it	lt
 8000bf6:	f04f 33ff 	movlt.w	r3, #4294967295
 8000bfa:	3402      	adds	r4, #2
 8000bfc:	9305      	str	r3, [sp, #20]
 8000bfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000ce4 <_vfiprintf_r+0x25c>
 8000c02:	7821      	ldrb	r1, [r4, #0]
 8000c04:	2203      	movs	r2, #3
 8000c06:	4650      	mov	r0, sl
 8000c08:	f7ff fb02 	bl	8000210 <memchr>
 8000c0c:	b140      	cbz	r0, 8000c20 <_vfiprintf_r+0x198>
 8000c0e:	2340      	movs	r3, #64	; 0x40
 8000c10:	eba0 000a 	sub.w	r0, r0, sl
 8000c14:	fa03 f000 	lsl.w	r0, r3, r0
 8000c18:	9b04      	ldr	r3, [sp, #16]
 8000c1a:	4303      	orrs	r3, r0
 8000c1c:	3401      	adds	r4, #1
 8000c1e:	9304      	str	r3, [sp, #16]
 8000c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c24:	482c      	ldr	r0, [pc, #176]	; (8000cd8 <_vfiprintf_r+0x250>)
 8000c26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c2a:	2206      	movs	r2, #6
 8000c2c:	f7ff faf0 	bl	8000210 <memchr>
 8000c30:	2800      	cmp	r0, #0
 8000c32:	d03f      	beq.n	8000cb4 <_vfiprintf_r+0x22c>
 8000c34:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <_vfiprintf_r+0x254>)
 8000c36:	bb1b      	cbnz	r3, 8000c80 <_vfiprintf_r+0x1f8>
 8000c38:	9b03      	ldr	r3, [sp, #12]
 8000c3a:	3307      	adds	r3, #7
 8000c3c:	f023 0307 	bic.w	r3, r3, #7
 8000c40:	3308      	adds	r3, #8
 8000c42:	9303      	str	r3, [sp, #12]
 8000c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c46:	443b      	add	r3, r7
 8000c48:	9309      	str	r3, [sp, #36]	; 0x24
 8000c4a:	e767      	b.n	8000b1c <_vfiprintf_r+0x94>
 8000c4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c50:	460c      	mov	r4, r1
 8000c52:	2001      	movs	r0, #1
 8000c54:	e7a5      	b.n	8000ba2 <_vfiprintf_r+0x11a>
 8000c56:	2300      	movs	r3, #0
 8000c58:	3401      	adds	r4, #1
 8000c5a:	9305      	str	r3, [sp, #20]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f04f 0c0a 	mov.w	ip, #10
 8000c62:	4620      	mov	r0, r4
 8000c64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c68:	3a30      	subs	r2, #48	; 0x30
 8000c6a:	2a09      	cmp	r2, #9
 8000c6c:	d903      	bls.n	8000c76 <_vfiprintf_r+0x1ee>
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d0c5      	beq.n	8000bfe <_vfiprintf_r+0x176>
 8000c72:	9105      	str	r1, [sp, #20]
 8000c74:	e7c3      	b.n	8000bfe <_vfiprintf_r+0x176>
 8000c76:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e7f0      	b.n	8000c62 <_vfiprintf_r+0x1da>
 8000c80:	ab03      	add	r3, sp, #12
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	462a      	mov	r2, r5
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <_vfiprintf_r+0x258>)
 8000c88:	a904      	add	r1, sp, #16
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	f3af 8000 	nop.w
 8000c90:	4607      	mov	r7, r0
 8000c92:	1c78      	adds	r0, r7, #1
 8000c94:	d1d6      	bne.n	8000c44 <_vfiprintf_r+0x1bc>
 8000c96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c98:	07d9      	lsls	r1, r3, #31
 8000c9a:	d405      	bmi.n	8000ca8 <_vfiprintf_r+0x220>
 8000c9c:	89ab      	ldrh	r3, [r5, #12]
 8000c9e:	059a      	lsls	r2, r3, #22
 8000ca0:	d402      	bmi.n	8000ca8 <_vfiprintf_r+0x220>
 8000ca2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ca4:	f7ff fe31 	bl	800090a <__retarget_lock_release_recursive>
 8000ca8:	89ab      	ldrh	r3, [r5, #12]
 8000caa:	065b      	lsls	r3, r3, #25
 8000cac:	f53f af12 	bmi.w	8000ad4 <_vfiprintf_r+0x4c>
 8000cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000cb2:	e711      	b.n	8000ad8 <_vfiprintf_r+0x50>
 8000cb4:	ab03      	add	r3, sp, #12
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	462a      	mov	r2, r5
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <_vfiprintf_r+0x258>)
 8000cbc:	a904      	add	r1, sp, #16
 8000cbe:	4630      	mov	r0, r6
 8000cc0:	f000 f880 	bl	8000dc4 <_printf_i>
 8000cc4:	e7e4      	b.n	8000c90 <_vfiprintf_r+0x208>
 8000cc6:	bf00      	nop
 8000cc8:	08001660 	.word	0x08001660
 8000ccc:	08001680 	.word	0x08001680
 8000cd0:	08001640 	.word	0x08001640
 8000cd4:	080016a0 	.word	0x080016a0
 8000cd8:	080016aa 	.word	0x080016aa
 8000cdc:	00000000 	.word	0x00000000
 8000ce0:	08000a63 	.word	0x08000a63
 8000ce4:	080016a6 	.word	0x080016a6

08000ce8 <_printf_common>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	4616      	mov	r6, r2
 8000cee:	4699      	mov	r9, r3
 8000cf0:	688a      	ldr	r2, [r1, #8]
 8000cf2:	690b      	ldr	r3, [r1, #16]
 8000cf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	bfb8      	it	lt
 8000cfc:	4613      	movlt	r3, r2
 8000cfe:	6033      	str	r3, [r6, #0]
 8000d00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000d04:	4607      	mov	r7, r0
 8000d06:	460c      	mov	r4, r1
 8000d08:	b10a      	cbz	r2, 8000d0e <_printf_common+0x26>
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	6033      	str	r3, [r6, #0]
 8000d0e:	6823      	ldr	r3, [r4, #0]
 8000d10:	0699      	lsls	r1, r3, #26
 8000d12:	bf42      	ittt	mi
 8000d14:	6833      	ldrmi	r3, [r6, #0]
 8000d16:	3302      	addmi	r3, #2
 8000d18:	6033      	strmi	r3, [r6, #0]
 8000d1a:	6825      	ldr	r5, [r4, #0]
 8000d1c:	f015 0506 	ands.w	r5, r5, #6
 8000d20:	d106      	bne.n	8000d30 <_printf_common+0x48>
 8000d22:	f104 0a19 	add.w	sl, r4, #25
 8000d26:	68e3      	ldr	r3, [r4, #12]
 8000d28:	6832      	ldr	r2, [r6, #0]
 8000d2a:	1a9b      	subs	r3, r3, r2
 8000d2c:	42ab      	cmp	r3, r5
 8000d2e:	dc26      	bgt.n	8000d7e <_printf_common+0x96>
 8000d30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000d34:	1e13      	subs	r3, r2, #0
 8000d36:	6822      	ldr	r2, [r4, #0]
 8000d38:	bf18      	it	ne
 8000d3a:	2301      	movne	r3, #1
 8000d3c:	0692      	lsls	r2, r2, #26
 8000d3e:	d42b      	bmi.n	8000d98 <_printf_common+0xb0>
 8000d40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d44:	4649      	mov	r1, r9
 8000d46:	4638      	mov	r0, r7
 8000d48:	47c0      	blx	r8
 8000d4a:	3001      	adds	r0, #1
 8000d4c:	d01e      	beq.n	8000d8c <_printf_common+0xa4>
 8000d4e:	6823      	ldr	r3, [r4, #0]
 8000d50:	68e5      	ldr	r5, [r4, #12]
 8000d52:	6832      	ldr	r2, [r6, #0]
 8000d54:	f003 0306 	and.w	r3, r3, #6
 8000d58:	2b04      	cmp	r3, #4
 8000d5a:	bf08      	it	eq
 8000d5c:	1aad      	subeq	r5, r5, r2
 8000d5e:	68a3      	ldr	r3, [r4, #8]
 8000d60:	6922      	ldr	r2, [r4, #16]
 8000d62:	bf0c      	ite	eq
 8000d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d68:	2500      	movne	r5, #0
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	bfc4      	itt	gt
 8000d6e:	1a9b      	subgt	r3, r3, r2
 8000d70:	18ed      	addgt	r5, r5, r3
 8000d72:	2600      	movs	r6, #0
 8000d74:	341a      	adds	r4, #26
 8000d76:	42b5      	cmp	r5, r6
 8000d78:	d11a      	bne.n	8000db0 <_printf_common+0xc8>
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	e008      	b.n	8000d90 <_printf_common+0xa8>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	4652      	mov	r2, sl
 8000d82:	4649      	mov	r1, r9
 8000d84:	4638      	mov	r0, r7
 8000d86:	47c0      	blx	r8
 8000d88:	3001      	adds	r0, #1
 8000d8a:	d103      	bne.n	8000d94 <_printf_common+0xac>
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	3501      	adds	r5, #1
 8000d96:	e7c6      	b.n	8000d26 <_printf_common+0x3e>
 8000d98:	18e1      	adds	r1, r4, r3
 8000d9a:	1c5a      	adds	r2, r3, #1
 8000d9c:	2030      	movs	r0, #48	; 0x30
 8000d9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000da2:	4422      	add	r2, r4
 8000da4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000da8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000dac:	3302      	adds	r3, #2
 8000dae:	e7c7      	b.n	8000d40 <_printf_common+0x58>
 8000db0:	2301      	movs	r3, #1
 8000db2:	4622      	mov	r2, r4
 8000db4:	4649      	mov	r1, r9
 8000db6:	4638      	mov	r0, r7
 8000db8:	47c0      	blx	r8
 8000dba:	3001      	adds	r0, #1
 8000dbc:	d0e6      	beq.n	8000d8c <_printf_common+0xa4>
 8000dbe:	3601      	adds	r6, #1
 8000dc0:	e7d9      	b.n	8000d76 <_printf_common+0x8e>
	...

08000dc4 <_printf_i>:
 8000dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	7e0f      	ldrb	r7, [r1, #24]
 8000dca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000dcc:	2f78      	cmp	r7, #120	; 0x78
 8000dce:	4691      	mov	r9, r2
 8000dd0:	4680      	mov	r8, r0
 8000dd2:	460c      	mov	r4, r1
 8000dd4:	469a      	mov	sl, r3
 8000dd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000dda:	d807      	bhi.n	8000dec <_printf_i+0x28>
 8000ddc:	2f62      	cmp	r7, #98	; 0x62
 8000dde:	d80a      	bhi.n	8000df6 <_printf_i+0x32>
 8000de0:	2f00      	cmp	r7, #0
 8000de2:	f000 80d8 	beq.w	8000f96 <_printf_i+0x1d2>
 8000de6:	2f58      	cmp	r7, #88	; 0x58
 8000de8:	f000 80a3 	beq.w	8000f32 <_printf_i+0x16e>
 8000dec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000df0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000df4:	e03a      	b.n	8000e6c <_printf_i+0xa8>
 8000df6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000dfa:	2b15      	cmp	r3, #21
 8000dfc:	d8f6      	bhi.n	8000dec <_printf_i+0x28>
 8000dfe:	a101      	add	r1, pc, #4	; (adr r1, 8000e04 <_printf_i+0x40>)
 8000e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e04:	08000e5d 	.word	0x08000e5d
 8000e08:	08000e71 	.word	0x08000e71
 8000e0c:	08000ded 	.word	0x08000ded
 8000e10:	08000ded 	.word	0x08000ded
 8000e14:	08000ded 	.word	0x08000ded
 8000e18:	08000ded 	.word	0x08000ded
 8000e1c:	08000e71 	.word	0x08000e71
 8000e20:	08000ded 	.word	0x08000ded
 8000e24:	08000ded 	.word	0x08000ded
 8000e28:	08000ded 	.word	0x08000ded
 8000e2c:	08000ded 	.word	0x08000ded
 8000e30:	08000f7d 	.word	0x08000f7d
 8000e34:	08000ea1 	.word	0x08000ea1
 8000e38:	08000f5f 	.word	0x08000f5f
 8000e3c:	08000ded 	.word	0x08000ded
 8000e40:	08000ded 	.word	0x08000ded
 8000e44:	08000f9f 	.word	0x08000f9f
 8000e48:	08000ded 	.word	0x08000ded
 8000e4c:	08000ea1 	.word	0x08000ea1
 8000e50:	08000ded 	.word	0x08000ded
 8000e54:	08000ded 	.word	0x08000ded
 8000e58:	08000f67 	.word	0x08000f67
 8000e5c:	682b      	ldr	r3, [r5, #0]
 8000e5e:	1d1a      	adds	r2, r3, #4
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	602a      	str	r2, [r5, #0]
 8000e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e0a3      	b.n	8000fb8 <_printf_i+0x1f4>
 8000e70:	6820      	ldr	r0, [r4, #0]
 8000e72:	6829      	ldr	r1, [r5, #0]
 8000e74:	0606      	lsls	r6, r0, #24
 8000e76:	f101 0304 	add.w	r3, r1, #4
 8000e7a:	d50a      	bpl.n	8000e92 <_printf_i+0xce>
 8000e7c:	680e      	ldr	r6, [r1, #0]
 8000e7e:	602b      	str	r3, [r5, #0]
 8000e80:	2e00      	cmp	r6, #0
 8000e82:	da03      	bge.n	8000e8c <_printf_i+0xc8>
 8000e84:	232d      	movs	r3, #45	; 0x2d
 8000e86:	4276      	negs	r6, r6
 8000e88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e8c:	485e      	ldr	r0, [pc, #376]	; (8001008 <_printf_i+0x244>)
 8000e8e:	230a      	movs	r3, #10
 8000e90:	e019      	b.n	8000ec6 <_printf_i+0x102>
 8000e92:	680e      	ldr	r6, [r1, #0]
 8000e94:	602b      	str	r3, [r5, #0]
 8000e96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000e9a:	bf18      	it	ne
 8000e9c:	b236      	sxthne	r6, r6
 8000e9e:	e7ef      	b.n	8000e80 <_printf_i+0xbc>
 8000ea0:	682b      	ldr	r3, [r5, #0]
 8000ea2:	6820      	ldr	r0, [r4, #0]
 8000ea4:	1d19      	adds	r1, r3, #4
 8000ea6:	6029      	str	r1, [r5, #0]
 8000ea8:	0601      	lsls	r1, r0, #24
 8000eaa:	d501      	bpl.n	8000eb0 <_printf_i+0xec>
 8000eac:	681e      	ldr	r6, [r3, #0]
 8000eae:	e002      	b.n	8000eb6 <_printf_i+0xf2>
 8000eb0:	0646      	lsls	r6, r0, #25
 8000eb2:	d5fb      	bpl.n	8000eac <_printf_i+0xe8>
 8000eb4:	881e      	ldrh	r6, [r3, #0]
 8000eb6:	4854      	ldr	r0, [pc, #336]	; (8001008 <_printf_i+0x244>)
 8000eb8:	2f6f      	cmp	r7, #111	; 0x6f
 8000eba:	bf0c      	ite	eq
 8000ebc:	2308      	moveq	r3, #8
 8000ebe:	230a      	movne	r3, #10
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000ec6:	6865      	ldr	r5, [r4, #4]
 8000ec8:	60a5      	str	r5, [r4, #8]
 8000eca:	2d00      	cmp	r5, #0
 8000ecc:	bfa2      	ittt	ge
 8000ece:	6821      	ldrge	r1, [r4, #0]
 8000ed0:	f021 0104 	bicge.w	r1, r1, #4
 8000ed4:	6021      	strge	r1, [r4, #0]
 8000ed6:	b90e      	cbnz	r6, 8000edc <_printf_i+0x118>
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	d04d      	beq.n	8000f78 <_printf_i+0x1b4>
 8000edc:	4615      	mov	r5, r2
 8000ede:	fbb6 f1f3 	udiv	r1, r6, r3
 8000ee2:	fb03 6711 	mls	r7, r3, r1, r6
 8000ee6:	5dc7      	ldrb	r7, [r0, r7]
 8000ee8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000eec:	4637      	mov	r7, r6
 8000eee:	42bb      	cmp	r3, r7
 8000ef0:	460e      	mov	r6, r1
 8000ef2:	d9f4      	bls.n	8000ede <_printf_i+0x11a>
 8000ef4:	2b08      	cmp	r3, #8
 8000ef6:	d10b      	bne.n	8000f10 <_printf_i+0x14c>
 8000ef8:	6823      	ldr	r3, [r4, #0]
 8000efa:	07de      	lsls	r6, r3, #31
 8000efc:	d508      	bpl.n	8000f10 <_printf_i+0x14c>
 8000efe:	6923      	ldr	r3, [r4, #16]
 8000f00:	6861      	ldr	r1, [r4, #4]
 8000f02:	4299      	cmp	r1, r3
 8000f04:	bfde      	ittt	le
 8000f06:	2330      	movle	r3, #48	; 0x30
 8000f08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000f0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000f10:	1b52      	subs	r2, r2, r5
 8000f12:	6122      	str	r2, [r4, #16]
 8000f14:	f8cd a000 	str.w	sl, [sp]
 8000f18:	464b      	mov	r3, r9
 8000f1a:	aa03      	add	r2, sp, #12
 8000f1c:	4621      	mov	r1, r4
 8000f1e:	4640      	mov	r0, r8
 8000f20:	f7ff fee2 	bl	8000ce8 <_printf_common>
 8000f24:	3001      	adds	r0, #1
 8000f26:	d14c      	bne.n	8000fc2 <_printf_i+0x1fe>
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	b004      	add	sp, #16
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	4835      	ldr	r0, [pc, #212]	; (8001008 <_printf_i+0x244>)
 8000f34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000f38:	6829      	ldr	r1, [r5, #0]
 8000f3a:	6823      	ldr	r3, [r4, #0]
 8000f3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8000f40:	6029      	str	r1, [r5, #0]
 8000f42:	061d      	lsls	r5, r3, #24
 8000f44:	d514      	bpl.n	8000f70 <_printf_i+0x1ac>
 8000f46:	07df      	lsls	r7, r3, #31
 8000f48:	bf44      	itt	mi
 8000f4a:	f043 0320 	orrmi.w	r3, r3, #32
 8000f4e:	6023      	strmi	r3, [r4, #0]
 8000f50:	b91e      	cbnz	r6, 8000f5a <_printf_i+0x196>
 8000f52:	6823      	ldr	r3, [r4, #0]
 8000f54:	f023 0320 	bic.w	r3, r3, #32
 8000f58:	6023      	str	r3, [r4, #0]
 8000f5a:	2310      	movs	r3, #16
 8000f5c:	e7b0      	b.n	8000ec0 <_printf_i+0xfc>
 8000f5e:	6823      	ldr	r3, [r4, #0]
 8000f60:	f043 0320 	orr.w	r3, r3, #32
 8000f64:	6023      	str	r3, [r4, #0]
 8000f66:	2378      	movs	r3, #120	; 0x78
 8000f68:	4828      	ldr	r0, [pc, #160]	; (800100c <_printf_i+0x248>)
 8000f6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000f6e:	e7e3      	b.n	8000f38 <_printf_i+0x174>
 8000f70:	0659      	lsls	r1, r3, #25
 8000f72:	bf48      	it	mi
 8000f74:	b2b6      	uxthmi	r6, r6
 8000f76:	e7e6      	b.n	8000f46 <_printf_i+0x182>
 8000f78:	4615      	mov	r5, r2
 8000f7a:	e7bb      	b.n	8000ef4 <_printf_i+0x130>
 8000f7c:	682b      	ldr	r3, [r5, #0]
 8000f7e:	6826      	ldr	r6, [r4, #0]
 8000f80:	6961      	ldr	r1, [r4, #20]
 8000f82:	1d18      	adds	r0, r3, #4
 8000f84:	6028      	str	r0, [r5, #0]
 8000f86:	0635      	lsls	r5, r6, #24
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	d501      	bpl.n	8000f90 <_printf_i+0x1cc>
 8000f8c:	6019      	str	r1, [r3, #0]
 8000f8e:	e002      	b.n	8000f96 <_printf_i+0x1d2>
 8000f90:	0670      	lsls	r0, r6, #25
 8000f92:	d5fb      	bpl.n	8000f8c <_printf_i+0x1c8>
 8000f94:	8019      	strh	r1, [r3, #0]
 8000f96:	2300      	movs	r3, #0
 8000f98:	6123      	str	r3, [r4, #16]
 8000f9a:	4615      	mov	r5, r2
 8000f9c:	e7ba      	b.n	8000f14 <_printf_i+0x150>
 8000f9e:	682b      	ldr	r3, [r5, #0]
 8000fa0:	1d1a      	adds	r2, r3, #4
 8000fa2:	602a      	str	r2, [r5, #0]
 8000fa4:	681d      	ldr	r5, [r3, #0]
 8000fa6:	6862      	ldr	r2, [r4, #4]
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4628      	mov	r0, r5
 8000fac:	f7ff f930 	bl	8000210 <memchr>
 8000fb0:	b108      	cbz	r0, 8000fb6 <_printf_i+0x1f2>
 8000fb2:	1b40      	subs	r0, r0, r5
 8000fb4:	6060      	str	r0, [r4, #4]
 8000fb6:	6863      	ldr	r3, [r4, #4]
 8000fb8:	6123      	str	r3, [r4, #16]
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000fc0:	e7a8      	b.n	8000f14 <_printf_i+0x150>
 8000fc2:	6923      	ldr	r3, [r4, #16]
 8000fc4:	462a      	mov	r2, r5
 8000fc6:	4649      	mov	r1, r9
 8000fc8:	4640      	mov	r0, r8
 8000fca:	47d0      	blx	sl
 8000fcc:	3001      	adds	r0, #1
 8000fce:	d0ab      	beq.n	8000f28 <_printf_i+0x164>
 8000fd0:	6823      	ldr	r3, [r4, #0]
 8000fd2:	079b      	lsls	r3, r3, #30
 8000fd4:	d413      	bmi.n	8000ffe <_printf_i+0x23a>
 8000fd6:	68e0      	ldr	r0, [r4, #12]
 8000fd8:	9b03      	ldr	r3, [sp, #12]
 8000fda:	4298      	cmp	r0, r3
 8000fdc:	bfb8      	it	lt
 8000fde:	4618      	movlt	r0, r3
 8000fe0:	e7a4      	b.n	8000f2c <_printf_i+0x168>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	4632      	mov	r2, r6
 8000fe6:	4649      	mov	r1, r9
 8000fe8:	4640      	mov	r0, r8
 8000fea:	47d0      	blx	sl
 8000fec:	3001      	adds	r0, #1
 8000fee:	d09b      	beq.n	8000f28 <_printf_i+0x164>
 8000ff0:	3501      	adds	r5, #1
 8000ff2:	68e3      	ldr	r3, [r4, #12]
 8000ff4:	9903      	ldr	r1, [sp, #12]
 8000ff6:	1a5b      	subs	r3, r3, r1
 8000ff8:	42ab      	cmp	r3, r5
 8000ffa:	dcf2      	bgt.n	8000fe2 <_printf_i+0x21e>
 8000ffc:	e7eb      	b.n	8000fd6 <_printf_i+0x212>
 8000ffe:	2500      	movs	r5, #0
 8001000:	f104 0619 	add.w	r6, r4, #25
 8001004:	e7f5      	b.n	8000ff2 <_printf_i+0x22e>
 8001006:	bf00      	nop
 8001008:	080016b1 	.word	0x080016b1
 800100c:	080016c2 	.word	0x080016c2

08001010 <_sbrk_r>:
 8001010:	b538      	push	{r3, r4, r5, lr}
 8001012:	4d06      	ldr	r5, [pc, #24]	; (800102c <_sbrk_r+0x1c>)
 8001014:	2300      	movs	r3, #0
 8001016:	4604      	mov	r4, r0
 8001018:	4608      	mov	r0, r1
 800101a:	602b      	str	r3, [r5, #0]
 800101c:	f7ff fad4 	bl	80005c8 <_sbrk>
 8001020:	1c43      	adds	r3, r0, #1
 8001022:	d102      	bne.n	800102a <_sbrk_r+0x1a>
 8001024:	682b      	ldr	r3, [r5, #0]
 8001026:	b103      	cbz	r3, 800102a <_sbrk_r+0x1a>
 8001028:	6023      	str	r3, [r4, #0]
 800102a:	bd38      	pop	{r3, r4, r5, pc}
 800102c:	20000090 	.word	0x20000090

08001030 <__sread>:
 8001030:	b510      	push	{r4, lr}
 8001032:	460c      	mov	r4, r1
 8001034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001038:	f000 fab2 	bl	80015a0 <_read_r>
 800103c:	2800      	cmp	r0, #0
 800103e:	bfab      	itete	ge
 8001040:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001042:	89a3      	ldrhlt	r3, [r4, #12]
 8001044:	181b      	addge	r3, r3, r0
 8001046:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800104a:	bfac      	ite	ge
 800104c:	6563      	strge	r3, [r4, #84]	; 0x54
 800104e:	81a3      	strhlt	r3, [r4, #12]
 8001050:	bd10      	pop	{r4, pc}

08001052 <__swrite>:
 8001052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001056:	461f      	mov	r7, r3
 8001058:	898b      	ldrh	r3, [r1, #12]
 800105a:	05db      	lsls	r3, r3, #23
 800105c:	4605      	mov	r5, r0
 800105e:	460c      	mov	r4, r1
 8001060:	4616      	mov	r6, r2
 8001062:	d505      	bpl.n	8001070 <__swrite+0x1e>
 8001064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001068:	2302      	movs	r3, #2
 800106a:	2200      	movs	r2, #0
 800106c:	f000 f9c8 	bl	8001400 <_lseek_r>
 8001070:	89a3      	ldrh	r3, [r4, #12]
 8001072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800107a:	81a3      	strh	r3, [r4, #12]
 800107c:	4632      	mov	r2, r6
 800107e:	463b      	mov	r3, r7
 8001080:	4628      	mov	r0, r5
 8001082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001086:	f000 b869 	b.w	800115c <_write_r>

0800108a <__sseek>:
 800108a:	b510      	push	{r4, lr}
 800108c:	460c      	mov	r4, r1
 800108e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001092:	f000 f9b5 	bl	8001400 <_lseek_r>
 8001096:	1c43      	adds	r3, r0, #1
 8001098:	89a3      	ldrh	r3, [r4, #12]
 800109a:	bf15      	itete	ne
 800109c:	6560      	strne	r0, [r4, #84]	; 0x54
 800109e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80010a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80010a6:	81a3      	strheq	r3, [r4, #12]
 80010a8:	bf18      	it	ne
 80010aa:	81a3      	strhne	r3, [r4, #12]
 80010ac:	bd10      	pop	{r4, pc}

080010ae <__sclose>:
 80010ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010b2:	f000 b8d3 	b.w	800125c <_close_r>
	...

080010b8 <__swbuf_r>:
 80010b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ba:	460e      	mov	r6, r1
 80010bc:	4614      	mov	r4, r2
 80010be:	4605      	mov	r5, r0
 80010c0:	b118      	cbz	r0, 80010ca <__swbuf_r+0x12>
 80010c2:	6983      	ldr	r3, [r0, #24]
 80010c4:	b90b      	cbnz	r3, 80010ca <__swbuf_r+0x12>
 80010c6:	f7ff fb81 	bl	80007cc <__sinit>
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <__swbuf_r+0x98>)
 80010cc:	429c      	cmp	r4, r3
 80010ce:	d12b      	bne.n	8001128 <__swbuf_r+0x70>
 80010d0:	686c      	ldr	r4, [r5, #4]
 80010d2:	69a3      	ldr	r3, [r4, #24]
 80010d4:	60a3      	str	r3, [r4, #8]
 80010d6:	89a3      	ldrh	r3, [r4, #12]
 80010d8:	071a      	lsls	r2, r3, #28
 80010da:	d52f      	bpl.n	800113c <__swbuf_r+0x84>
 80010dc:	6923      	ldr	r3, [r4, #16]
 80010de:	b36b      	cbz	r3, 800113c <__swbuf_r+0x84>
 80010e0:	6923      	ldr	r3, [r4, #16]
 80010e2:	6820      	ldr	r0, [r4, #0]
 80010e4:	1ac0      	subs	r0, r0, r3
 80010e6:	6963      	ldr	r3, [r4, #20]
 80010e8:	b2f6      	uxtb	r6, r6
 80010ea:	4283      	cmp	r3, r0
 80010ec:	4637      	mov	r7, r6
 80010ee:	dc04      	bgt.n	80010fa <__swbuf_r+0x42>
 80010f0:	4621      	mov	r1, r4
 80010f2:	4628      	mov	r0, r5
 80010f4:	f000 f948 	bl	8001388 <_fflush_r>
 80010f8:	bb30      	cbnz	r0, 8001148 <__swbuf_r+0x90>
 80010fa:	68a3      	ldr	r3, [r4, #8]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	60a3      	str	r3, [r4, #8]
 8001100:	6823      	ldr	r3, [r4, #0]
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	6022      	str	r2, [r4, #0]
 8001106:	701e      	strb	r6, [r3, #0]
 8001108:	6963      	ldr	r3, [r4, #20]
 800110a:	3001      	adds	r0, #1
 800110c:	4283      	cmp	r3, r0
 800110e:	d004      	beq.n	800111a <__swbuf_r+0x62>
 8001110:	89a3      	ldrh	r3, [r4, #12]
 8001112:	07db      	lsls	r3, r3, #31
 8001114:	d506      	bpl.n	8001124 <__swbuf_r+0x6c>
 8001116:	2e0a      	cmp	r6, #10
 8001118:	d104      	bne.n	8001124 <__swbuf_r+0x6c>
 800111a:	4621      	mov	r1, r4
 800111c:	4628      	mov	r0, r5
 800111e:	f000 f933 	bl	8001388 <_fflush_r>
 8001122:	b988      	cbnz	r0, 8001148 <__swbuf_r+0x90>
 8001124:	4638      	mov	r0, r7
 8001126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <__swbuf_r+0x9c>)
 800112a:	429c      	cmp	r4, r3
 800112c:	d101      	bne.n	8001132 <__swbuf_r+0x7a>
 800112e:	68ac      	ldr	r4, [r5, #8]
 8001130:	e7cf      	b.n	80010d2 <__swbuf_r+0x1a>
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <__swbuf_r+0xa0>)
 8001134:	429c      	cmp	r4, r3
 8001136:	bf08      	it	eq
 8001138:	68ec      	ldreq	r4, [r5, #12]
 800113a:	e7ca      	b.n	80010d2 <__swbuf_r+0x1a>
 800113c:	4621      	mov	r1, r4
 800113e:	4628      	mov	r0, r5
 8001140:	f000 f81e 	bl	8001180 <__swsetup_r>
 8001144:	2800      	cmp	r0, #0
 8001146:	d0cb      	beq.n	80010e0 <__swbuf_r+0x28>
 8001148:	f04f 37ff 	mov.w	r7, #4294967295
 800114c:	e7ea      	b.n	8001124 <__swbuf_r+0x6c>
 800114e:	bf00      	nop
 8001150:	08001660 	.word	0x08001660
 8001154:	08001680 	.word	0x08001680
 8001158:	08001640 	.word	0x08001640

0800115c <_write_r>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	4d07      	ldr	r5, [pc, #28]	; (800117c <_write_r+0x20>)
 8001160:	4604      	mov	r4, r0
 8001162:	4608      	mov	r0, r1
 8001164:	4611      	mov	r1, r2
 8001166:	2200      	movs	r2, #0
 8001168:	602a      	str	r2, [r5, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	f7ff f9db 	bl	8000526 <_write>
 8001170:	1c43      	adds	r3, r0, #1
 8001172:	d102      	bne.n	800117a <_write_r+0x1e>
 8001174:	682b      	ldr	r3, [r5, #0]
 8001176:	b103      	cbz	r3, 800117a <_write_r+0x1e>
 8001178:	6023      	str	r3, [r4, #0]
 800117a:	bd38      	pop	{r3, r4, r5, pc}
 800117c:	20000090 	.word	0x20000090

08001180 <__swsetup_r>:
 8001180:	4b32      	ldr	r3, [pc, #200]	; (800124c <__swsetup_r+0xcc>)
 8001182:	b570      	push	{r4, r5, r6, lr}
 8001184:	681d      	ldr	r5, [r3, #0]
 8001186:	4606      	mov	r6, r0
 8001188:	460c      	mov	r4, r1
 800118a:	b125      	cbz	r5, 8001196 <__swsetup_r+0x16>
 800118c:	69ab      	ldr	r3, [r5, #24]
 800118e:	b913      	cbnz	r3, 8001196 <__swsetup_r+0x16>
 8001190:	4628      	mov	r0, r5
 8001192:	f7ff fb1b 	bl	80007cc <__sinit>
 8001196:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <__swsetup_r+0xd0>)
 8001198:	429c      	cmp	r4, r3
 800119a:	d10f      	bne.n	80011bc <__swsetup_r+0x3c>
 800119c:	686c      	ldr	r4, [r5, #4]
 800119e:	89a3      	ldrh	r3, [r4, #12]
 80011a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011a4:	0719      	lsls	r1, r3, #28
 80011a6:	d42c      	bmi.n	8001202 <__swsetup_r+0x82>
 80011a8:	06dd      	lsls	r5, r3, #27
 80011aa:	d411      	bmi.n	80011d0 <__swsetup_r+0x50>
 80011ac:	2309      	movs	r3, #9
 80011ae:	6033      	str	r3, [r6, #0]
 80011b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80011b4:	81a3      	strh	r3, [r4, #12]
 80011b6:	f04f 30ff 	mov.w	r0, #4294967295
 80011ba:	e03e      	b.n	800123a <__swsetup_r+0xba>
 80011bc:	4b25      	ldr	r3, [pc, #148]	; (8001254 <__swsetup_r+0xd4>)
 80011be:	429c      	cmp	r4, r3
 80011c0:	d101      	bne.n	80011c6 <__swsetup_r+0x46>
 80011c2:	68ac      	ldr	r4, [r5, #8]
 80011c4:	e7eb      	b.n	800119e <__swsetup_r+0x1e>
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <__swsetup_r+0xd8>)
 80011c8:	429c      	cmp	r4, r3
 80011ca:	bf08      	it	eq
 80011cc:	68ec      	ldreq	r4, [r5, #12]
 80011ce:	e7e6      	b.n	800119e <__swsetup_r+0x1e>
 80011d0:	0758      	lsls	r0, r3, #29
 80011d2:	d512      	bpl.n	80011fa <__swsetup_r+0x7a>
 80011d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011d6:	b141      	cbz	r1, 80011ea <__swsetup_r+0x6a>
 80011d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80011dc:	4299      	cmp	r1, r3
 80011de:	d002      	beq.n	80011e6 <__swsetup_r+0x66>
 80011e0:	4630      	mov	r0, r6
 80011e2:	f000 f991 	bl	8001508 <_free_r>
 80011e6:	2300      	movs	r3, #0
 80011e8:	6363      	str	r3, [r4, #52]	; 0x34
 80011ea:	89a3      	ldrh	r3, [r4, #12]
 80011ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80011f0:	81a3      	strh	r3, [r4, #12]
 80011f2:	2300      	movs	r3, #0
 80011f4:	6063      	str	r3, [r4, #4]
 80011f6:	6923      	ldr	r3, [r4, #16]
 80011f8:	6023      	str	r3, [r4, #0]
 80011fa:	89a3      	ldrh	r3, [r4, #12]
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	81a3      	strh	r3, [r4, #12]
 8001202:	6923      	ldr	r3, [r4, #16]
 8001204:	b94b      	cbnz	r3, 800121a <__swsetup_r+0x9a>
 8001206:	89a3      	ldrh	r3, [r4, #12]
 8001208:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800120c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001210:	d003      	beq.n	800121a <__swsetup_r+0x9a>
 8001212:	4621      	mov	r1, r4
 8001214:	4630      	mov	r0, r6
 8001216:	f000 f92b 	bl	8001470 <__smakebuf_r>
 800121a:	89a0      	ldrh	r0, [r4, #12]
 800121c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001220:	f010 0301 	ands.w	r3, r0, #1
 8001224:	d00a      	beq.n	800123c <__swsetup_r+0xbc>
 8001226:	2300      	movs	r3, #0
 8001228:	60a3      	str	r3, [r4, #8]
 800122a:	6963      	ldr	r3, [r4, #20]
 800122c:	425b      	negs	r3, r3
 800122e:	61a3      	str	r3, [r4, #24]
 8001230:	6923      	ldr	r3, [r4, #16]
 8001232:	b943      	cbnz	r3, 8001246 <__swsetup_r+0xc6>
 8001234:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001238:	d1ba      	bne.n	80011b0 <__swsetup_r+0x30>
 800123a:	bd70      	pop	{r4, r5, r6, pc}
 800123c:	0781      	lsls	r1, r0, #30
 800123e:	bf58      	it	pl
 8001240:	6963      	ldrpl	r3, [r4, #20]
 8001242:	60a3      	str	r3, [r4, #8]
 8001244:	e7f4      	b.n	8001230 <__swsetup_r+0xb0>
 8001246:	2000      	movs	r0, #0
 8001248:	e7f7      	b.n	800123a <__swsetup_r+0xba>
 800124a:	bf00      	nop
 800124c:	20000000 	.word	0x20000000
 8001250:	08001660 	.word	0x08001660
 8001254:	08001680 	.word	0x08001680
 8001258:	08001640 	.word	0x08001640

0800125c <_close_r>:
 800125c:	b538      	push	{r3, r4, r5, lr}
 800125e:	4d06      	ldr	r5, [pc, #24]	; (8001278 <_close_r+0x1c>)
 8001260:	2300      	movs	r3, #0
 8001262:	4604      	mov	r4, r0
 8001264:	4608      	mov	r0, r1
 8001266:	602b      	str	r3, [r5, #0]
 8001268:	f7ff f979 	bl	800055e <_close>
 800126c:	1c43      	adds	r3, r0, #1
 800126e:	d102      	bne.n	8001276 <_close_r+0x1a>
 8001270:	682b      	ldr	r3, [r5, #0]
 8001272:	b103      	cbz	r3, 8001276 <_close_r+0x1a>
 8001274:	6023      	str	r3, [r4, #0]
 8001276:	bd38      	pop	{r3, r4, r5, pc}
 8001278:	20000090 	.word	0x20000090

0800127c <__sflush_r>:
 800127c:	898a      	ldrh	r2, [r1, #12]
 800127e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001282:	4605      	mov	r5, r0
 8001284:	0710      	lsls	r0, r2, #28
 8001286:	460c      	mov	r4, r1
 8001288:	d458      	bmi.n	800133c <__sflush_r+0xc0>
 800128a:	684b      	ldr	r3, [r1, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	dc05      	bgt.n	800129c <__sflush_r+0x20>
 8001290:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001292:	2b00      	cmp	r3, #0
 8001294:	dc02      	bgt.n	800129c <__sflush_r+0x20>
 8001296:	2000      	movs	r0, #0
 8001298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800129c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800129e:	2e00      	cmp	r6, #0
 80012a0:	d0f9      	beq.n	8001296 <__sflush_r+0x1a>
 80012a2:	2300      	movs	r3, #0
 80012a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012a8:	682f      	ldr	r7, [r5, #0]
 80012aa:	602b      	str	r3, [r5, #0]
 80012ac:	d032      	beq.n	8001314 <__sflush_r+0x98>
 80012ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012b0:	89a3      	ldrh	r3, [r4, #12]
 80012b2:	075a      	lsls	r2, r3, #29
 80012b4:	d505      	bpl.n	80012c2 <__sflush_r+0x46>
 80012b6:	6863      	ldr	r3, [r4, #4]
 80012b8:	1ac0      	subs	r0, r0, r3
 80012ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012bc:	b10b      	cbz	r3, 80012c2 <__sflush_r+0x46>
 80012be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012c0:	1ac0      	subs	r0, r0, r3
 80012c2:	2300      	movs	r3, #0
 80012c4:	4602      	mov	r2, r0
 80012c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012c8:	6a21      	ldr	r1, [r4, #32]
 80012ca:	4628      	mov	r0, r5
 80012cc:	47b0      	blx	r6
 80012ce:	1c43      	adds	r3, r0, #1
 80012d0:	89a3      	ldrh	r3, [r4, #12]
 80012d2:	d106      	bne.n	80012e2 <__sflush_r+0x66>
 80012d4:	6829      	ldr	r1, [r5, #0]
 80012d6:	291d      	cmp	r1, #29
 80012d8:	d82c      	bhi.n	8001334 <__sflush_r+0xb8>
 80012da:	4a2a      	ldr	r2, [pc, #168]	; (8001384 <__sflush_r+0x108>)
 80012dc:	40ca      	lsrs	r2, r1
 80012de:	07d6      	lsls	r6, r2, #31
 80012e0:	d528      	bpl.n	8001334 <__sflush_r+0xb8>
 80012e2:	2200      	movs	r2, #0
 80012e4:	6062      	str	r2, [r4, #4]
 80012e6:	04d9      	lsls	r1, r3, #19
 80012e8:	6922      	ldr	r2, [r4, #16]
 80012ea:	6022      	str	r2, [r4, #0]
 80012ec:	d504      	bpl.n	80012f8 <__sflush_r+0x7c>
 80012ee:	1c42      	adds	r2, r0, #1
 80012f0:	d101      	bne.n	80012f6 <__sflush_r+0x7a>
 80012f2:	682b      	ldr	r3, [r5, #0]
 80012f4:	b903      	cbnz	r3, 80012f8 <__sflush_r+0x7c>
 80012f6:	6560      	str	r0, [r4, #84]	; 0x54
 80012f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012fa:	602f      	str	r7, [r5, #0]
 80012fc:	2900      	cmp	r1, #0
 80012fe:	d0ca      	beq.n	8001296 <__sflush_r+0x1a>
 8001300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001304:	4299      	cmp	r1, r3
 8001306:	d002      	beq.n	800130e <__sflush_r+0x92>
 8001308:	4628      	mov	r0, r5
 800130a:	f000 f8fd 	bl	8001508 <_free_r>
 800130e:	2000      	movs	r0, #0
 8001310:	6360      	str	r0, [r4, #52]	; 0x34
 8001312:	e7c1      	b.n	8001298 <__sflush_r+0x1c>
 8001314:	6a21      	ldr	r1, [r4, #32]
 8001316:	2301      	movs	r3, #1
 8001318:	4628      	mov	r0, r5
 800131a:	47b0      	blx	r6
 800131c:	1c41      	adds	r1, r0, #1
 800131e:	d1c7      	bne.n	80012b0 <__sflush_r+0x34>
 8001320:	682b      	ldr	r3, [r5, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0c4      	beq.n	80012b0 <__sflush_r+0x34>
 8001326:	2b1d      	cmp	r3, #29
 8001328:	d001      	beq.n	800132e <__sflush_r+0xb2>
 800132a:	2b16      	cmp	r3, #22
 800132c:	d101      	bne.n	8001332 <__sflush_r+0xb6>
 800132e:	602f      	str	r7, [r5, #0]
 8001330:	e7b1      	b.n	8001296 <__sflush_r+0x1a>
 8001332:	89a3      	ldrh	r3, [r4, #12]
 8001334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001338:	81a3      	strh	r3, [r4, #12]
 800133a:	e7ad      	b.n	8001298 <__sflush_r+0x1c>
 800133c:	690f      	ldr	r7, [r1, #16]
 800133e:	2f00      	cmp	r7, #0
 8001340:	d0a9      	beq.n	8001296 <__sflush_r+0x1a>
 8001342:	0793      	lsls	r3, r2, #30
 8001344:	680e      	ldr	r6, [r1, #0]
 8001346:	bf08      	it	eq
 8001348:	694b      	ldreq	r3, [r1, #20]
 800134a:	600f      	str	r7, [r1, #0]
 800134c:	bf18      	it	ne
 800134e:	2300      	movne	r3, #0
 8001350:	eba6 0807 	sub.w	r8, r6, r7
 8001354:	608b      	str	r3, [r1, #8]
 8001356:	f1b8 0f00 	cmp.w	r8, #0
 800135a:	dd9c      	ble.n	8001296 <__sflush_r+0x1a>
 800135c:	6a21      	ldr	r1, [r4, #32]
 800135e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001360:	4643      	mov	r3, r8
 8001362:	463a      	mov	r2, r7
 8001364:	4628      	mov	r0, r5
 8001366:	47b0      	blx	r6
 8001368:	2800      	cmp	r0, #0
 800136a:	dc06      	bgt.n	800137a <__sflush_r+0xfe>
 800136c:	89a3      	ldrh	r3, [r4, #12]
 800136e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001372:	81a3      	strh	r3, [r4, #12]
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	e78e      	b.n	8001298 <__sflush_r+0x1c>
 800137a:	4407      	add	r7, r0
 800137c:	eba8 0800 	sub.w	r8, r8, r0
 8001380:	e7e9      	b.n	8001356 <__sflush_r+0xda>
 8001382:	bf00      	nop
 8001384:	20400001 	.word	0x20400001

08001388 <_fflush_r>:
 8001388:	b538      	push	{r3, r4, r5, lr}
 800138a:	690b      	ldr	r3, [r1, #16]
 800138c:	4605      	mov	r5, r0
 800138e:	460c      	mov	r4, r1
 8001390:	b913      	cbnz	r3, 8001398 <_fflush_r+0x10>
 8001392:	2500      	movs	r5, #0
 8001394:	4628      	mov	r0, r5
 8001396:	bd38      	pop	{r3, r4, r5, pc}
 8001398:	b118      	cbz	r0, 80013a2 <_fflush_r+0x1a>
 800139a:	6983      	ldr	r3, [r0, #24]
 800139c:	b90b      	cbnz	r3, 80013a2 <_fflush_r+0x1a>
 800139e:	f7ff fa15 	bl	80007cc <__sinit>
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <_fflush_r+0x6c>)
 80013a4:	429c      	cmp	r4, r3
 80013a6:	d11b      	bne.n	80013e0 <_fflush_r+0x58>
 80013a8:	686c      	ldr	r4, [r5, #4]
 80013aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0ef      	beq.n	8001392 <_fflush_r+0xa>
 80013b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013b4:	07d0      	lsls	r0, r2, #31
 80013b6:	d404      	bmi.n	80013c2 <_fflush_r+0x3a>
 80013b8:	0599      	lsls	r1, r3, #22
 80013ba:	d402      	bmi.n	80013c2 <_fflush_r+0x3a>
 80013bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013be:	f7ff faa3 	bl	8000908 <__retarget_lock_acquire_recursive>
 80013c2:	4628      	mov	r0, r5
 80013c4:	4621      	mov	r1, r4
 80013c6:	f7ff ff59 	bl	800127c <__sflush_r>
 80013ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013cc:	07da      	lsls	r2, r3, #31
 80013ce:	4605      	mov	r5, r0
 80013d0:	d4e0      	bmi.n	8001394 <_fflush_r+0xc>
 80013d2:	89a3      	ldrh	r3, [r4, #12]
 80013d4:	059b      	lsls	r3, r3, #22
 80013d6:	d4dd      	bmi.n	8001394 <_fflush_r+0xc>
 80013d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013da:	f7ff fa96 	bl	800090a <__retarget_lock_release_recursive>
 80013de:	e7d9      	b.n	8001394 <_fflush_r+0xc>
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <_fflush_r+0x70>)
 80013e2:	429c      	cmp	r4, r3
 80013e4:	d101      	bne.n	80013ea <_fflush_r+0x62>
 80013e6:	68ac      	ldr	r4, [r5, #8]
 80013e8:	e7df      	b.n	80013aa <_fflush_r+0x22>
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <_fflush_r+0x74>)
 80013ec:	429c      	cmp	r4, r3
 80013ee:	bf08      	it	eq
 80013f0:	68ec      	ldreq	r4, [r5, #12]
 80013f2:	e7da      	b.n	80013aa <_fflush_r+0x22>
 80013f4:	08001660 	.word	0x08001660
 80013f8:	08001680 	.word	0x08001680
 80013fc:	08001640 	.word	0x08001640

08001400 <_lseek_r>:
 8001400:	b538      	push	{r3, r4, r5, lr}
 8001402:	4d07      	ldr	r5, [pc, #28]	; (8001420 <_lseek_r+0x20>)
 8001404:	4604      	mov	r4, r0
 8001406:	4608      	mov	r0, r1
 8001408:	4611      	mov	r1, r2
 800140a:	2200      	movs	r2, #0
 800140c:	602a      	str	r2, [r5, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	f7ff f8cc 	bl	80005ac <_lseek>
 8001414:	1c43      	adds	r3, r0, #1
 8001416:	d102      	bne.n	800141e <_lseek_r+0x1e>
 8001418:	682b      	ldr	r3, [r5, #0]
 800141a:	b103      	cbz	r3, 800141e <_lseek_r+0x1e>
 800141c:	6023      	str	r3, [r4, #0]
 800141e:	bd38      	pop	{r3, r4, r5, pc}
 8001420:	20000090 	.word	0x20000090

08001424 <__swhatbuf_r>:
 8001424:	b570      	push	{r4, r5, r6, lr}
 8001426:	460e      	mov	r6, r1
 8001428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800142c:	2900      	cmp	r1, #0
 800142e:	b096      	sub	sp, #88	; 0x58
 8001430:	4614      	mov	r4, r2
 8001432:	461d      	mov	r5, r3
 8001434:	da08      	bge.n	8001448 <__swhatbuf_r+0x24>
 8001436:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800143a:	2200      	movs	r2, #0
 800143c:	602a      	str	r2, [r5, #0]
 800143e:	061a      	lsls	r2, r3, #24
 8001440:	d410      	bmi.n	8001464 <__swhatbuf_r+0x40>
 8001442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001446:	e00e      	b.n	8001466 <__swhatbuf_r+0x42>
 8001448:	466a      	mov	r2, sp
 800144a:	f000 f8bb 	bl	80015c4 <_fstat_r>
 800144e:	2800      	cmp	r0, #0
 8001450:	dbf1      	blt.n	8001436 <__swhatbuf_r+0x12>
 8001452:	9a01      	ldr	r2, [sp, #4]
 8001454:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001458:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800145c:	425a      	negs	r2, r3
 800145e:	415a      	adcs	r2, r3
 8001460:	602a      	str	r2, [r5, #0]
 8001462:	e7ee      	b.n	8001442 <__swhatbuf_r+0x1e>
 8001464:	2340      	movs	r3, #64	; 0x40
 8001466:	2000      	movs	r0, #0
 8001468:	6023      	str	r3, [r4, #0]
 800146a:	b016      	add	sp, #88	; 0x58
 800146c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001470 <__smakebuf_r>:
 8001470:	898b      	ldrh	r3, [r1, #12]
 8001472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001474:	079d      	lsls	r5, r3, #30
 8001476:	4606      	mov	r6, r0
 8001478:	460c      	mov	r4, r1
 800147a:	d507      	bpl.n	800148c <__smakebuf_r+0x1c>
 800147c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001480:	6023      	str	r3, [r4, #0]
 8001482:	6123      	str	r3, [r4, #16]
 8001484:	2301      	movs	r3, #1
 8001486:	6163      	str	r3, [r4, #20]
 8001488:	b002      	add	sp, #8
 800148a:	bd70      	pop	{r4, r5, r6, pc}
 800148c:	ab01      	add	r3, sp, #4
 800148e:	466a      	mov	r2, sp
 8001490:	f7ff ffc8 	bl	8001424 <__swhatbuf_r>
 8001494:	9900      	ldr	r1, [sp, #0]
 8001496:	4605      	mov	r5, r0
 8001498:	4630      	mov	r0, r6
 800149a:	f7ff fa57 	bl	800094c <_malloc_r>
 800149e:	b948      	cbnz	r0, 80014b4 <__smakebuf_r+0x44>
 80014a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014a4:	059a      	lsls	r2, r3, #22
 80014a6:	d4ef      	bmi.n	8001488 <__smakebuf_r+0x18>
 80014a8:	f023 0303 	bic.w	r3, r3, #3
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	81a3      	strh	r3, [r4, #12]
 80014b2:	e7e3      	b.n	800147c <__smakebuf_r+0xc>
 80014b4:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <__smakebuf_r+0x7c>)
 80014b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80014b8:	89a3      	ldrh	r3, [r4, #12]
 80014ba:	6020      	str	r0, [r4, #0]
 80014bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c0:	81a3      	strh	r3, [r4, #12]
 80014c2:	9b00      	ldr	r3, [sp, #0]
 80014c4:	6163      	str	r3, [r4, #20]
 80014c6:	9b01      	ldr	r3, [sp, #4]
 80014c8:	6120      	str	r0, [r4, #16]
 80014ca:	b15b      	cbz	r3, 80014e4 <__smakebuf_r+0x74>
 80014cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014d0:	4630      	mov	r0, r6
 80014d2:	f000 f889 	bl	80015e8 <_isatty_r>
 80014d6:	b128      	cbz	r0, 80014e4 <__smakebuf_r+0x74>
 80014d8:	89a3      	ldrh	r3, [r4, #12]
 80014da:	f023 0303 	bic.w	r3, r3, #3
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	81a3      	strh	r3, [r4, #12]
 80014e4:	89a0      	ldrh	r0, [r4, #12]
 80014e6:	4305      	orrs	r5, r0
 80014e8:	81a5      	strh	r5, [r4, #12]
 80014ea:	e7cd      	b.n	8001488 <__smakebuf_r+0x18>
 80014ec:	08000765 	.word	0x08000765

080014f0 <__malloc_lock>:
 80014f0:	4801      	ldr	r0, [pc, #4]	; (80014f8 <__malloc_lock+0x8>)
 80014f2:	f7ff ba09 	b.w	8000908 <__retarget_lock_acquire_recursive>
 80014f6:	bf00      	nop
 80014f8:	20000084 	.word	0x20000084

080014fc <__malloc_unlock>:
 80014fc:	4801      	ldr	r0, [pc, #4]	; (8001504 <__malloc_unlock+0x8>)
 80014fe:	f7ff ba04 	b.w	800090a <__retarget_lock_release_recursive>
 8001502:	bf00      	nop
 8001504:	20000084 	.word	0x20000084

08001508 <_free_r>:
 8001508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800150a:	2900      	cmp	r1, #0
 800150c:	d044      	beq.n	8001598 <_free_r+0x90>
 800150e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001512:	9001      	str	r0, [sp, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	f1a1 0404 	sub.w	r4, r1, #4
 800151a:	bfb8      	it	lt
 800151c:	18e4      	addlt	r4, r4, r3
 800151e:	f7ff ffe7 	bl	80014f0 <__malloc_lock>
 8001522:	4a1e      	ldr	r2, [pc, #120]	; (800159c <_free_r+0x94>)
 8001524:	9801      	ldr	r0, [sp, #4]
 8001526:	6813      	ldr	r3, [r2, #0]
 8001528:	b933      	cbnz	r3, 8001538 <_free_r+0x30>
 800152a:	6063      	str	r3, [r4, #4]
 800152c:	6014      	str	r4, [r2, #0]
 800152e:	b003      	add	sp, #12
 8001530:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001534:	f7ff bfe2 	b.w	80014fc <__malloc_unlock>
 8001538:	42a3      	cmp	r3, r4
 800153a:	d908      	bls.n	800154e <_free_r+0x46>
 800153c:	6825      	ldr	r5, [r4, #0]
 800153e:	1961      	adds	r1, r4, r5
 8001540:	428b      	cmp	r3, r1
 8001542:	bf01      	itttt	eq
 8001544:	6819      	ldreq	r1, [r3, #0]
 8001546:	685b      	ldreq	r3, [r3, #4]
 8001548:	1949      	addeq	r1, r1, r5
 800154a:	6021      	streq	r1, [r4, #0]
 800154c:	e7ed      	b.n	800152a <_free_r+0x22>
 800154e:	461a      	mov	r2, r3
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	b10b      	cbz	r3, 8001558 <_free_r+0x50>
 8001554:	42a3      	cmp	r3, r4
 8001556:	d9fa      	bls.n	800154e <_free_r+0x46>
 8001558:	6811      	ldr	r1, [r2, #0]
 800155a:	1855      	adds	r5, r2, r1
 800155c:	42a5      	cmp	r5, r4
 800155e:	d10b      	bne.n	8001578 <_free_r+0x70>
 8001560:	6824      	ldr	r4, [r4, #0]
 8001562:	4421      	add	r1, r4
 8001564:	1854      	adds	r4, r2, r1
 8001566:	42a3      	cmp	r3, r4
 8001568:	6011      	str	r1, [r2, #0]
 800156a:	d1e0      	bne.n	800152e <_free_r+0x26>
 800156c:	681c      	ldr	r4, [r3, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	6053      	str	r3, [r2, #4]
 8001572:	4421      	add	r1, r4
 8001574:	6011      	str	r1, [r2, #0]
 8001576:	e7da      	b.n	800152e <_free_r+0x26>
 8001578:	d902      	bls.n	8001580 <_free_r+0x78>
 800157a:	230c      	movs	r3, #12
 800157c:	6003      	str	r3, [r0, #0]
 800157e:	e7d6      	b.n	800152e <_free_r+0x26>
 8001580:	6825      	ldr	r5, [r4, #0]
 8001582:	1961      	adds	r1, r4, r5
 8001584:	428b      	cmp	r3, r1
 8001586:	bf04      	itt	eq
 8001588:	6819      	ldreq	r1, [r3, #0]
 800158a:	685b      	ldreq	r3, [r3, #4]
 800158c:	6063      	str	r3, [r4, #4]
 800158e:	bf04      	itt	eq
 8001590:	1949      	addeq	r1, r1, r5
 8001592:	6021      	streq	r1, [r4, #0]
 8001594:	6054      	str	r4, [r2, #4]
 8001596:	e7ca      	b.n	800152e <_free_r+0x26>
 8001598:	b003      	add	sp, #12
 800159a:	bd30      	pop	{r4, r5, pc}
 800159c:	20000088 	.word	0x20000088

080015a0 <_read_r>:
 80015a0:	b538      	push	{r3, r4, r5, lr}
 80015a2:	4d07      	ldr	r5, [pc, #28]	; (80015c0 <_read_r+0x20>)
 80015a4:	4604      	mov	r4, r0
 80015a6:	4608      	mov	r0, r1
 80015a8:	4611      	mov	r1, r2
 80015aa:	2200      	movs	r2, #0
 80015ac:	602a      	str	r2, [r5, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	f7fe ff9c 	bl	80004ec <_read>
 80015b4:	1c43      	adds	r3, r0, #1
 80015b6:	d102      	bne.n	80015be <_read_r+0x1e>
 80015b8:	682b      	ldr	r3, [r5, #0]
 80015ba:	b103      	cbz	r3, 80015be <_read_r+0x1e>
 80015bc:	6023      	str	r3, [r4, #0]
 80015be:	bd38      	pop	{r3, r4, r5, pc}
 80015c0:	20000090 	.word	0x20000090

080015c4 <_fstat_r>:
 80015c4:	b538      	push	{r3, r4, r5, lr}
 80015c6:	4d07      	ldr	r5, [pc, #28]	; (80015e4 <_fstat_r+0x20>)
 80015c8:	2300      	movs	r3, #0
 80015ca:	4604      	mov	r4, r0
 80015cc:	4608      	mov	r0, r1
 80015ce:	4611      	mov	r1, r2
 80015d0:	602b      	str	r3, [r5, #0]
 80015d2:	f7fe ffd0 	bl	8000576 <_fstat>
 80015d6:	1c43      	adds	r3, r0, #1
 80015d8:	d102      	bne.n	80015e0 <_fstat_r+0x1c>
 80015da:	682b      	ldr	r3, [r5, #0]
 80015dc:	b103      	cbz	r3, 80015e0 <_fstat_r+0x1c>
 80015de:	6023      	str	r3, [r4, #0]
 80015e0:	bd38      	pop	{r3, r4, r5, pc}
 80015e2:	bf00      	nop
 80015e4:	20000090 	.word	0x20000090

080015e8 <_isatty_r>:
 80015e8:	b538      	push	{r3, r4, r5, lr}
 80015ea:	4d06      	ldr	r5, [pc, #24]	; (8001604 <_isatty_r+0x1c>)
 80015ec:	2300      	movs	r3, #0
 80015ee:	4604      	mov	r4, r0
 80015f0:	4608      	mov	r0, r1
 80015f2:	602b      	str	r3, [r5, #0]
 80015f4:	f7fe ffcf 	bl	8000596 <_isatty>
 80015f8:	1c43      	adds	r3, r0, #1
 80015fa:	d102      	bne.n	8001602 <_isatty_r+0x1a>
 80015fc:	682b      	ldr	r3, [r5, #0]
 80015fe:	b103      	cbz	r3, 8001602 <_isatty_r+0x1a>
 8001600:	6023      	str	r3, [r4, #0]
 8001602:	bd38      	pop	{r3, r4, r5, pc}
 8001604:	20000090 	.word	0x20000090

08001608 <_init>:
 8001608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800160a:	bf00      	nop
 800160c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800160e:	bc08      	pop	{r3}
 8001610:	469e      	mov	lr, r3
 8001612:	4770      	bx	lr

08001614 <_fini>:
 8001614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001616:	bf00      	nop
 8001618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800161a:	bc08      	pop	{r3}
 800161c:	469e      	mov	lr, r3
 800161e:	4770      	bx	lr
