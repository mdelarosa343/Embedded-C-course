
8_UART_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000490  08000498  00010498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000490  08000490  00010498  2**0
                  CONTENTS
  4 .ARM          00000000  08000490  08000490  00010498  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000490  08000498  00010498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000490  08000490  00010490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000494  08000494  00010494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000498  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000498  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010498  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008a5  00000000  00000000  000104c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000262  00000000  00000000  00010d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00010fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00011068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c6ae  00000000  00000000  000110d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ea9  00000000  00000000  0002d786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ea84  00000000  00000000  0002e62f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd0b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000158  00000000  00000000  000cd104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000478 	.word	0x08000478

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	08000478 	.word	0x08000478

08000208 <uart3_tx_rx_init>:
	uart3_write(ch);
	return ch;
}

void uart3_tx_rx_init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	/******************Configure USART GPIO Pins******************/

	/*Enable GPIOD clock (Pins for USART are on GPIOD)*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800020c:	4b26      	ldr	r3, [pc, #152]	; (80002a8 <uart3_tx_rx_init+0xa0>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000210:	4a25      	ldr	r2, [pc, #148]	; (80002a8 <uart3_tx_rx_init+0xa0>)
 8000212:	f043 0308 	orr.w	r3, r3, #8
 8000216:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PD8 to alternate function mode*/
	GPIOD->MODER &=~ GPIO_MODER_MODER8_0;
 8000218:	4b24      	ldr	r3, [pc, #144]	; (80002ac <uart3_tx_rx_init+0xa4>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a23      	ldr	r2, [pc, #140]	; (80002ac <uart3_tx_rx_init+0xa4>)
 800021e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000222:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODER8_1;
 8000224:	4b21      	ldr	r3, [pc, #132]	; (80002ac <uart3_tx_rx_init+0xa4>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a20      	ldr	r2, [pc, #128]	; (80002ac <uart3_tx_rx_init+0xa4>)
 800022a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800022e:	6013      	str	r3, [r2, #0]
	/*Set PD8 alternate function mode to UART_TX*/
	GPIOD->AFR[1] |= (GPIO_AFRH_AFRH0_0 | GPIO_AFRH_AFRH0_1 | GPIO_AFRH_AFRH0_2) ;
 8000230:	4b1e      	ldr	r3, [pc, #120]	; (80002ac <uart3_tx_rx_init+0xa4>)
 8000232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000234:	4a1d      	ldr	r2, [pc, #116]	; (80002ac <uart3_tx_rx_init+0xa4>)
 8000236:	f043 0307 	orr.w	r3, r3, #7
 800023a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &=~ GPIO_AFRH_AFRH0_3;
 800023c:	4b1b      	ldr	r3, [pc, #108]	; (80002ac <uart3_tx_rx_init+0xa4>)
 800023e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000240:	4a1a      	ldr	r2, [pc, #104]	; (80002ac <uart3_tx_rx_init+0xa4>)
 8000242:	f023 0308 	bic.w	r3, r3, #8
 8000246:	6253      	str	r3, [r2, #36]	; 0x24

	/*Set PD9 to alternate function mode*/
	GPIOD->MODER &=~ GPIO_MODER_MODER9_0;
 8000248:	4b18      	ldr	r3, [pc, #96]	; (80002ac <uart3_tx_rx_init+0xa4>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a17      	ldr	r2, [pc, #92]	; (80002ac <uart3_tx_rx_init+0xa4>)
 800024e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000252:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODER9_1;
 8000254:	4b15      	ldr	r3, [pc, #84]	; (80002ac <uart3_tx_rx_init+0xa4>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a14      	ldr	r2, [pc, #80]	; (80002ac <uart3_tx_rx_init+0xa4>)
 800025a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800025e:	6013      	str	r3, [r2, #0]
	/*Set PD9 alternate function mode to UART_TX*/
	GPIOD->AFR[1] |= (GPIO_AFRH_AFRH1_0 | GPIO_AFRH_AFRH1_1 | GPIO_AFRH_AFRH1_2) ;
 8000260:	4b12      	ldr	r3, [pc, #72]	; (80002ac <uart3_tx_rx_init+0xa4>)
 8000262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000264:	4a11      	ldr	r2, [pc, #68]	; (80002ac <uart3_tx_rx_init+0xa4>)
 8000266:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800026a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &=~ GPIO_AFRH_AFRH1_3;
 800026c:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <uart3_tx_rx_init+0xa4>)
 800026e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000270:	4a0e      	ldr	r2, [pc, #56]	; (80002ac <uart3_tx_rx_init+0xa4>)
 8000272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000276:	6253      	str	r3, [r2, #36]	; 0x24


	/******************Configure USART module******************/

	/*Enable USART2 clock*/
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 8000278:	4b0b      	ldr	r3, [pc, #44]	; (80002a8 <uart3_tx_rx_init+0xa0>)
 800027a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800027c:	4a0a      	ldr	r2, [pc, #40]	; (80002a8 <uart3_tx_rx_init+0xa0>)
 800027e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000282:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure Baudrate*/
	uart_set_baudrate(USART3, APB1_CLK, UART_BAUDRATE);
 8000284:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000288:	4909      	ldr	r1, [pc, #36]	; (80002b0 <uart3_tx_rx_init+0xa8>)
 800028a:	480a      	ldr	r0, [pc, #40]	; (80002b4 <uart3_tx_rx_init+0xac>)
 800028c:	f000 f828 	bl	80002e0 <uart_set_baudrate>

	/*Enable Transmit and Receive and set UART defaults*/
	USART3->CR1 = (USART_CR1_TE | USART_CR1_RE);
 8000290:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <uart3_tx_rx_init+0xac>)
 8000292:	220c      	movs	r2, #12
 8000294:	601a      	str	r2, [r3, #0]

	/*Enable UART Module*/
	USART3->CR1 |= USART_CR1_UE;
 8000296:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <uart3_tx_rx_init+0xac>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <uart3_tx_rx_init+0xac>)
 800029c:	f043 0301 	orr.w	r3, r3, #1
 80002a0:	6013      	str	r3, [r2, #0]
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40023800 	.word	0x40023800
 80002ac:	40020c00 	.word	0x40020c00
 80002b0:	00f42400 	.word	0x00f42400
 80002b4:	40004800 	.word	0x40004800

080002b8 <uart3_read>:
	/*Enable UART Module*/
	USART3->CR1 |= USART_CR1_UE;
}

char uart3_read(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
	/*Make sure RX data register is not empty*/
	while(!(USART3->ISR & USART_ISR_RXNE)){}
 80002bc:	bf00      	nop
 80002be:	4b07      	ldr	r3, [pc, #28]	; (80002dc <uart3_read+0x24>)
 80002c0:	69db      	ldr	r3, [r3, #28]
 80002c2:	f003 0320 	and.w	r3, r3, #32
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d0f9      	beq.n	80002be <uart3_read+0x6>

	/*Read RX data register*/
	return USART3->RDR;
 80002ca:	4b04      	ldr	r3, [pc, #16]	; (80002dc <uart3_read+0x24>)
 80002cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ce:	b2db      	uxtb	r3, r3
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40004800 	.word	0x40004800

080002e0 <uart_set_baudrate>:
	/*Write to TX data register*/
	USART3->TDR = (ch & 0xFF);
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	60f8      	str	r0, [r7, #12]
 80002e8:	60b9      	str	r1, [r7, #8]
 80002ea:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 80002ec:	6879      	ldr	r1, [r7, #4]
 80002ee:	68b8      	ldr	r0, [r7, #8]
 80002f0:	f000 f808 	bl	8000304 <compute_uart_bd>
 80002f4:	4603      	mov	r3, r0
 80002f6:	461a      	mov	r2, r3
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	60da      	str	r2, [r3, #12]
}
 80002fc:	bf00      	nop
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	085a      	lsrs	r2, r3, #1
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	441a      	add	r2, r3
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	fbb2 f3f3 	udiv	r3, r2, r3
 800031c:	b29b      	uxth	r3, r3
}
 800031e:	4618      	mov	r0, r3
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
	...

0800032c <main>:
#define BTN_Pin			(1U<<13)



int main(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	/*setup*/

	/*Enable clock to GPIOB and GPIOC*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;
 8000330:	4b25      	ldr	r3, [pc, #148]	; (80003c8 <main+0x9c>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4a24      	ldr	r2, [pc, #144]	; (80003c8 <main+0x9c>)
 8000336:	f043 0306 	orr.w	r3, r3, #6
 800033a:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PB0 as output pin*/
	GPIOB->MODER |= GPIO_MODER_MODER0_0;
 800033c:	4b23      	ldr	r3, [pc, #140]	; (80003cc <main+0xa0>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a22      	ldr	r2, [pc, #136]	; (80003cc <main+0xa0>)
 8000342:	f043 0301 	orr.w	r3, r3, #1
 8000346:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &=~ GPIO_MODER_MODER0_1;
 8000348:	4b20      	ldr	r3, [pc, #128]	; (80003cc <main+0xa0>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a1f      	ldr	r2, [pc, #124]	; (80003cc <main+0xa0>)
 800034e:	f023 0302 	bic.w	r3, r3, #2
 8000352:	6013      	str	r3, [r2, #0]

	/*Set PB7 as output pin*/
	GPIOB->MODER |= GPIO_MODER_MODER7_0;
 8000354:	4b1d      	ldr	r3, [pc, #116]	; (80003cc <main+0xa0>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a1c      	ldr	r2, [pc, #112]	; (80003cc <main+0xa0>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &=~ GPIO_MODER_MODER7_1;
 8000360:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <main+0xa0>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a19      	ldr	r2, [pc, #100]	; (80003cc <main+0xa0>)
 8000366:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800036a:	6013      	str	r3, [r2, #0]

	/*Set PB14 as output pin*/
	GPIOB->MODER |= GPIO_MODER_MODER14_0;
 800036c:	4b17      	ldr	r3, [pc, #92]	; (80003cc <main+0xa0>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a16      	ldr	r2, [pc, #88]	; (80003cc <main+0xa0>)
 8000372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000376:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &=~ GPIO_MODER_MODER14_1;
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <main+0xa0>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a13      	ldr	r2, [pc, #76]	; (80003cc <main+0xa0>)
 800037e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000382:	6013      	str	r3, [r2, #0]

	/*Set PC13 as input pin*/
	GPIOC->MODER &=~ GPIO_MODER_MODER13_0;
 8000384:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <main+0xa4>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a11      	ldr	r2, [pc, #68]	; (80003d0 <main+0xa4>)
 800038a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800038e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~ GPIO_MODER_MODER13_1;
 8000390:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <main+0xa4>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a0e      	ldr	r2, [pc, #56]	; (80003d0 <main+0xa4>)
 8000396:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800039a:	6013      	str	r3, [r2, #0]

	/*Initialize UART TX/RX*/
	uart3_tx_rx_init();
 800039c:	f7ff ff34 	bl	8000208 <uart3_tx_rx_init>


	/*run loop*/
	while(1)
	{
		key = uart3_read();
 80003a0:	f7ff ff8a 	bl	80002b8 <uart3_read>
 80003a4:	4603      	mov	r3, r0
 80003a6:	461a      	mov	r2, r3
 80003a8:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <main+0xa8>)
 80003aa:	701a      	strb	r2, [r3, #0]
		if(key == '1')
 80003ac:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <main+0xa8>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b31      	cmp	r3, #49	; 0x31
 80003b2:	d104      	bne.n	80003be <main+0x92>
		{
			GPIOB->BSRR = R_LED_PIN | G_LED_PIN | B_LED_PIN;
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <main+0xa0>)
 80003b6:	f244 0281 	movw	r2, #16513	; 0x4081
 80003ba:	619a      	str	r2, [r3, #24]
 80003bc:	e7f0      	b.n	80003a0 <main+0x74>
		}
		else
		{
			GPIOB->BSRR = R_LED_PIN<<16 | G_LED_PIN<<16 | B_LED_PIN<<16;
 80003be:	4b03      	ldr	r3, [pc, #12]	; (80003cc <main+0xa0>)
 80003c0:	4a05      	ldr	r2, [pc, #20]	; (80003d8 <main+0xac>)
 80003c2:	619a      	str	r2, [r3, #24]
		key = uart3_read();
 80003c4:	e7ec      	b.n	80003a0 <main+0x74>
 80003c6:	bf00      	nop
 80003c8:	40023800 	.word	0x40023800
 80003cc:	40020400 	.word	0x40020400
 80003d0:	40020800 	.word	0x40020800
 80003d4:	2000001c 	.word	0x2000001c
 80003d8:	40810000 	.word	0x40810000

080003dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003dc:	480d      	ldr	r0, [pc, #52]	; (8000414 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e4:	480c      	ldr	r0, [pc, #48]	; (8000418 <LoopForever+0x6>)
  ldr r1, =_edata
 80003e6:	490d      	ldr	r1, [pc, #52]	; (800041c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003e8:	4a0d      	ldr	r2, [pc, #52]	; (8000420 <LoopForever+0xe>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ec:	e002      	b.n	80003f4 <LoopCopyDataInit>

080003ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f2:	3304      	adds	r3, #4

080003f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f8:	d3f9      	bcc.n	80003ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fa:	4a0a      	ldr	r2, [pc, #40]	; (8000424 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003fc:	4c0a      	ldr	r4, [pc, #40]	; (8000428 <LoopForever+0x16>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000400:	e001      	b.n	8000406 <LoopFillZerobss>

08000402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000404:	3204      	adds	r2, #4

08000406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000408:	d3fb      	bcc.n	8000402 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800040a:	f000 f811 	bl	8000430 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800040e:	f7ff ff8d 	bl	800032c <main>

08000412 <LoopForever>:

LoopForever:
  b LoopForever
 8000412:	e7fe      	b.n	8000412 <LoopForever>
  ldr   r0, =_estack
 8000414:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800041c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000420:	08000498 	.word	0x08000498
  ldr r2, =_sbss
 8000424:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000428:	20000020 	.word	0x20000020

0800042c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800042c:	e7fe      	b.n	800042c <ADC_IRQHandler>
	...

08000430 <__libc_init_array>:
 8000430:	b570      	push	{r4, r5, r6, lr}
 8000432:	4d0d      	ldr	r5, [pc, #52]	; (8000468 <__libc_init_array+0x38>)
 8000434:	4c0d      	ldr	r4, [pc, #52]	; (800046c <__libc_init_array+0x3c>)
 8000436:	1b64      	subs	r4, r4, r5
 8000438:	10a4      	asrs	r4, r4, #2
 800043a:	2600      	movs	r6, #0
 800043c:	42a6      	cmp	r6, r4
 800043e:	d109      	bne.n	8000454 <__libc_init_array+0x24>
 8000440:	4d0b      	ldr	r5, [pc, #44]	; (8000470 <__libc_init_array+0x40>)
 8000442:	4c0c      	ldr	r4, [pc, #48]	; (8000474 <__libc_init_array+0x44>)
 8000444:	f000 f818 	bl	8000478 <_init>
 8000448:	1b64      	subs	r4, r4, r5
 800044a:	10a4      	asrs	r4, r4, #2
 800044c:	2600      	movs	r6, #0
 800044e:	42a6      	cmp	r6, r4
 8000450:	d105      	bne.n	800045e <__libc_init_array+0x2e>
 8000452:	bd70      	pop	{r4, r5, r6, pc}
 8000454:	f855 3b04 	ldr.w	r3, [r5], #4
 8000458:	4798      	blx	r3
 800045a:	3601      	adds	r6, #1
 800045c:	e7ee      	b.n	800043c <__libc_init_array+0xc>
 800045e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000462:	4798      	blx	r3
 8000464:	3601      	adds	r6, #1
 8000466:	e7f2      	b.n	800044e <__libc_init_array+0x1e>
 8000468:	08000490 	.word	0x08000490
 800046c:	08000490 	.word	0x08000490
 8000470:	08000490 	.word	0x08000490
 8000474:	08000494 	.word	0x08000494

08000478 <_init>:
 8000478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047a:	bf00      	nop
 800047c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047e:	bc08      	pop	{r3}
 8000480:	469e      	mov	lr, r3
 8000482:	4770      	bx	lr

08000484 <_fini>:
 8000484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000486:	bf00      	nop
 8000488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048a:	bc08      	pop	{r3}
 800048c:	469e      	mov	lr, r3
 800048e:	4770      	bx	lr
