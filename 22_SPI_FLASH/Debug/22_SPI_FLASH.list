
22_SPI_FLASH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08001898  08001898  00011898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001980  08001980  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001980  08001980  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001980  08001980  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001980  08001980  00011980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001984  08001984  00011984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  080019ec  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080019ec  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001acb  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000784  00000000  00000000  00021b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  000222e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000188  00000000  00000000  000224d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d74a  00000000  00000000  00022660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000280f  00000000  00000000  0003fdaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a094d  00000000  00000000  000425b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2f06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dfc  00000000  00000000  000e2f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001880 	.word	0x08001880

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08001880 	.word	0x08001880

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <FLASH_busy>:
#include "FLASH.h"
#include "SPI.h"


uint8_t FLASH_busy(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
	uint8_t receive;

	//Create command sequence (READ_SR_1 code)
	uint8_t command = READ_SR_1;
 80002b6:	2305      	movs	r3, #5
 80002b8:	71bb      	strb	r3, [r7, #6]

	//enable cs
	cs_enable();
 80002ba:	f000 f963 	bl	8000584 <cs_enable>

	//send command
	SPI1_transmit(&command, 1);
 80002be:	1dbb      	adds	r3, r7, #6
 80002c0:	2101      	movs	r1, #1
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 f8ee 	bl	80004a4 <SPI1_transmit>

	//receive data into receive pointer
	SPI1_receive(&receive, 1);
 80002c8:	1dfb      	adds	r3, r7, #7
 80002ca:	2101      	movs	r1, #1
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 f91f 	bl	8000510 <SPI1_receive>

	//disable cs
	cs_disable();
 80002d2:	f000 f965 	bl	80005a0 <cs_disable>

	//return BUSY bit of SR_1
	return (receive & 1u);
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	f003 0301 	and.w	r3, r3, #1
 80002dc:	b2db      	uxtb	r3, r3
}
 80002de:	4618      	mov	r0, r3
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}

080002e6 <FLASH_READ>:

uint8_t FLASH_READ(uint32_t address)
{
 80002e6:	b580      	push	{r7, lr}
 80002e8:	b084      	sub	sp, #16
 80002ea:	af00      	add	r7, sp, #0
 80002ec:	6078      	str	r0, [r7, #4]
	uint8_t receive;

	//Create command sequence (read_data command, then 24 bit address)
	uint8_t command[4] =
 80002ee:	2303      	movs	r3, #3
 80002f0:	723b      	strb	r3, [r7, #8]
	{
		(uint8_t)READ_DATA,
		(uint8_t)((address & 0x00FF0000)>>16),
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	0c1b      	lsrs	r3, r3, #16
 80002f6:	b2db      	uxtb	r3, r3
	uint8_t command[4] =
 80002f8:	727b      	strb	r3, [r7, #9]
		(uint8_t)((address & 0x0000FF00)>>8),
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	0a1b      	lsrs	r3, r3, #8
 80002fe:	b2db      	uxtb	r3, r3
	uint8_t command[4] =
 8000300:	72bb      	strb	r3, [r7, #10]
		(uint8_t)(address & 0x000000FF)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	b2db      	uxtb	r3, r3
	uint8_t command[4] =
 8000306:	72fb      	strb	r3, [r7, #11]
	};
	//enable cs
	cs_enable();
 8000308:	f000 f93c 	bl	8000584 <cs_enable>

	//send read command
	SPI1_transmit(command, 4);
 800030c:	f107 0308 	add.w	r3, r7, #8
 8000310:	2104      	movs	r1, #4
 8000312:	4618      	mov	r0, r3
 8000314:	f000 f8c6 	bl	80004a4 <SPI1_transmit>

	//receive data into receive pointer
	SPI1_receive(&receive, 1);
 8000318:	f107 030f 	add.w	r3, r7, #15
 800031c:	2101      	movs	r1, #1
 800031e:	4618      	mov	r0, r3
 8000320:	f000 f8f6 	bl	8000510 <SPI1_receive>

	//disable cs
	cs_disable();
 8000324:	f000 f93c 	bl	80005a0 <cs_disable>

	//wait for Flash not busy
	while(FLASH_busy()){}
 8000328:	bf00      	nop
 800032a:	f7ff ffc1 	bl	80002b0 <FLASH_busy>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d1fa      	bne.n	800032a <FLASH_READ+0x44>

	//return result
	return receive;
 8000334:	7bfb      	ldrb	r3, [r7, #15]
}
 8000336:	4618      	mov	r0, r3
 8000338:	3710      	adds	r7, #16
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}

0800033e <FLASH_WRITE>:

void FLASH_WRITE(uint32_t address, uint8_t value)
{
 800033e:	b580      	push	{r7, lr}
 8000340:	b084      	sub	sp, #16
 8000342:	af00      	add	r7, sp, #0
 8000344:	6078      	str	r0, [r7, #4]
 8000346:	460b      	mov	r3, r1
 8000348:	70fb      	strb	r3, [r7, #3]
	//send write enable command before writing
	uint8_t W_E = WRITE_ENABLE;
 800034a:	2306      	movs	r3, #6
 800034c:	73fb      	strb	r3, [r7, #15]
	//enable cs
	cs_enable();
 800034e:	f000 f919 	bl	8000584 <cs_enable>
	//send read command
	SPI1_transmit(&W_E, 1);
 8000352:	f107 030f 	add.w	r3, r7, #15
 8000356:	2101      	movs	r1, #1
 8000358:	4618      	mov	r0, r3
 800035a:	f000 f8a3 	bl	80004a4 <SPI1_transmit>
	//disable cs
	cs_disable();
 800035e:	f000 f91f 	bl	80005a0 <cs_disable>

	//wait for Flash not busy
	while(FLASH_busy()){}
 8000362:	bf00      	nop
 8000364:	f7ff ffa4 	bl	80002b0 <FLASH_busy>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d1fa      	bne.n	8000364 <FLASH_WRITE+0x26>

	//Create write command sequence (PAGE_PROGRAM command, then 24 bit address, then 8 bit write value)
	uint8_t command[5] =
 800036e:	2302      	movs	r3, #2
 8000370:	723b      	strb	r3, [r7, #8]
	{
		(uint8_t)PAGE_PROGRAM,
		(uint8_t)((address & 0x00FF0000)>>16),
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	0c1b      	lsrs	r3, r3, #16
 8000376:	b2db      	uxtb	r3, r3
	uint8_t command[5] =
 8000378:	727b      	strb	r3, [r7, #9]
		(uint8_t)((address & 0x0000FF00)>>8),
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	0a1b      	lsrs	r3, r3, #8
 800037e:	b2db      	uxtb	r3, r3
	uint8_t command[5] =
 8000380:	72bb      	strb	r3, [r7, #10]
		(uint8_t)(address & 0x000000FF),
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	b2db      	uxtb	r3, r3
	uint8_t command[5] =
 8000386:	72fb      	strb	r3, [r7, #11]
 8000388:	78fb      	ldrb	r3, [r7, #3]
 800038a:	733b      	strb	r3, [r7, #12]
		value
	};
	//enable cs
	cs_enable();
 800038c:	f000 f8fa 	bl	8000584 <cs_enable>

	//send write command
	SPI1_transmit(command, 5);
 8000390:	f107 0308 	add.w	r3, r7, #8
 8000394:	2105      	movs	r1, #5
 8000396:	4618      	mov	r0, r3
 8000398:	f000 f884 	bl	80004a4 <SPI1_transmit>

	//disable cs
	cs_disable();
 800039c:	f000 f900 	bl	80005a0 <cs_disable>

	//wait for Flash not busy
	while(FLASH_busy()){}
 80003a0:	bf00      	nop
 80003a2:	f7ff ff85 	bl	80002b0 <FLASH_busy>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d1fa      	bne.n	80003a2 <FLASH_WRITE+0x64>
}
 80003ac:	bf00      	nop
 80003ae:	bf00      	nop
 80003b0:	3710      	adds	r7, #16
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <SPI1_gpio_init>:
#include <stdint.h>
#include "stm32f746xx.h"
#include "SPI.h"

void SPI1_gpio_init(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
	//Enable clock access to GPIO of pins (PA5, PA6, PA7, PD15)
	RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIODEN);
 80003bc:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <SPI1_gpio_init+0x40>)
 80003be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c0:	4a0d      	ldr	r2, [pc, #52]	; (80003f8 <SPI1_gpio_init+0x40>)
 80003c2:	f043 0309 	orr.w	r3, r3, #9
 80003c6:	6313      	str	r3, [r2, #48]	; 0x30
	 * 		PA7  ---- MOSI
	 * 		PD15 ---- CS
	 */

	//set PA 5,6, and 7 to alternate function mode
	GPIOA->MODER |= (0b10 << GPIO_MODER_MODER5_Pos | 0b10 << GPIO_MODER_MODER6_Pos | 0b10 << GPIO_MODER_MODER7_Pos);
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <SPI1_gpio_init+0x44>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <SPI1_gpio_init+0x44>)
 80003ce:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 80003d2:	6013      	str	r3, [r2, #0]

	//set PD15 as output pin
	GPIOD->MODER |= (0b01 << GPIO_MODER_MODER15_Pos) ;
 80003d4:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <SPI1_gpio_init+0x48>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a09      	ldr	r2, [pc, #36]	; (8000400 <SPI1_gpio_init+0x48>)
 80003da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80003de:	6013      	str	r3, [r2, #0]

	//set PA 5,6, and 7 to alternate function 5
	GPIOA->AFR[0] |= (5u << GPIO_AFRL_AFRL5_Pos | 5u << GPIO_AFRL_AFRL6_Pos | 5u << GPIO_AFRL_AFRL7_Pos);
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <SPI1_gpio_init+0x44>)
 80003e2:	6a1a      	ldr	r2, [r3, #32]
 80003e4:	4905      	ldr	r1, [pc, #20]	; (80003fc <SPI1_gpio_init+0x44>)
 80003e6:	4b07      	ldr	r3, [pc, #28]	; (8000404 <SPI1_gpio_init+0x4c>)
 80003e8:	4313      	orrs	r3, r2
 80003ea:	620b      	str	r3, [r1, #32]
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	40023800 	.word	0x40023800
 80003fc:	40020000 	.word	0x40020000
 8000400:	40020c00 	.word	0x40020c00
 8000404:	55500000 	.word	0x55500000

08000408 <SPI1_config>:

void SPI1_config(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
	//Enable clock access to SPI module
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800040c:	4b23      	ldr	r3, [pc, #140]	; (800049c <SPI1_config+0x94>)
 800040e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000410:	4a22      	ldr	r2, [pc, #136]	; (800049c <SPI1_config+0x94>)
 8000412:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000416:	6453      	str	r3, [r2, #68]	; 0x44

	//Set SPI Baudrate to 4MHz (16MHz/4)
	SPI1->CR1 |= (4u << SPI_CR1_BR_Pos);
 8000418:	4b21      	ldr	r3, [pc, #132]	; (80004a0 <SPI1_config+0x98>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a20      	ldr	r2, [pc, #128]	; (80004a0 <SPI1_config+0x98>)
 800041e:	f043 0320 	orr.w	r3, r3, #32
 8000422:	6013      	str	r3, [r2, #0]

	//Configure CPOL and CPHA (mode 0)
	SPI1->CR1 &=~ (SPI_CR1_CPOL | SPI_CR1_CPOL);
 8000424:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <SPI1_config+0x98>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a1d      	ldr	r2, [pc, #116]	; (80004a0 <SPI1_config+0x98>)
 800042a:	f023 0302 	bic.w	r3, r3, #2
 800042e:	6013      	str	r3, [r2, #0]

	//Enable Full Duplex
	SPI1->CR1 &=~ SPI_CR1_RXONLY;
 8000430:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <SPI1_config+0x98>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a1a      	ldr	r2, [pc, #104]	; (80004a0 <SPI1_config+0x98>)
 8000436:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800043a:	6013      	str	r3, [r2, #0]

	//Set MSB first
	SPI1->CR1 &=~ SPI_CR1_LSBFIRST;
 800043c:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <SPI1_config+0x98>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a17      	ldr	r2, [pc, #92]	; (80004a0 <SPI1_config+0x98>)
 8000442:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000446:	6013      	str	r3, [r2, #0]

	//Set to Master mode
	SPI1->CR1 |= SPI_CR1_MSTR;
 8000448:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <SPI1_config+0x98>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a14      	ldr	r2, [pc, #80]	; (80004a0 <SPI1_config+0x98>)
 800044e:	f043 0304 	orr.w	r3, r3, #4
 8000452:	6013      	str	r3, [r2, #0]

	//Disable CRC
	SPI1->CR1 &=~ SPI_CR1_CRCEN;
 8000454:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <SPI1_config+0x98>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a11      	ldr	r2, [pc, #68]	; (80004a0 <SPI1_config+0x98>)
 800045a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800045e:	6013      	str	r3, [r2, #0]

	//Set mode to Software Slave Management (SSM) and set NSS pin high
	SPI1->CR1 |= (SPI_CR1_SSM | SPI_CR1_SSI);
 8000460:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <SPI1_config+0x98>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a0e      	ldr	r2, [pc, #56]	; (80004a0 <SPI1_config+0x98>)
 8000466:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800046a:	6013      	str	r3, [r2, #0]

	//configure transfer size to 8 bits
	SPI1->CR2 |= (0b0111 << SPI_CR2_DS_Pos);
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <SPI1_config+0x98>)
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	4a0b      	ldr	r2, [pc, #44]	; (80004a0 <SPI1_config+0x98>)
 8000472:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000476:	6053      	str	r3, [r2, #4]

	//configure reception threshold to 8 bits
	SPI1->CR2 |= SPI_CR2_FRXTH;
 8000478:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <SPI1_config+0x98>)
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	4a08      	ldr	r2, [pc, #32]	; (80004a0 <SPI1_config+0x98>)
 800047e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000482:	6053      	str	r3, [r2, #4]

	//Enable SPI module
	SPI1->CR1 |= SPI_CR1_SPE;
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <SPI1_config+0x98>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a05      	ldr	r2, [pc, #20]	; (80004a0 <SPI1_config+0x98>)
 800048a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800048e:	6013      	str	r3, [r2, #0]
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40023800 	.word	0x40023800
 80004a0:	40013000 	.word	0x40013000

080004a4 <SPI1_transmit>:

void SPI1_transmit(uint8_t* data, uint32_t size)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < size; i++)
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	e00f      	b.n	80004d4 <SPI1_transmit+0x30>
	{
		//Wait for TXE to be set (transmit buffer empty)
		while(!(SPI1->SR & SPI_SR_TXE)){}
 80004b4:	bf00      	nop
 80004b6:	4b14      	ldr	r3, [pc, #80]	; (8000508 <SPI1_transmit+0x64>)
 80004b8:	689b      	ldr	r3, [r3, #8]
 80004ba:	f003 0302 	and.w	r3, r3, #2
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d0f9      	beq.n	80004b6 <SPI1_transmit+0x12>

		//Write data to the data register
		*(__IO uint8_t *)&SPI1->DR = data[i];
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	4413      	add	r3, r2
 80004c8:	4a10      	ldr	r2, [pc, #64]	; (800050c <SPI1_transmit+0x68>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	7013      	strb	r3, [r2, #0]
	for(uint32_t i = 0; i < size; i++)
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	3301      	adds	r3, #1
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fa      	ldr	r2, [r7, #12]
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	429a      	cmp	r2, r3
 80004da:	d3eb      	bcc.n	80004b4 <SPI1_transmit+0x10>
	}

	//Wait until TXE is set
	while(!(SPI1->SR & SPI_SR_TXE)){}
 80004dc:	bf00      	nop
 80004de:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <SPI1_transmit+0x64>)
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	f003 0302 	and.w	r3, r3, #2
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d0f9      	beq.n	80004de <SPI1_transmit+0x3a>
	//Wait for SPI not busy
	while(SPI1->SR & SPI_SR_BSY){}
 80004ea:	bf00      	nop
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <SPI1_transmit+0x64>)
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d1f9      	bne.n	80004ec <SPI1_transmit+0x48>
}
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40013000 	.word	0x40013000
 800050c:	4001300c 	.word	0x4001300c

08000510 <SPI1_receive>:

void SPI1_receive(uint8_t* data, uint32_t size)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < size; i++)
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	e013      	b.n	8000548 <SPI1_receive+0x38>
	{
		//send dummy data
		*(__IO uint8_t *)&SPI1->DR = 0;
 8000520:	4b16      	ldr	r3, [pc, #88]	; (800057c <SPI1_receive+0x6c>)
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]

		//Wait for RXNE flag
		while(!(SPI1->SR & SPI_SR_RXNE)){}
 8000526:	bf00      	nop
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <SPI1_receive+0x70>)
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	f003 0301 	and.w	r3, r3, #1
 8000530:	2b00      	cmp	r3, #0
 8000532:	d0f9      	beq.n	8000528 <SPI1_receive+0x18>

		//read data from data register and increment data pointer
		*data++ = (SPI1->DR);
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <SPI1_receive+0x70>)
 8000536:	68d9      	ldr	r1, [r3, #12]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	1c5a      	adds	r2, r3, #1
 800053c:	607a      	str	r2, [r7, #4]
 800053e:	b2ca      	uxtb	r2, r1
 8000540:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < size; i++)
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	3301      	adds	r3, #1
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fa      	ldr	r2, [r7, #12]
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	429a      	cmp	r2, r3
 800054e:	d3e7      	bcc.n	8000520 <SPI1_receive+0x10>
	}

	//Wait until TXE is set
	while(!(SPI1->SR & SPI_SR_TXE)){}
 8000550:	bf00      	nop
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <SPI1_receive+0x70>)
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	2b00      	cmp	r3, #0
 800055c:	d0f9      	beq.n	8000552 <SPI1_receive+0x42>
	//Wait for SPI not busy
	while(SPI1->SR & SPI_SR_BSY){}
 800055e:	bf00      	nop
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <SPI1_receive+0x70>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000568:	2b00      	cmp	r3, #0
 800056a:	d1f9      	bne.n	8000560 <SPI1_receive+0x50>
}
 800056c:	bf00      	nop
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	4001300c 	.word	0x4001300c
 8000580:	40013000 	.word	0x40013000

08000584 <cs_enable>:

void cs_enable(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	//Set PD15 low
	GPIOD->BSRR = (1u << GPIO_BSRR_BR15_Pos);
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <cs_enable+0x18>)
 800058a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800058e:	619a      	str	r2, [r3, #24]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40020c00 	.word	0x40020c00

080005a0 <cs_disable>:

void cs_disable(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	//Set PD15 high
	GPIOD->BSRR = (1u << GPIO_BSRR_BS15_Pos);
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <cs_disable+0x18>)
 80005a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005aa:	619a      	str	r2, [r3, #24]
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40020c00 	.word	0x40020c00

080005bc <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart3_tx_init(void);
void uart3_write(int ch);

int __io_putchar(int ch)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	uart3_write(ch);
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f000 f85d 	bl	8000684 <uart3_write>
	return ch;
 80005ca:	687b      	ldr	r3, [r7, #4]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <uart3_tx_rx_init>:
}



void uart3_tx_rx_init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	/******************Configure USART GPIO Pins******************/

	/*Enable GPIOD clock (Pins for USART are on GPIOD)*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80005d8:	4b26      	ldr	r3, [pc, #152]	; (8000674 <uart3_tx_rx_init+0xa0>)
 80005da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005dc:	4a25      	ldr	r2, [pc, #148]	; (8000674 <uart3_tx_rx_init+0xa0>)
 80005de:	f043 0308 	orr.w	r3, r3, #8
 80005e2:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PD8 to alternate function mode*/
	GPIOD->MODER &=~ GPIO_MODER_MODER8_0;
 80005e4:	4b24      	ldr	r3, [pc, #144]	; (8000678 <uart3_tx_rx_init+0xa4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a23      	ldr	r2, [pc, #140]	; (8000678 <uart3_tx_rx_init+0xa4>)
 80005ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005ee:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODER8_1;
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <uart3_tx_rx_init+0xa4>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a20      	ldr	r2, [pc, #128]	; (8000678 <uart3_tx_rx_init+0xa4>)
 80005f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fa:	6013      	str	r3, [r2, #0]
	/*Set PD8 alternate function mode to UART_TX*/
	GPIOD->AFR[1] |= (GPIO_AFRH_AFRH0_0 | GPIO_AFRH_AFRH0_1 | GPIO_AFRH_AFRH0_2) ;
 80005fc:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <uart3_tx_rx_init+0xa4>)
 80005fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000600:	4a1d      	ldr	r2, [pc, #116]	; (8000678 <uart3_tx_rx_init+0xa4>)
 8000602:	f043 0307 	orr.w	r3, r3, #7
 8000606:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &=~ GPIO_AFRH_AFRH0_3;
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <uart3_tx_rx_init+0xa4>)
 800060a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800060c:	4a1a      	ldr	r2, [pc, #104]	; (8000678 <uart3_tx_rx_init+0xa4>)
 800060e:	f023 0308 	bic.w	r3, r3, #8
 8000612:	6253      	str	r3, [r2, #36]	; 0x24

	/*Set PD9 to alternate function mode*/
	GPIOD->MODER &=~ GPIO_MODER_MODER9_0;
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <uart3_tx_rx_init+0xa4>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a17      	ldr	r2, [pc, #92]	; (8000678 <uart3_tx_rx_init+0xa4>)
 800061a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800061e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODER9_1;
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <uart3_tx_rx_init+0xa4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a14      	ldr	r2, [pc, #80]	; (8000678 <uart3_tx_rx_init+0xa4>)
 8000626:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800062a:	6013      	str	r3, [r2, #0]
	/*Set PD9 alternate function mode to UART_TX*/
	GPIOD->AFR[1] |= (GPIO_AFRH_AFRH1_0 | GPIO_AFRH_AFRH1_1 | GPIO_AFRH_AFRH1_2) ;
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <uart3_tx_rx_init+0xa4>)
 800062e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000630:	4a11      	ldr	r2, [pc, #68]	; (8000678 <uart3_tx_rx_init+0xa4>)
 8000632:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000636:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &=~ GPIO_AFRH_AFRH1_3;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <uart3_tx_rx_init+0xa4>)
 800063a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800063c:	4a0e      	ldr	r2, [pc, #56]	; (8000678 <uart3_tx_rx_init+0xa4>)
 800063e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000642:	6253      	str	r3, [r2, #36]	; 0x24


	/******************Configure USART module******************/

	/*Enable USART2 clock*/
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <uart3_tx_rx_init+0xa0>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <uart3_tx_rx_init+0xa0>)
 800064a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure Baudrate*/
	uart_set_baudrate(USART3, APB1_CLK, UART_BAUDRATE);
 8000650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000654:	4909      	ldr	r1, [pc, #36]	; (800067c <uart3_tx_rx_init+0xa8>)
 8000656:	480a      	ldr	r0, [pc, #40]	; (8000680 <uart3_tx_rx_init+0xac>)
 8000658:	f000 f82c 	bl	80006b4 <uart_set_baudrate>

	/*Enable Transmit and Receive and set UART defaults*/
	USART3->CR1 = (USART_CR1_TE | USART_CR1_RE);
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <uart3_tx_rx_init+0xac>)
 800065e:	220c      	movs	r2, #12
 8000660:	601a      	str	r2, [r3, #0]

	/*Enable UART Module*/
	USART3->CR1 |= USART_CR1_UE;
 8000662:	4b07      	ldr	r3, [pc, #28]	; (8000680 <uart3_tx_rx_init+0xac>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a06      	ldr	r2, [pc, #24]	; (8000680 <uart3_tx_rx_init+0xac>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6013      	str	r3, [r2, #0]
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40020c00 	.word	0x40020c00
 800067c:	00f42400 	.word	0x00f42400
 8000680:	40004800 	.word	0x40004800

08000684 <uart3_write>:
	/*Read RX data register*/
	return USART3->RDR;
}

void uart3_write(int ch)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	/*Make sure TX data register is empty*/
	while(!(USART3->ISR & USART_ISR_TXE)){}
 800068c:	bf00      	nop
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <uart3_write+0x2c>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000696:	2b00      	cmp	r3, #0
 8000698:	d0f9      	beq.n	800068e <uart3_write+0xa>

	/*Write to TX data register*/
	USART3->TDR = (ch & 0xFF);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <uart3_write+0x2c>)
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40004800 	.word	0x40004800

080006b4 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 80006c0:	6879      	ldr	r1, [r7, #4]
 80006c2:	68b8      	ldr	r0, [r7, #8]
 80006c4:	f000 f808 	bl	80006d8 <compute_uart_bd>
 80006c8:	4603      	mov	r3, r0
 80006ca:	461a      	mov	r2, r3
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	60da      	str	r2, [r3, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	085a      	lsrs	r2, r3, #1
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	441a      	add	r2, r3
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
	...

08000700 <main>:
#include "FLASH.h"



int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
	/*setup*/
	uart3_tx_rx_init();
 8000706:	f7ff ff65 	bl	80005d4 <uart3_tx_rx_init>
	SPI1_gpio_init();
 800070a:	f7ff fe55 	bl	80003b8 <SPI1_gpio_init>
	SPI1_config();
 800070e:	f7ff fe7b 	bl	8000408 <SPI1_config>

	//target address (24 bit max)
	uint32_t addr = 0x000FAF;
 8000712:	f640 73af 	movw	r3, #4015	; 0xfaf
 8000716:	607b      	str	r3, [r7, #4]

	//value to write to address
	uint8_t value = 0x69;
 8000718:	2369      	movs	r3, #105	; 0x69
 800071a:	70fb      	strb	r3, [r7, #3]

	uint8_t result;

	//This line is a dummy transmit to "catch" errant clock behavior on first transmission
	uint8_t txtest = FLASH_busy();
 800071c:	f7ff fdc8 	bl	80002b0 <FLASH_busy>
 8000720:	4603      	mov	r3, r0
 8000722:	70bb      	strb	r3, [r7, #2]
	if(txtest)
 8000724:	78bb      	ldrb	r3, [r7, #2]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d002      	beq.n	8000730 <main+0x30>
	{
		printf("First clock still bad");
 800072a:	480b      	ldr	r0, [pc, #44]	; (8000758 <main+0x58>)
 800072c:	f000 f91a 	bl	8000964 <iprintf>

	/*run loop*/
	while(1)
	{
		//write 0xAF to adrr, wait 0.1 sec, and then read addr
		FLASH_WRITE(addr, value);
 8000730:	78fb      	ldrb	r3, [r7, #3]
 8000732:	4619      	mov	r1, r3
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff fe02 	bl	800033e <FLASH_WRITE>
		printf("Write complete \n\r");
 800073a:	4808      	ldr	r0, [pc, #32]	; (800075c <main+0x5c>)
 800073c:	f000 f912 	bl	8000964 <iprintf>
		result = FLASH_READ(addr);
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff fdd0 	bl	80002e6 <FLASH_READ>
 8000746:	4603      	mov	r3, r0
 8000748:	707b      	strb	r3, [r7, #1]
		printf("Read complete -------- value: %d \n\r", result);
 800074a:	787b      	ldrb	r3, [r7, #1]
 800074c:	4619      	mov	r1, r3
 800074e:	4804      	ldr	r0, [pc, #16]	; (8000760 <main+0x60>)
 8000750:	f000 f908 	bl	8000964 <iprintf>
		FLASH_WRITE(addr, value);
 8000754:	e7ec      	b.n	8000730 <main+0x30>
 8000756:	bf00      	nop
 8000758:	08001898 	.word	0x08001898
 800075c:	080018b0 	.word	0x080018b0
 8000760:	080018c4 	.word	0x080018c4

08000764 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	e00a      	b.n	800078c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000776:	f3af 8000 	nop.w
 800077a:	4601      	mov	r1, r0
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	1c5a      	adds	r2, r3, #1
 8000780:	60ba      	str	r2, [r7, #8]
 8000782:	b2ca      	uxtb	r2, r1
 8000784:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	3301      	adds	r3, #1
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697a      	ldr	r2, [r7, #20]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	429a      	cmp	r2, r3
 8000792:	dbf0      	blt.n	8000776 <_read+0x12>
  }

  return len;
 8000794:	687b      	ldr	r3, [r7, #4]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	60f8      	str	r0, [r7, #12]
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	e009      	b.n	80007c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	1c5a      	adds	r2, r3, #1
 80007b4:	60ba      	str	r2, [r7, #8]
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff feff 	bl	80005bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	3301      	adds	r3, #1
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	dbf1      	blt.n	80007b0 <_write+0x12>
  }
  return len;
 80007cc:	687b      	ldr	r3, [r7, #4]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <_close>:

int _close(int file)
{
 80007d6:	b480      	push	{r7}
 80007d8:	b083      	sub	sp, #12
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b083      	sub	sp, #12
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
 80007f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007fe:	605a      	str	r2, [r3, #4]
  return 0;
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <_isatty>:

int _isatty(int file)
{
 800080e:	b480      	push	{r7}
 8000810:	b083      	sub	sp, #12
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000816:	2301      	movs	r3, #1
}
 8000818:	4618      	mov	r0, r3
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000848:	4a14      	ldr	r2, [pc, #80]	; (800089c <_sbrk+0x5c>)
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <_sbrk+0x60>)
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <_sbrk+0x64>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d102      	bne.n	8000862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <_sbrk+0x64>)
 800085e:	4a12      	ldr	r2, [pc, #72]	; (80008a8 <_sbrk+0x68>)
 8000860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <_sbrk+0x64>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4413      	add	r3, r2
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	429a      	cmp	r2, r3
 800086e:	d207      	bcs.n	8000880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000870:	f000 f846 	bl	8000900 <__errno>
 8000874:	4603      	mov	r3, r0
 8000876:	220c      	movs	r2, #12
 8000878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
 800087e:	e009      	b.n	8000894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <_sbrk+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000886:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <_sbrk+0x64>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <_sbrk+0x64>)
 8000890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000892:	68fb      	ldr	r3, [r7, #12]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3718      	adds	r7, #24
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20050000 	.word	0x20050000
 80008a0:	00000400 	.word	0x00000400
 80008a4:	20000080 	.word	0x20000080
 80008a8:	20000098 	.word	0x20000098

080008ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008ac:	480d      	ldr	r0, [pc, #52]	; (80008e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b4:	480c      	ldr	r0, [pc, #48]	; (80008e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008b6:	490d      	ldr	r1, [pc, #52]	; (80008ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b8:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <LoopForever+0xe>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008bc:	e002      	b.n	80008c4 <LoopCopyDataInit>

080008be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c2:	3304      	adds	r3, #4

080008c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c8:	d3f9      	bcc.n	80008be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008cc:	4c0a      	ldr	r4, [pc, #40]	; (80008f8 <LoopForever+0x16>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d0:	e001      	b.n	80008d6 <LoopFillZerobss>

080008d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d4:	3204      	adds	r2, #4

080008d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d8:	d3fb      	bcc.n	80008d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008da:	f000 f817 	bl	800090c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008de:	f7ff ff0f 	bl	8000700 <main>

080008e2 <LoopForever>:

LoopForever:
  b LoopForever
 80008e2:	e7fe      	b.n	80008e2 <LoopForever>
  ldr   r0, =_estack
 80008e4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80008e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ec:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80008f0:	08001988 	.word	0x08001988
  ldr r2, =_sbss
 80008f4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80008f8:	20000094 	.word	0x20000094

080008fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC_IRQHandler>
	...

08000900 <__errno>:
 8000900:	4b01      	ldr	r3, [pc, #4]	; (8000908 <__errno+0x8>)
 8000902:	6818      	ldr	r0, [r3, #0]
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	20000000 	.word	0x20000000

0800090c <__libc_init_array>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	4d0d      	ldr	r5, [pc, #52]	; (8000944 <__libc_init_array+0x38>)
 8000910:	4c0d      	ldr	r4, [pc, #52]	; (8000948 <__libc_init_array+0x3c>)
 8000912:	1b64      	subs	r4, r4, r5
 8000914:	10a4      	asrs	r4, r4, #2
 8000916:	2600      	movs	r6, #0
 8000918:	42a6      	cmp	r6, r4
 800091a:	d109      	bne.n	8000930 <__libc_init_array+0x24>
 800091c:	4d0b      	ldr	r5, [pc, #44]	; (800094c <__libc_init_array+0x40>)
 800091e:	4c0c      	ldr	r4, [pc, #48]	; (8000950 <__libc_init_array+0x44>)
 8000920:	f000 ffae 	bl	8001880 <_init>
 8000924:	1b64      	subs	r4, r4, r5
 8000926:	10a4      	asrs	r4, r4, #2
 8000928:	2600      	movs	r6, #0
 800092a:	42a6      	cmp	r6, r4
 800092c:	d105      	bne.n	800093a <__libc_init_array+0x2e>
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f855 3b04 	ldr.w	r3, [r5], #4
 8000934:	4798      	blx	r3
 8000936:	3601      	adds	r6, #1
 8000938:	e7ee      	b.n	8000918 <__libc_init_array+0xc>
 800093a:	f855 3b04 	ldr.w	r3, [r5], #4
 800093e:	4798      	blx	r3
 8000940:	3601      	adds	r6, #1
 8000942:	e7f2      	b.n	800092a <__libc_init_array+0x1e>
 8000944:	08001980 	.word	0x08001980
 8000948:	08001980 	.word	0x08001980
 800094c:	08001980 	.word	0x08001980
 8000950:	08001984 	.word	0x08001984

08000954 <memset>:
 8000954:	4402      	add	r2, r0
 8000956:	4603      	mov	r3, r0
 8000958:	4293      	cmp	r3, r2
 800095a:	d100      	bne.n	800095e <memset+0xa>
 800095c:	4770      	bx	lr
 800095e:	f803 1b01 	strb.w	r1, [r3], #1
 8000962:	e7f9      	b.n	8000958 <memset+0x4>

08000964 <iprintf>:
 8000964:	b40f      	push	{r0, r1, r2, r3}
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <iprintf+0x2c>)
 8000968:	b513      	push	{r0, r1, r4, lr}
 800096a:	681c      	ldr	r4, [r3, #0]
 800096c:	b124      	cbz	r4, 8000978 <iprintf+0x14>
 800096e:	69a3      	ldr	r3, [r4, #24]
 8000970:	b913      	cbnz	r3, 8000978 <iprintf+0x14>
 8000972:	4620      	mov	r0, r4
 8000974:	f000 f866 	bl	8000a44 <__sinit>
 8000978:	ab05      	add	r3, sp, #20
 800097a:	9a04      	ldr	r2, [sp, #16]
 800097c:	68a1      	ldr	r1, [r4, #8]
 800097e:	9301      	str	r3, [sp, #4]
 8000980:	4620      	mov	r0, r4
 8000982:	f000 f9bd 	bl	8000d00 <_vfiprintf_r>
 8000986:	b002      	add	sp, #8
 8000988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800098c:	b004      	add	sp, #16
 800098e:	4770      	bx	lr
 8000990:	20000000 	.word	0x20000000

08000994 <std>:
 8000994:	2300      	movs	r3, #0
 8000996:	b510      	push	{r4, lr}
 8000998:	4604      	mov	r4, r0
 800099a:	e9c0 3300 	strd	r3, r3, [r0]
 800099e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80009a2:	6083      	str	r3, [r0, #8]
 80009a4:	8181      	strh	r1, [r0, #12]
 80009a6:	6643      	str	r3, [r0, #100]	; 0x64
 80009a8:	81c2      	strh	r2, [r0, #14]
 80009aa:	6183      	str	r3, [r0, #24]
 80009ac:	4619      	mov	r1, r3
 80009ae:	2208      	movs	r2, #8
 80009b0:	305c      	adds	r0, #92	; 0x5c
 80009b2:	f7ff ffcf 	bl	8000954 <memset>
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <std+0x38>)
 80009b8:	6263      	str	r3, [r4, #36]	; 0x24
 80009ba:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <std+0x3c>)
 80009bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80009be:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <std+0x40>)
 80009c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <std+0x44>)
 80009c4:	6224      	str	r4, [r4, #32]
 80009c6:	6323      	str	r3, [r4, #48]	; 0x30
 80009c8:	bd10      	pop	{r4, pc}
 80009ca:	bf00      	nop
 80009cc:	080012a9 	.word	0x080012a9
 80009d0:	080012cb 	.word	0x080012cb
 80009d4:	08001303 	.word	0x08001303
 80009d8:	08001327 	.word	0x08001327

080009dc <_cleanup_r>:
 80009dc:	4901      	ldr	r1, [pc, #4]	; (80009e4 <_cleanup_r+0x8>)
 80009de:	f000 b8af 	b.w	8000b40 <_fwalk_reent>
 80009e2:	bf00      	nop
 80009e4:	08001601 	.word	0x08001601

080009e8 <__sfmoreglue>:
 80009e8:	b570      	push	{r4, r5, r6, lr}
 80009ea:	2268      	movs	r2, #104	; 0x68
 80009ec:	1e4d      	subs	r5, r1, #1
 80009ee:	4355      	muls	r5, r2
 80009f0:	460e      	mov	r6, r1
 80009f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80009f6:	f000 f8e5 	bl	8000bc4 <_malloc_r>
 80009fa:	4604      	mov	r4, r0
 80009fc:	b140      	cbz	r0, 8000a10 <__sfmoreglue+0x28>
 80009fe:	2100      	movs	r1, #0
 8000a00:	e9c0 1600 	strd	r1, r6, [r0]
 8000a04:	300c      	adds	r0, #12
 8000a06:	60a0      	str	r0, [r4, #8]
 8000a08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000a0c:	f7ff ffa2 	bl	8000954 <memset>
 8000a10:	4620      	mov	r0, r4
 8000a12:	bd70      	pop	{r4, r5, r6, pc}

08000a14 <__sfp_lock_acquire>:
 8000a14:	4801      	ldr	r0, [pc, #4]	; (8000a1c <__sfp_lock_acquire+0x8>)
 8000a16:	f000 b8b3 	b.w	8000b80 <__retarget_lock_acquire_recursive>
 8000a1a:	bf00      	nop
 8000a1c:	20000085 	.word	0x20000085

08000a20 <__sfp_lock_release>:
 8000a20:	4801      	ldr	r0, [pc, #4]	; (8000a28 <__sfp_lock_release+0x8>)
 8000a22:	f000 b8ae 	b.w	8000b82 <__retarget_lock_release_recursive>
 8000a26:	bf00      	nop
 8000a28:	20000085 	.word	0x20000085

08000a2c <__sinit_lock_acquire>:
 8000a2c:	4801      	ldr	r0, [pc, #4]	; (8000a34 <__sinit_lock_acquire+0x8>)
 8000a2e:	f000 b8a7 	b.w	8000b80 <__retarget_lock_acquire_recursive>
 8000a32:	bf00      	nop
 8000a34:	20000086 	.word	0x20000086

08000a38 <__sinit_lock_release>:
 8000a38:	4801      	ldr	r0, [pc, #4]	; (8000a40 <__sinit_lock_release+0x8>)
 8000a3a:	f000 b8a2 	b.w	8000b82 <__retarget_lock_release_recursive>
 8000a3e:	bf00      	nop
 8000a40:	20000086 	.word	0x20000086

08000a44 <__sinit>:
 8000a44:	b510      	push	{r4, lr}
 8000a46:	4604      	mov	r4, r0
 8000a48:	f7ff fff0 	bl	8000a2c <__sinit_lock_acquire>
 8000a4c:	69a3      	ldr	r3, [r4, #24]
 8000a4e:	b11b      	cbz	r3, 8000a58 <__sinit+0x14>
 8000a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a54:	f7ff bff0 	b.w	8000a38 <__sinit_lock_release>
 8000a58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000a5c:	6523      	str	r3, [r4, #80]	; 0x50
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <__sinit+0x68>)
 8000a60:	4a13      	ldr	r2, [pc, #76]	; (8000ab0 <__sinit+0x6c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	62a2      	str	r2, [r4, #40]	; 0x28
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	bf04      	itt	eq
 8000a6a:	2301      	moveq	r3, #1
 8000a6c:	61a3      	streq	r3, [r4, #24]
 8000a6e:	4620      	mov	r0, r4
 8000a70:	f000 f820 	bl	8000ab4 <__sfp>
 8000a74:	6060      	str	r0, [r4, #4]
 8000a76:	4620      	mov	r0, r4
 8000a78:	f000 f81c 	bl	8000ab4 <__sfp>
 8000a7c:	60a0      	str	r0, [r4, #8]
 8000a7e:	4620      	mov	r0, r4
 8000a80:	f000 f818 	bl	8000ab4 <__sfp>
 8000a84:	2200      	movs	r2, #0
 8000a86:	60e0      	str	r0, [r4, #12]
 8000a88:	2104      	movs	r1, #4
 8000a8a:	6860      	ldr	r0, [r4, #4]
 8000a8c:	f7ff ff82 	bl	8000994 <std>
 8000a90:	68a0      	ldr	r0, [r4, #8]
 8000a92:	2201      	movs	r2, #1
 8000a94:	2109      	movs	r1, #9
 8000a96:	f7ff ff7d 	bl	8000994 <std>
 8000a9a:	68e0      	ldr	r0, [r4, #12]
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	2112      	movs	r1, #18
 8000aa0:	f7ff ff78 	bl	8000994 <std>
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	61a3      	str	r3, [r4, #24]
 8000aa8:	e7d2      	b.n	8000a50 <__sinit+0xc>
 8000aaa:	bf00      	nop
 8000aac:	080018e8 	.word	0x080018e8
 8000ab0:	080009dd 	.word	0x080009dd

08000ab4 <__sfp>:
 8000ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab6:	4607      	mov	r7, r0
 8000ab8:	f7ff ffac 	bl	8000a14 <__sfp_lock_acquire>
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <__sfp+0x84>)
 8000abe:	681e      	ldr	r6, [r3, #0]
 8000ac0:	69b3      	ldr	r3, [r6, #24]
 8000ac2:	b913      	cbnz	r3, 8000aca <__sfp+0x16>
 8000ac4:	4630      	mov	r0, r6
 8000ac6:	f7ff ffbd 	bl	8000a44 <__sinit>
 8000aca:	3648      	adds	r6, #72	; 0x48
 8000acc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	d503      	bpl.n	8000adc <__sfp+0x28>
 8000ad4:	6833      	ldr	r3, [r6, #0]
 8000ad6:	b30b      	cbz	r3, 8000b1c <__sfp+0x68>
 8000ad8:	6836      	ldr	r6, [r6, #0]
 8000ada:	e7f7      	b.n	8000acc <__sfp+0x18>
 8000adc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000ae0:	b9d5      	cbnz	r5, 8000b18 <__sfp+0x64>
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <__sfp+0x88>)
 8000ae4:	60e3      	str	r3, [r4, #12]
 8000ae6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000aea:	6665      	str	r5, [r4, #100]	; 0x64
 8000aec:	f000 f847 	bl	8000b7e <__retarget_lock_init_recursive>
 8000af0:	f7ff ff96 	bl	8000a20 <__sfp_lock_release>
 8000af4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000af8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000afc:	6025      	str	r5, [r4, #0]
 8000afe:	61a5      	str	r5, [r4, #24]
 8000b00:	2208      	movs	r2, #8
 8000b02:	4629      	mov	r1, r5
 8000b04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000b08:	f7ff ff24 	bl	8000954 <memset>
 8000b0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000b10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000b14:	4620      	mov	r0, r4
 8000b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b18:	3468      	adds	r4, #104	; 0x68
 8000b1a:	e7d9      	b.n	8000ad0 <__sfp+0x1c>
 8000b1c:	2104      	movs	r1, #4
 8000b1e:	4638      	mov	r0, r7
 8000b20:	f7ff ff62 	bl	80009e8 <__sfmoreglue>
 8000b24:	4604      	mov	r4, r0
 8000b26:	6030      	str	r0, [r6, #0]
 8000b28:	2800      	cmp	r0, #0
 8000b2a:	d1d5      	bne.n	8000ad8 <__sfp+0x24>
 8000b2c:	f7ff ff78 	bl	8000a20 <__sfp_lock_release>
 8000b30:	230c      	movs	r3, #12
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	e7ee      	b.n	8000b14 <__sfp+0x60>
 8000b36:	bf00      	nop
 8000b38:	080018e8 	.word	0x080018e8
 8000b3c:	ffff0001 	.word	0xffff0001

08000b40 <_fwalk_reent>:
 8000b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b44:	4606      	mov	r6, r0
 8000b46:	4688      	mov	r8, r1
 8000b48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000b4c:	2700      	movs	r7, #0
 8000b4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b52:	f1b9 0901 	subs.w	r9, r9, #1
 8000b56:	d505      	bpl.n	8000b64 <_fwalk_reent+0x24>
 8000b58:	6824      	ldr	r4, [r4, #0]
 8000b5a:	2c00      	cmp	r4, #0
 8000b5c:	d1f7      	bne.n	8000b4e <_fwalk_reent+0xe>
 8000b5e:	4638      	mov	r0, r7
 8000b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b64:	89ab      	ldrh	r3, [r5, #12]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d907      	bls.n	8000b7a <_fwalk_reent+0x3a>
 8000b6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	d003      	beq.n	8000b7a <_fwalk_reent+0x3a>
 8000b72:	4629      	mov	r1, r5
 8000b74:	4630      	mov	r0, r6
 8000b76:	47c0      	blx	r8
 8000b78:	4307      	orrs	r7, r0
 8000b7a:	3568      	adds	r5, #104	; 0x68
 8000b7c:	e7e9      	b.n	8000b52 <_fwalk_reent+0x12>

08000b7e <__retarget_lock_init_recursive>:
 8000b7e:	4770      	bx	lr

08000b80 <__retarget_lock_acquire_recursive>:
 8000b80:	4770      	bx	lr

08000b82 <__retarget_lock_release_recursive>:
 8000b82:	4770      	bx	lr

08000b84 <sbrk_aligned>:
 8000b84:	b570      	push	{r4, r5, r6, lr}
 8000b86:	4e0e      	ldr	r6, [pc, #56]	; (8000bc0 <sbrk_aligned+0x3c>)
 8000b88:	460c      	mov	r4, r1
 8000b8a:	6831      	ldr	r1, [r6, #0]
 8000b8c:	4605      	mov	r5, r0
 8000b8e:	b911      	cbnz	r1, 8000b96 <sbrk_aligned+0x12>
 8000b90:	f000 fb7a 	bl	8001288 <_sbrk_r>
 8000b94:	6030      	str	r0, [r6, #0]
 8000b96:	4621      	mov	r1, r4
 8000b98:	4628      	mov	r0, r5
 8000b9a:	f000 fb75 	bl	8001288 <_sbrk_r>
 8000b9e:	1c43      	adds	r3, r0, #1
 8000ba0:	d00a      	beq.n	8000bb8 <sbrk_aligned+0x34>
 8000ba2:	1cc4      	adds	r4, r0, #3
 8000ba4:	f024 0403 	bic.w	r4, r4, #3
 8000ba8:	42a0      	cmp	r0, r4
 8000baa:	d007      	beq.n	8000bbc <sbrk_aligned+0x38>
 8000bac:	1a21      	subs	r1, r4, r0
 8000bae:	4628      	mov	r0, r5
 8000bb0:	f000 fb6a 	bl	8001288 <_sbrk_r>
 8000bb4:	3001      	adds	r0, #1
 8000bb6:	d101      	bne.n	8000bbc <sbrk_aligned+0x38>
 8000bb8:	f04f 34ff 	mov.w	r4, #4294967295
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	bd70      	pop	{r4, r5, r6, pc}
 8000bc0:	2000008c 	.word	0x2000008c

08000bc4 <_malloc_r>:
 8000bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bc8:	1ccd      	adds	r5, r1, #3
 8000bca:	f025 0503 	bic.w	r5, r5, #3
 8000bce:	3508      	adds	r5, #8
 8000bd0:	2d0c      	cmp	r5, #12
 8000bd2:	bf38      	it	cc
 8000bd4:	250c      	movcc	r5, #12
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	4607      	mov	r7, r0
 8000bda:	db01      	blt.n	8000be0 <_malloc_r+0x1c>
 8000bdc:	42a9      	cmp	r1, r5
 8000bde:	d905      	bls.n	8000bec <_malloc_r+0x28>
 8000be0:	230c      	movs	r3, #12
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	2600      	movs	r6, #0
 8000be6:	4630      	mov	r0, r6
 8000be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bec:	4e2e      	ldr	r6, [pc, #184]	; (8000ca8 <_malloc_r+0xe4>)
 8000bee:	f000 fdbb 	bl	8001768 <__malloc_lock>
 8000bf2:	6833      	ldr	r3, [r6, #0]
 8000bf4:	461c      	mov	r4, r3
 8000bf6:	bb34      	cbnz	r4, 8000c46 <_malloc_r+0x82>
 8000bf8:	4629      	mov	r1, r5
 8000bfa:	4638      	mov	r0, r7
 8000bfc:	f7ff ffc2 	bl	8000b84 <sbrk_aligned>
 8000c00:	1c43      	adds	r3, r0, #1
 8000c02:	4604      	mov	r4, r0
 8000c04:	d14d      	bne.n	8000ca2 <_malloc_r+0xde>
 8000c06:	6834      	ldr	r4, [r6, #0]
 8000c08:	4626      	mov	r6, r4
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d140      	bne.n	8000c90 <_malloc_r+0xcc>
 8000c0e:	6823      	ldr	r3, [r4, #0]
 8000c10:	4631      	mov	r1, r6
 8000c12:	4638      	mov	r0, r7
 8000c14:	eb04 0803 	add.w	r8, r4, r3
 8000c18:	f000 fb36 	bl	8001288 <_sbrk_r>
 8000c1c:	4580      	cmp	r8, r0
 8000c1e:	d13a      	bne.n	8000c96 <_malloc_r+0xd2>
 8000c20:	6821      	ldr	r1, [r4, #0]
 8000c22:	3503      	adds	r5, #3
 8000c24:	1a6d      	subs	r5, r5, r1
 8000c26:	f025 0503 	bic.w	r5, r5, #3
 8000c2a:	3508      	adds	r5, #8
 8000c2c:	2d0c      	cmp	r5, #12
 8000c2e:	bf38      	it	cc
 8000c30:	250c      	movcc	r5, #12
 8000c32:	4629      	mov	r1, r5
 8000c34:	4638      	mov	r0, r7
 8000c36:	f7ff ffa5 	bl	8000b84 <sbrk_aligned>
 8000c3a:	3001      	adds	r0, #1
 8000c3c:	d02b      	beq.n	8000c96 <_malloc_r+0xd2>
 8000c3e:	6823      	ldr	r3, [r4, #0]
 8000c40:	442b      	add	r3, r5
 8000c42:	6023      	str	r3, [r4, #0]
 8000c44:	e00e      	b.n	8000c64 <_malloc_r+0xa0>
 8000c46:	6822      	ldr	r2, [r4, #0]
 8000c48:	1b52      	subs	r2, r2, r5
 8000c4a:	d41e      	bmi.n	8000c8a <_malloc_r+0xc6>
 8000c4c:	2a0b      	cmp	r2, #11
 8000c4e:	d916      	bls.n	8000c7e <_malloc_r+0xba>
 8000c50:	1961      	adds	r1, r4, r5
 8000c52:	42a3      	cmp	r3, r4
 8000c54:	6025      	str	r5, [r4, #0]
 8000c56:	bf18      	it	ne
 8000c58:	6059      	strne	r1, [r3, #4]
 8000c5a:	6863      	ldr	r3, [r4, #4]
 8000c5c:	bf08      	it	eq
 8000c5e:	6031      	streq	r1, [r6, #0]
 8000c60:	5162      	str	r2, [r4, r5]
 8000c62:	604b      	str	r3, [r1, #4]
 8000c64:	4638      	mov	r0, r7
 8000c66:	f104 060b 	add.w	r6, r4, #11
 8000c6a:	f000 fd83 	bl	8001774 <__malloc_unlock>
 8000c6e:	f026 0607 	bic.w	r6, r6, #7
 8000c72:	1d23      	adds	r3, r4, #4
 8000c74:	1af2      	subs	r2, r6, r3
 8000c76:	d0b6      	beq.n	8000be6 <_malloc_r+0x22>
 8000c78:	1b9b      	subs	r3, r3, r6
 8000c7a:	50a3      	str	r3, [r4, r2]
 8000c7c:	e7b3      	b.n	8000be6 <_malloc_r+0x22>
 8000c7e:	6862      	ldr	r2, [r4, #4]
 8000c80:	42a3      	cmp	r3, r4
 8000c82:	bf0c      	ite	eq
 8000c84:	6032      	streq	r2, [r6, #0]
 8000c86:	605a      	strne	r2, [r3, #4]
 8000c88:	e7ec      	b.n	8000c64 <_malloc_r+0xa0>
 8000c8a:	4623      	mov	r3, r4
 8000c8c:	6864      	ldr	r4, [r4, #4]
 8000c8e:	e7b2      	b.n	8000bf6 <_malloc_r+0x32>
 8000c90:	4634      	mov	r4, r6
 8000c92:	6876      	ldr	r6, [r6, #4]
 8000c94:	e7b9      	b.n	8000c0a <_malloc_r+0x46>
 8000c96:	230c      	movs	r3, #12
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	4638      	mov	r0, r7
 8000c9c:	f000 fd6a 	bl	8001774 <__malloc_unlock>
 8000ca0:	e7a1      	b.n	8000be6 <_malloc_r+0x22>
 8000ca2:	6025      	str	r5, [r4, #0]
 8000ca4:	e7de      	b.n	8000c64 <_malloc_r+0xa0>
 8000ca6:	bf00      	nop
 8000ca8:	20000088 	.word	0x20000088

08000cac <__sfputc_r>:
 8000cac:	6893      	ldr	r3, [r2, #8]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	b410      	push	{r4}
 8000cb4:	6093      	str	r3, [r2, #8]
 8000cb6:	da08      	bge.n	8000cca <__sfputc_r+0x1e>
 8000cb8:	6994      	ldr	r4, [r2, #24]
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	db01      	blt.n	8000cc2 <__sfputc_r+0x16>
 8000cbe:	290a      	cmp	r1, #10
 8000cc0:	d103      	bne.n	8000cca <__sfputc_r+0x1e>
 8000cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cc6:	f000 bb33 	b.w	8001330 <__swbuf_r>
 8000cca:	6813      	ldr	r3, [r2, #0]
 8000ccc:	1c58      	adds	r0, r3, #1
 8000cce:	6010      	str	r0, [r2, #0]
 8000cd0:	7019      	strb	r1, [r3, #0]
 8000cd2:	4608      	mov	r0, r1
 8000cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <__sfputs_r>:
 8000cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cdc:	4606      	mov	r6, r0
 8000cde:	460f      	mov	r7, r1
 8000ce0:	4614      	mov	r4, r2
 8000ce2:	18d5      	adds	r5, r2, r3
 8000ce4:	42ac      	cmp	r4, r5
 8000ce6:	d101      	bne.n	8000cec <__sfputs_r+0x12>
 8000ce8:	2000      	movs	r0, #0
 8000cea:	e007      	b.n	8000cfc <__sfputs_r+0x22>
 8000cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cf0:	463a      	mov	r2, r7
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	f7ff ffda 	bl	8000cac <__sfputc_r>
 8000cf8:	1c43      	adds	r3, r0, #1
 8000cfa:	d1f3      	bne.n	8000ce4 <__sfputs_r+0xa>
 8000cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d00 <_vfiprintf_r>:
 8000d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d04:	460d      	mov	r5, r1
 8000d06:	b09d      	sub	sp, #116	; 0x74
 8000d08:	4614      	mov	r4, r2
 8000d0a:	4698      	mov	r8, r3
 8000d0c:	4606      	mov	r6, r0
 8000d0e:	b118      	cbz	r0, 8000d18 <_vfiprintf_r+0x18>
 8000d10:	6983      	ldr	r3, [r0, #24]
 8000d12:	b90b      	cbnz	r3, 8000d18 <_vfiprintf_r+0x18>
 8000d14:	f7ff fe96 	bl	8000a44 <__sinit>
 8000d18:	4b89      	ldr	r3, [pc, #548]	; (8000f40 <_vfiprintf_r+0x240>)
 8000d1a:	429d      	cmp	r5, r3
 8000d1c:	d11b      	bne.n	8000d56 <_vfiprintf_r+0x56>
 8000d1e:	6875      	ldr	r5, [r6, #4]
 8000d20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d22:	07d9      	lsls	r1, r3, #31
 8000d24:	d405      	bmi.n	8000d32 <_vfiprintf_r+0x32>
 8000d26:	89ab      	ldrh	r3, [r5, #12]
 8000d28:	059a      	lsls	r2, r3, #22
 8000d2a:	d402      	bmi.n	8000d32 <_vfiprintf_r+0x32>
 8000d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d2e:	f7ff ff27 	bl	8000b80 <__retarget_lock_acquire_recursive>
 8000d32:	89ab      	ldrh	r3, [r5, #12]
 8000d34:	071b      	lsls	r3, r3, #28
 8000d36:	d501      	bpl.n	8000d3c <_vfiprintf_r+0x3c>
 8000d38:	692b      	ldr	r3, [r5, #16]
 8000d3a:	b9eb      	cbnz	r3, 8000d78 <_vfiprintf_r+0x78>
 8000d3c:	4629      	mov	r1, r5
 8000d3e:	4630      	mov	r0, r6
 8000d40:	f000 fb5a 	bl	80013f8 <__swsetup_r>
 8000d44:	b1c0      	cbz	r0, 8000d78 <_vfiprintf_r+0x78>
 8000d46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d48:	07dc      	lsls	r4, r3, #31
 8000d4a:	d50e      	bpl.n	8000d6a <_vfiprintf_r+0x6a>
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	b01d      	add	sp, #116	; 0x74
 8000d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d56:	4b7b      	ldr	r3, [pc, #492]	; (8000f44 <_vfiprintf_r+0x244>)
 8000d58:	429d      	cmp	r5, r3
 8000d5a:	d101      	bne.n	8000d60 <_vfiprintf_r+0x60>
 8000d5c:	68b5      	ldr	r5, [r6, #8]
 8000d5e:	e7df      	b.n	8000d20 <_vfiprintf_r+0x20>
 8000d60:	4b79      	ldr	r3, [pc, #484]	; (8000f48 <_vfiprintf_r+0x248>)
 8000d62:	429d      	cmp	r5, r3
 8000d64:	bf08      	it	eq
 8000d66:	68f5      	ldreq	r5, [r6, #12]
 8000d68:	e7da      	b.n	8000d20 <_vfiprintf_r+0x20>
 8000d6a:	89ab      	ldrh	r3, [r5, #12]
 8000d6c:	0598      	lsls	r0, r3, #22
 8000d6e:	d4ed      	bmi.n	8000d4c <_vfiprintf_r+0x4c>
 8000d70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d72:	f7ff ff06 	bl	8000b82 <__retarget_lock_release_recursive>
 8000d76:	e7e9      	b.n	8000d4c <_vfiprintf_r+0x4c>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8000d7c:	2320      	movs	r3, #32
 8000d7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000d82:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d86:	2330      	movs	r3, #48	; 0x30
 8000d88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000f4c <_vfiprintf_r+0x24c>
 8000d8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000d90:	f04f 0901 	mov.w	r9, #1
 8000d94:	4623      	mov	r3, r4
 8000d96:	469a      	mov	sl, r3
 8000d98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d9c:	b10a      	cbz	r2, 8000da2 <_vfiprintf_r+0xa2>
 8000d9e:	2a25      	cmp	r2, #37	; 0x25
 8000da0:	d1f9      	bne.n	8000d96 <_vfiprintf_r+0x96>
 8000da2:	ebba 0b04 	subs.w	fp, sl, r4
 8000da6:	d00b      	beq.n	8000dc0 <_vfiprintf_r+0xc0>
 8000da8:	465b      	mov	r3, fp
 8000daa:	4622      	mov	r2, r4
 8000dac:	4629      	mov	r1, r5
 8000dae:	4630      	mov	r0, r6
 8000db0:	f7ff ff93 	bl	8000cda <__sfputs_r>
 8000db4:	3001      	adds	r0, #1
 8000db6:	f000 80aa 	beq.w	8000f0e <_vfiprintf_r+0x20e>
 8000dba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000dbc:	445a      	add	r2, fp
 8000dbe:	9209      	str	r2, [sp, #36]	; 0x24
 8000dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f000 80a2 	beq.w	8000f0e <_vfiprintf_r+0x20e>
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000dd4:	f10a 0a01 	add.w	sl, sl, #1
 8000dd8:	9304      	str	r3, [sp, #16]
 8000dda:	9307      	str	r3, [sp, #28]
 8000ddc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000de0:	931a      	str	r3, [sp, #104]	; 0x68
 8000de2:	4654      	mov	r4, sl
 8000de4:	2205      	movs	r2, #5
 8000de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dea:	4858      	ldr	r0, [pc, #352]	; (8000f4c <_vfiprintf_r+0x24c>)
 8000dec:	f7ff fa10 	bl	8000210 <memchr>
 8000df0:	9a04      	ldr	r2, [sp, #16]
 8000df2:	b9d8      	cbnz	r0, 8000e2c <_vfiprintf_r+0x12c>
 8000df4:	06d1      	lsls	r1, r2, #27
 8000df6:	bf44      	itt	mi
 8000df8:	2320      	movmi	r3, #32
 8000dfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000dfe:	0713      	lsls	r3, r2, #28
 8000e00:	bf44      	itt	mi
 8000e02:	232b      	movmi	r3, #43	; 0x2b
 8000e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e08:	f89a 3000 	ldrb.w	r3, [sl]
 8000e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8000e0e:	d015      	beq.n	8000e3c <_vfiprintf_r+0x13c>
 8000e10:	9a07      	ldr	r2, [sp, #28]
 8000e12:	4654      	mov	r4, sl
 8000e14:	2000      	movs	r0, #0
 8000e16:	f04f 0c0a 	mov.w	ip, #10
 8000e1a:	4621      	mov	r1, r4
 8000e1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e20:	3b30      	subs	r3, #48	; 0x30
 8000e22:	2b09      	cmp	r3, #9
 8000e24:	d94e      	bls.n	8000ec4 <_vfiprintf_r+0x1c4>
 8000e26:	b1b0      	cbz	r0, 8000e56 <_vfiprintf_r+0x156>
 8000e28:	9207      	str	r2, [sp, #28]
 8000e2a:	e014      	b.n	8000e56 <_vfiprintf_r+0x156>
 8000e2c:	eba0 0308 	sub.w	r3, r0, r8
 8000e30:	fa09 f303 	lsl.w	r3, r9, r3
 8000e34:	4313      	orrs	r3, r2
 8000e36:	9304      	str	r3, [sp, #16]
 8000e38:	46a2      	mov	sl, r4
 8000e3a:	e7d2      	b.n	8000de2 <_vfiprintf_r+0xe2>
 8000e3c:	9b03      	ldr	r3, [sp, #12]
 8000e3e:	1d19      	adds	r1, r3, #4
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	9103      	str	r1, [sp, #12]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	bfbb      	ittet	lt
 8000e48:	425b      	neglt	r3, r3
 8000e4a:	f042 0202 	orrlt.w	r2, r2, #2
 8000e4e:	9307      	strge	r3, [sp, #28]
 8000e50:	9307      	strlt	r3, [sp, #28]
 8000e52:	bfb8      	it	lt
 8000e54:	9204      	strlt	r2, [sp, #16]
 8000e56:	7823      	ldrb	r3, [r4, #0]
 8000e58:	2b2e      	cmp	r3, #46	; 0x2e
 8000e5a:	d10c      	bne.n	8000e76 <_vfiprintf_r+0x176>
 8000e5c:	7863      	ldrb	r3, [r4, #1]
 8000e5e:	2b2a      	cmp	r3, #42	; 0x2a
 8000e60:	d135      	bne.n	8000ece <_vfiprintf_r+0x1ce>
 8000e62:	9b03      	ldr	r3, [sp, #12]
 8000e64:	1d1a      	adds	r2, r3, #4
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	9203      	str	r2, [sp, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	bfb8      	it	lt
 8000e6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8000e72:	3402      	adds	r4, #2
 8000e74:	9305      	str	r3, [sp, #20]
 8000e76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000f5c <_vfiprintf_r+0x25c>
 8000e7a:	7821      	ldrb	r1, [r4, #0]
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	4650      	mov	r0, sl
 8000e80:	f7ff f9c6 	bl	8000210 <memchr>
 8000e84:	b140      	cbz	r0, 8000e98 <_vfiprintf_r+0x198>
 8000e86:	2340      	movs	r3, #64	; 0x40
 8000e88:	eba0 000a 	sub.w	r0, r0, sl
 8000e8c:	fa03 f000 	lsl.w	r0, r3, r0
 8000e90:	9b04      	ldr	r3, [sp, #16]
 8000e92:	4303      	orrs	r3, r0
 8000e94:	3401      	adds	r4, #1
 8000e96:	9304      	str	r3, [sp, #16]
 8000e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e9c:	482c      	ldr	r0, [pc, #176]	; (8000f50 <_vfiprintf_r+0x250>)
 8000e9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000ea2:	2206      	movs	r2, #6
 8000ea4:	f7ff f9b4 	bl	8000210 <memchr>
 8000ea8:	2800      	cmp	r0, #0
 8000eaa:	d03f      	beq.n	8000f2c <_vfiprintf_r+0x22c>
 8000eac:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <_vfiprintf_r+0x254>)
 8000eae:	bb1b      	cbnz	r3, 8000ef8 <_vfiprintf_r+0x1f8>
 8000eb0:	9b03      	ldr	r3, [sp, #12]
 8000eb2:	3307      	adds	r3, #7
 8000eb4:	f023 0307 	bic.w	r3, r3, #7
 8000eb8:	3308      	adds	r3, #8
 8000eba:	9303      	str	r3, [sp, #12]
 8000ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ebe:	443b      	add	r3, r7
 8000ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8000ec2:	e767      	b.n	8000d94 <_vfiprintf_r+0x94>
 8000ec4:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ec8:	460c      	mov	r4, r1
 8000eca:	2001      	movs	r0, #1
 8000ecc:	e7a5      	b.n	8000e1a <_vfiprintf_r+0x11a>
 8000ece:	2300      	movs	r3, #0
 8000ed0:	3401      	adds	r4, #1
 8000ed2:	9305      	str	r3, [sp, #20]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f04f 0c0a 	mov.w	ip, #10
 8000eda:	4620      	mov	r0, r4
 8000edc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ee0:	3a30      	subs	r2, #48	; 0x30
 8000ee2:	2a09      	cmp	r2, #9
 8000ee4:	d903      	bls.n	8000eee <_vfiprintf_r+0x1ee>
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0c5      	beq.n	8000e76 <_vfiprintf_r+0x176>
 8000eea:	9105      	str	r1, [sp, #20]
 8000eec:	e7c3      	b.n	8000e76 <_vfiprintf_r+0x176>
 8000eee:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e7f0      	b.n	8000eda <_vfiprintf_r+0x1da>
 8000ef8:	ab03      	add	r3, sp, #12
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	462a      	mov	r2, r5
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <_vfiprintf_r+0x258>)
 8000f00:	a904      	add	r1, sp, #16
 8000f02:	4630      	mov	r0, r6
 8000f04:	f3af 8000 	nop.w
 8000f08:	4607      	mov	r7, r0
 8000f0a:	1c78      	adds	r0, r7, #1
 8000f0c:	d1d6      	bne.n	8000ebc <_vfiprintf_r+0x1bc>
 8000f0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f10:	07d9      	lsls	r1, r3, #31
 8000f12:	d405      	bmi.n	8000f20 <_vfiprintf_r+0x220>
 8000f14:	89ab      	ldrh	r3, [r5, #12]
 8000f16:	059a      	lsls	r2, r3, #22
 8000f18:	d402      	bmi.n	8000f20 <_vfiprintf_r+0x220>
 8000f1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f1c:	f7ff fe31 	bl	8000b82 <__retarget_lock_release_recursive>
 8000f20:	89ab      	ldrh	r3, [r5, #12]
 8000f22:	065b      	lsls	r3, r3, #25
 8000f24:	f53f af12 	bmi.w	8000d4c <_vfiprintf_r+0x4c>
 8000f28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f2a:	e711      	b.n	8000d50 <_vfiprintf_r+0x50>
 8000f2c:	ab03      	add	r3, sp, #12
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	462a      	mov	r2, r5
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <_vfiprintf_r+0x258>)
 8000f34:	a904      	add	r1, sp, #16
 8000f36:	4630      	mov	r0, r6
 8000f38:	f000 f880 	bl	800103c <_printf_i>
 8000f3c:	e7e4      	b.n	8000f08 <_vfiprintf_r+0x208>
 8000f3e:	bf00      	nop
 8000f40:	0800190c 	.word	0x0800190c
 8000f44:	0800192c 	.word	0x0800192c
 8000f48:	080018ec 	.word	0x080018ec
 8000f4c:	0800194c 	.word	0x0800194c
 8000f50:	08001956 	.word	0x08001956
 8000f54:	00000000 	.word	0x00000000
 8000f58:	08000cdb 	.word	0x08000cdb
 8000f5c:	08001952 	.word	0x08001952

08000f60 <_printf_common>:
 8000f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f64:	4616      	mov	r6, r2
 8000f66:	4699      	mov	r9, r3
 8000f68:	688a      	ldr	r2, [r1, #8]
 8000f6a:	690b      	ldr	r3, [r1, #16]
 8000f6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f70:	4293      	cmp	r3, r2
 8000f72:	bfb8      	it	lt
 8000f74:	4613      	movlt	r3, r2
 8000f76:	6033      	str	r3, [r6, #0]
 8000f78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f7c:	4607      	mov	r7, r0
 8000f7e:	460c      	mov	r4, r1
 8000f80:	b10a      	cbz	r2, 8000f86 <_printf_common+0x26>
 8000f82:	3301      	adds	r3, #1
 8000f84:	6033      	str	r3, [r6, #0]
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	0699      	lsls	r1, r3, #26
 8000f8a:	bf42      	ittt	mi
 8000f8c:	6833      	ldrmi	r3, [r6, #0]
 8000f8e:	3302      	addmi	r3, #2
 8000f90:	6033      	strmi	r3, [r6, #0]
 8000f92:	6825      	ldr	r5, [r4, #0]
 8000f94:	f015 0506 	ands.w	r5, r5, #6
 8000f98:	d106      	bne.n	8000fa8 <_printf_common+0x48>
 8000f9a:	f104 0a19 	add.w	sl, r4, #25
 8000f9e:	68e3      	ldr	r3, [r4, #12]
 8000fa0:	6832      	ldr	r2, [r6, #0]
 8000fa2:	1a9b      	subs	r3, r3, r2
 8000fa4:	42ab      	cmp	r3, r5
 8000fa6:	dc26      	bgt.n	8000ff6 <_printf_common+0x96>
 8000fa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000fac:	1e13      	subs	r3, r2, #0
 8000fae:	6822      	ldr	r2, [r4, #0]
 8000fb0:	bf18      	it	ne
 8000fb2:	2301      	movne	r3, #1
 8000fb4:	0692      	lsls	r2, r2, #26
 8000fb6:	d42b      	bmi.n	8001010 <_printf_common+0xb0>
 8000fb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000fbc:	4649      	mov	r1, r9
 8000fbe:	4638      	mov	r0, r7
 8000fc0:	47c0      	blx	r8
 8000fc2:	3001      	adds	r0, #1
 8000fc4:	d01e      	beq.n	8001004 <_printf_common+0xa4>
 8000fc6:	6823      	ldr	r3, [r4, #0]
 8000fc8:	68e5      	ldr	r5, [r4, #12]
 8000fca:	6832      	ldr	r2, [r6, #0]
 8000fcc:	f003 0306 	and.w	r3, r3, #6
 8000fd0:	2b04      	cmp	r3, #4
 8000fd2:	bf08      	it	eq
 8000fd4:	1aad      	subeq	r5, r5, r2
 8000fd6:	68a3      	ldr	r3, [r4, #8]
 8000fd8:	6922      	ldr	r2, [r4, #16]
 8000fda:	bf0c      	ite	eq
 8000fdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000fe0:	2500      	movne	r5, #0
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	bfc4      	itt	gt
 8000fe6:	1a9b      	subgt	r3, r3, r2
 8000fe8:	18ed      	addgt	r5, r5, r3
 8000fea:	2600      	movs	r6, #0
 8000fec:	341a      	adds	r4, #26
 8000fee:	42b5      	cmp	r5, r6
 8000ff0:	d11a      	bne.n	8001028 <_printf_common+0xc8>
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	e008      	b.n	8001008 <_printf_common+0xa8>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	4652      	mov	r2, sl
 8000ffa:	4649      	mov	r1, r9
 8000ffc:	4638      	mov	r0, r7
 8000ffe:	47c0      	blx	r8
 8001000:	3001      	adds	r0, #1
 8001002:	d103      	bne.n	800100c <_printf_common+0xac>
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100c:	3501      	adds	r5, #1
 800100e:	e7c6      	b.n	8000f9e <_printf_common+0x3e>
 8001010:	18e1      	adds	r1, r4, r3
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	2030      	movs	r0, #48	; 0x30
 8001016:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800101a:	4422      	add	r2, r4
 800101c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001020:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001024:	3302      	adds	r3, #2
 8001026:	e7c7      	b.n	8000fb8 <_printf_common+0x58>
 8001028:	2301      	movs	r3, #1
 800102a:	4622      	mov	r2, r4
 800102c:	4649      	mov	r1, r9
 800102e:	4638      	mov	r0, r7
 8001030:	47c0      	blx	r8
 8001032:	3001      	adds	r0, #1
 8001034:	d0e6      	beq.n	8001004 <_printf_common+0xa4>
 8001036:	3601      	adds	r6, #1
 8001038:	e7d9      	b.n	8000fee <_printf_common+0x8e>
	...

0800103c <_printf_i>:
 800103c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001040:	7e0f      	ldrb	r7, [r1, #24]
 8001042:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001044:	2f78      	cmp	r7, #120	; 0x78
 8001046:	4691      	mov	r9, r2
 8001048:	4680      	mov	r8, r0
 800104a:	460c      	mov	r4, r1
 800104c:	469a      	mov	sl, r3
 800104e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001052:	d807      	bhi.n	8001064 <_printf_i+0x28>
 8001054:	2f62      	cmp	r7, #98	; 0x62
 8001056:	d80a      	bhi.n	800106e <_printf_i+0x32>
 8001058:	2f00      	cmp	r7, #0
 800105a:	f000 80d8 	beq.w	800120e <_printf_i+0x1d2>
 800105e:	2f58      	cmp	r7, #88	; 0x58
 8001060:	f000 80a3 	beq.w	80011aa <_printf_i+0x16e>
 8001064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001068:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800106c:	e03a      	b.n	80010e4 <_printf_i+0xa8>
 800106e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001072:	2b15      	cmp	r3, #21
 8001074:	d8f6      	bhi.n	8001064 <_printf_i+0x28>
 8001076:	a101      	add	r1, pc, #4	; (adr r1, 800107c <_printf_i+0x40>)
 8001078:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800107c:	080010d5 	.word	0x080010d5
 8001080:	080010e9 	.word	0x080010e9
 8001084:	08001065 	.word	0x08001065
 8001088:	08001065 	.word	0x08001065
 800108c:	08001065 	.word	0x08001065
 8001090:	08001065 	.word	0x08001065
 8001094:	080010e9 	.word	0x080010e9
 8001098:	08001065 	.word	0x08001065
 800109c:	08001065 	.word	0x08001065
 80010a0:	08001065 	.word	0x08001065
 80010a4:	08001065 	.word	0x08001065
 80010a8:	080011f5 	.word	0x080011f5
 80010ac:	08001119 	.word	0x08001119
 80010b0:	080011d7 	.word	0x080011d7
 80010b4:	08001065 	.word	0x08001065
 80010b8:	08001065 	.word	0x08001065
 80010bc:	08001217 	.word	0x08001217
 80010c0:	08001065 	.word	0x08001065
 80010c4:	08001119 	.word	0x08001119
 80010c8:	08001065 	.word	0x08001065
 80010cc:	08001065 	.word	0x08001065
 80010d0:	080011df 	.word	0x080011df
 80010d4:	682b      	ldr	r3, [r5, #0]
 80010d6:	1d1a      	adds	r2, r3, #4
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	602a      	str	r2, [r5, #0]
 80010dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80010e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80010e4:	2301      	movs	r3, #1
 80010e6:	e0a3      	b.n	8001230 <_printf_i+0x1f4>
 80010e8:	6820      	ldr	r0, [r4, #0]
 80010ea:	6829      	ldr	r1, [r5, #0]
 80010ec:	0606      	lsls	r6, r0, #24
 80010ee:	f101 0304 	add.w	r3, r1, #4
 80010f2:	d50a      	bpl.n	800110a <_printf_i+0xce>
 80010f4:	680e      	ldr	r6, [r1, #0]
 80010f6:	602b      	str	r3, [r5, #0]
 80010f8:	2e00      	cmp	r6, #0
 80010fa:	da03      	bge.n	8001104 <_printf_i+0xc8>
 80010fc:	232d      	movs	r3, #45	; 0x2d
 80010fe:	4276      	negs	r6, r6
 8001100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001104:	485e      	ldr	r0, [pc, #376]	; (8001280 <_printf_i+0x244>)
 8001106:	230a      	movs	r3, #10
 8001108:	e019      	b.n	800113e <_printf_i+0x102>
 800110a:	680e      	ldr	r6, [r1, #0]
 800110c:	602b      	str	r3, [r5, #0]
 800110e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001112:	bf18      	it	ne
 8001114:	b236      	sxthne	r6, r6
 8001116:	e7ef      	b.n	80010f8 <_printf_i+0xbc>
 8001118:	682b      	ldr	r3, [r5, #0]
 800111a:	6820      	ldr	r0, [r4, #0]
 800111c:	1d19      	adds	r1, r3, #4
 800111e:	6029      	str	r1, [r5, #0]
 8001120:	0601      	lsls	r1, r0, #24
 8001122:	d501      	bpl.n	8001128 <_printf_i+0xec>
 8001124:	681e      	ldr	r6, [r3, #0]
 8001126:	e002      	b.n	800112e <_printf_i+0xf2>
 8001128:	0646      	lsls	r6, r0, #25
 800112a:	d5fb      	bpl.n	8001124 <_printf_i+0xe8>
 800112c:	881e      	ldrh	r6, [r3, #0]
 800112e:	4854      	ldr	r0, [pc, #336]	; (8001280 <_printf_i+0x244>)
 8001130:	2f6f      	cmp	r7, #111	; 0x6f
 8001132:	bf0c      	ite	eq
 8001134:	2308      	moveq	r3, #8
 8001136:	230a      	movne	r3, #10
 8001138:	2100      	movs	r1, #0
 800113a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800113e:	6865      	ldr	r5, [r4, #4]
 8001140:	60a5      	str	r5, [r4, #8]
 8001142:	2d00      	cmp	r5, #0
 8001144:	bfa2      	ittt	ge
 8001146:	6821      	ldrge	r1, [r4, #0]
 8001148:	f021 0104 	bicge.w	r1, r1, #4
 800114c:	6021      	strge	r1, [r4, #0]
 800114e:	b90e      	cbnz	r6, 8001154 <_printf_i+0x118>
 8001150:	2d00      	cmp	r5, #0
 8001152:	d04d      	beq.n	80011f0 <_printf_i+0x1b4>
 8001154:	4615      	mov	r5, r2
 8001156:	fbb6 f1f3 	udiv	r1, r6, r3
 800115a:	fb03 6711 	mls	r7, r3, r1, r6
 800115e:	5dc7      	ldrb	r7, [r0, r7]
 8001160:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001164:	4637      	mov	r7, r6
 8001166:	42bb      	cmp	r3, r7
 8001168:	460e      	mov	r6, r1
 800116a:	d9f4      	bls.n	8001156 <_printf_i+0x11a>
 800116c:	2b08      	cmp	r3, #8
 800116e:	d10b      	bne.n	8001188 <_printf_i+0x14c>
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	07de      	lsls	r6, r3, #31
 8001174:	d508      	bpl.n	8001188 <_printf_i+0x14c>
 8001176:	6923      	ldr	r3, [r4, #16]
 8001178:	6861      	ldr	r1, [r4, #4]
 800117a:	4299      	cmp	r1, r3
 800117c:	bfde      	ittt	le
 800117e:	2330      	movle	r3, #48	; 0x30
 8001180:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001184:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001188:	1b52      	subs	r2, r2, r5
 800118a:	6122      	str	r2, [r4, #16]
 800118c:	f8cd a000 	str.w	sl, [sp]
 8001190:	464b      	mov	r3, r9
 8001192:	aa03      	add	r2, sp, #12
 8001194:	4621      	mov	r1, r4
 8001196:	4640      	mov	r0, r8
 8001198:	f7ff fee2 	bl	8000f60 <_printf_common>
 800119c:	3001      	adds	r0, #1
 800119e:	d14c      	bne.n	800123a <_printf_i+0x1fe>
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	b004      	add	sp, #16
 80011a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011aa:	4835      	ldr	r0, [pc, #212]	; (8001280 <_printf_i+0x244>)
 80011ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80011b0:	6829      	ldr	r1, [r5, #0]
 80011b2:	6823      	ldr	r3, [r4, #0]
 80011b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80011b8:	6029      	str	r1, [r5, #0]
 80011ba:	061d      	lsls	r5, r3, #24
 80011bc:	d514      	bpl.n	80011e8 <_printf_i+0x1ac>
 80011be:	07df      	lsls	r7, r3, #31
 80011c0:	bf44      	itt	mi
 80011c2:	f043 0320 	orrmi.w	r3, r3, #32
 80011c6:	6023      	strmi	r3, [r4, #0]
 80011c8:	b91e      	cbnz	r6, 80011d2 <_printf_i+0x196>
 80011ca:	6823      	ldr	r3, [r4, #0]
 80011cc:	f023 0320 	bic.w	r3, r3, #32
 80011d0:	6023      	str	r3, [r4, #0]
 80011d2:	2310      	movs	r3, #16
 80011d4:	e7b0      	b.n	8001138 <_printf_i+0xfc>
 80011d6:	6823      	ldr	r3, [r4, #0]
 80011d8:	f043 0320 	orr.w	r3, r3, #32
 80011dc:	6023      	str	r3, [r4, #0]
 80011de:	2378      	movs	r3, #120	; 0x78
 80011e0:	4828      	ldr	r0, [pc, #160]	; (8001284 <_printf_i+0x248>)
 80011e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80011e6:	e7e3      	b.n	80011b0 <_printf_i+0x174>
 80011e8:	0659      	lsls	r1, r3, #25
 80011ea:	bf48      	it	mi
 80011ec:	b2b6      	uxthmi	r6, r6
 80011ee:	e7e6      	b.n	80011be <_printf_i+0x182>
 80011f0:	4615      	mov	r5, r2
 80011f2:	e7bb      	b.n	800116c <_printf_i+0x130>
 80011f4:	682b      	ldr	r3, [r5, #0]
 80011f6:	6826      	ldr	r6, [r4, #0]
 80011f8:	6961      	ldr	r1, [r4, #20]
 80011fa:	1d18      	adds	r0, r3, #4
 80011fc:	6028      	str	r0, [r5, #0]
 80011fe:	0635      	lsls	r5, r6, #24
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	d501      	bpl.n	8001208 <_printf_i+0x1cc>
 8001204:	6019      	str	r1, [r3, #0]
 8001206:	e002      	b.n	800120e <_printf_i+0x1d2>
 8001208:	0670      	lsls	r0, r6, #25
 800120a:	d5fb      	bpl.n	8001204 <_printf_i+0x1c8>
 800120c:	8019      	strh	r1, [r3, #0]
 800120e:	2300      	movs	r3, #0
 8001210:	6123      	str	r3, [r4, #16]
 8001212:	4615      	mov	r5, r2
 8001214:	e7ba      	b.n	800118c <_printf_i+0x150>
 8001216:	682b      	ldr	r3, [r5, #0]
 8001218:	1d1a      	adds	r2, r3, #4
 800121a:	602a      	str	r2, [r5, #0]
 800121c:	681d      	ldr	r5, [r3, #0]
 800121e:	6862      	ldr	r2, [r4, #4]
 8001220:	2100      	movs	r1, #0
 8001222:	4628      	mov	r0, r5
 8001224:	f7fe fff4 	bl	8000210 <memchr>
 8001228:	b108      	cbz	r0, 800122e <_printf_i+0x1f2>
 800122a:	1b40      	subs	r0, r0, r5
 800122c:	6060      	str	r0, [r4, #4]
 800122e:	6863      	ldr	r3, [r4, #4]
 8001230:	6123      	str	r3, [r4, #16]
 8001232:	2300      	movs	r3, #0
 8001234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001238:	e7a8      	b.n	800118c <_printf_i+0x150>
 800123a:	6923      	ldr	r3, [r4, #16]
 800123c:	462a      	mov	r2, r5
 800123e:	4649      	mov	r1, r9
 8001240:	4640      	mov	r0, r8
 8001242:	47d0      	blx	sl
 8001244:	3001      	adds	r0, #1
 8001246:	d0ab      	beq.n	80011a0 <_printf_i+0x164>
 8001248:	6823      	ldr	r3, [r4, #0]
 800124a:	079b      	lsls	r3, r3, #30
 800124c:	d413      	bmi.n	8001276 <_printf_i+0x23a>
 800124e:	68e0      	ldr	r0, [r4, #12]
 8001250:	9b03      	ldr	r3, [sp, #12]
 8001252:	4298      	cmp	r0, r3
 8001254:	bfb8      	it	lt
 8001256:	4618      	movlt	r0, r3
 8001258:	e7a4      	b.n	80011a4 <_printf_i+0x168>
 800125a:	2301      	movs	r3, #1
 800125c:	4632      	mov	r2, r6
 800125e:	4649      	mov	r1, r9
 8001260:	4640      	mov	r0, r8
 8001262:	47d0      	blx	sl
 8001264:	3001      	adds	r0, #1
 8001266:	d09b      	beq.n	80011a0 <_printf_i+0x164>
 8001268:	3501      	adds	r5, #1
 800126a:	68e3      	ldr	r3, [r4, #12]
 800126c:	9903      	ldr	r1, [sp, #12]
 800126e:	1a5b      	subs	r3, r3, r1
 8001270:	42ab      	cmp	r3, r5
 8001272:	dcf2      	bgt.n	800125a <_printf_i+0x21e>
 8001274:	e7eb      	b.n	800124e <_printf_i+0x212>
 8001276:	2500      	movs	r5, #0
 8001278:	f104 0619 	add.w	r6, r4, #25
 800127c:	e7f5      	b.n	800126a <_printf_i+0x22e>
 800127e:	bf00      	nop
 8001280:	0800195d 	.word	0x0800195d
 8001284:	0800196e 	.word	0x0800196e

08001288 <_sbrk_r>:
 8001288:	b538      	push	{r3, r4, r5, lr}
 800128a:	4d06      	ldr	r5, [pc, #24]	; (80012a4 <_sbrk_r+0x1c>)
 800128c:	2300      	movs	r3, #0
 800128e:	4604      	mov	r4, r0
 8001290:	4608      	mov	r0, r1
 8001292:	602b      	str	r3, [r5, #0]
 8001294:	f7ff fad4 	bl	8000840 <_sbrk>
 8001298:	1c43      	adds	r3, r0, #1
 800129a:	d102      	bne.n	80012a2 <_sbrk_r+0x1a>
 800129c:	682b      	ldr	r3, [r5, #0]
 800129e:	b103      	cbz	r3, 80012a2 <_sbrk_r+0x1a>
 80012a0:	6023      	str	r3, [r4, #0]
 80012a2:	bd38      	pop	{r3, r4, r5, pc}
 80012a4:	20000090 	.word	0x20000090

080012a8 <__sread>:
 80012a8:	b510      	push	{r4, lr}
 80012aa:	460c      	mov	r4, r1
 80012ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012b0:	f000 fab2 	bl	8001818 <_read_r>
 80012b4:	2800      	cmp	r0, #0
 80012b6:	bfab      	itete	ge
 80012b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80012ba:	89a3      	ldrhlt	r3, [r4, #12]
 80012bc:	181b      	addge	r3, r3, r0
 80012be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80012c2:	bfac      	ite	ge
 80012c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80012c6:	81a3      	strhlt	r3, [r4, #12]
 80012c8:	bd10      	pop	{r4, pc}

080012ca <__swrite>:
 80012ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012ce:	461f      	mov	r7, r3
 80012d0:	898b      	ldrh	r3, [r1, #12]
 80012d2:	05db      	lsls	r3, r3, #23
 80012d4:	4605      	mov	r5, r0
 80012d6:	460c      	mov	r4, r1
 80012d8:	4616      	mov	r6, r2
 80012da:	d505      	bpl.n	80012e8 <__swrite+0x1e>
 80012dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012e0:	2302      	movs	r3, #2
 80012e2:	2200      	movs	r2, #0
 80012e4:	f000 f9c8 	bl	8001678 <_lseek_r>
 80012e8:	89a3      	ldrh	r3, [r4, #12]
 80012ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012f2:	81a3      	strh	r3, [r4, #12]
 80012f4:	4632      	mov	r2, r6
 80012f6:	463b      	mov	r3, r7
 80012f8:	4628      	mov	r0, r5
 80012fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012fe:	f000 b869 	b.w	80013d4 <_write_r>

08001302 <__sseek>:
 8001302:	b510      	push	{r4, lr}
 8001304:	460c      	mov	r4, r1
 8001306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800130a:	f000 f9b5 	bl	8001678 <_lseek_r>
 800130e:	1c43      	adds	r3, r0, #1
 8001310:	89a3      	ldrh	r3, [r4, #12]
 8001312:	bf15      	itete	ne
 8001314:	6560      	strne	r0, [r4, #84]	; 0x54
 8001316:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800131a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800131e:	81a3      	strheq	r3, [r4, #12]
 8001320:	bf18      	it	ne
 8001322:	81a3      	strhne	r3, [r4, #12]
 8001324:	bd10      	pop	{r4, pc}

08001326 <__sclose>:
 8001326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800132a:	f000 b8d3 	b.w	80014d4 <_close_r>
	...

08001330 <__swbuf_r>:
 8001330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001332:	460e      	mov	r6, r1
 8001334:	4614      	mov	r4, r2
 8001336:	4605      	mov	r5, r0
 8001338:	b118      	cbz	r0, 8001342 <__swbuf_r+0x12>
 800133a:	6983      	ldr	r3, [r0, #24]
 800133c:	b90b      	cbnz	r3, 8001342 <__swbuf_r+0x12>
 800133e:	f7ff fb81 	bl	8000a44 <__sinit>
 8001342:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <__swbuf_r+0x98>)
 8001344:	429c      	cmp	r4, r3
 8001346:	d12b      	bne.n	80013a0 <__swbuf_r+0x70>
 8001348:	686c      	ldr	r4, [r5, #4]
 800134a:	69a3      	ldr	r3, [r4, #24]
 800134c:	60a3      	str	r3, [r4, #8]
 800134e:	89a3      	ldrh	r3, [r4, #12]
 8001350:	071a      	lsls	r2, r3, #28
 8001352:	d52f      	bpl.n	80013b4 <__swbuf_r+0x84>
 8001354:	6923      	ldr	r3, [r4, #16]
 8001356:	b36b      	cbz	r3, 80013b4 <__swbuf_r+0x84>
 8001358:	6923      	ldr	r3, [r4, #16]
 800135a:	6820      	ldr	r0, [r4, #0]
 800135c:	1ac0      	subs	r0, r0, r3
 800135e:	6963      	ldr	r3, [r4, #20]
 8001360:	b2f6      	uxtb	r6, r6
 8001362:	4283      	cmp	r3, r0
 8001364:	4637      	mov	r7, r6
 8001366:	dc04      	bgt.n	8001372 <__swbuf_r+0x42>
 8001368:	4621      	mov	r1, r4
 800136a:	4628      	mov	r0, r5
 800136c:	f000 f948 	bl	8001600 <_fflush_r>
 8001370:	bb30      	cbnz	r0, 80013c0 <__swbuf_r+0x90>
 8001372:	68a3      	ldr	r3, [r4, #8]
 8001374:	3b01      	subs	r3, #1
 8001376:	60a3      	str	r3, [r4, #8]
 8001378:	6823      	ldr	r3, [r4, #0]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	6022      	str	r2, [r4, #0]
 800137e:	701e      	strb	r6, [r3, #0]
 8001380:	6963      	ldr	r3, [r4, #20]
 8001382:	3001      	adds	r0, #1
 8001384:	4283      	cmp	r3, r0
 8001386:	d004      	beq.n	8001392 <__swbuf_r+0x62>
 8001388:	89a3      	ldrh	r3, [r4, #12]
 800138a:	07db      	lsls	r3, r3, #31
 800138c:	d506      	bpl.n	800139c <__swbuf_r+0x6c>
 800138e:	2e0a      	cmp	r6, #10
 8001390:	d104      	bne.n	800139c <__swbuf_r+0x6c>
 8001392:	4621      	mov	r1, r4
 8001394:	4628      	mov	r0, r5
 8001396:	f000 f933 	bl	8001600 <_fflush_r>
 800139a:	b988      	cbnz	r0, 80013c0 <__swbuf_r+0x90>
 800139c:	4638      	mov	r0, r7
 800139e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <__swbuf_r+0x9c>)
 80013a2:	429c      	cmp	r4, r3
 80013a4:	d101      	bne.n	80013aa <__swbuf_r+0x7a>
 80013a6:	68ac      	ldr	r4, [r5, #8]
 80013a8:	e7cf      	b.n	800134a <__swbuf_r+0x1a>
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <__swbuf_r+0xa0>)
 80013ac:	429c      	cmp	r4, r3
 80013ae:	bf08      	it	eq
 80013b0:	68ec      	ldreq	r4, [r5, #12]
 80013b2:	e7ca      	b.n	800134a <__swbuf_r+0x1a>
 80013b4:	4621      	mov	r1, r4
 80013b6:	4628      	mov	r0, r5
 80013b8:	f000 f81e 	bl	80013f8 <__swsetup_r>
 80013bc:	2800      	cmp	r0, #0
 80013be:	d0cb      	beq.n	8001358 <__swbuf_r+0x28>
 80013c0:	f04f 37ff 	mov.w	r7, #4294967295
 80013c4:	e7ea      	b.n	800139c <__swbuf_r+0x6c>
 80013c6:	bf00      	nop
 80013c8:	0800190c 	.word	0x0800190c
 80013cc:	0800192c 	.word	0x0800192c
 80013d0:	080018ec 	.word	0x080018ec

080013d4 <_write_r>:
 80013d4:	b538      	push	{r3, r4, r5, lr}
 80013d6:	4d07      	ldr	r5, [pc, #28]	; (80013f4 <_write_r+0x20>)
 80013d8:	4604      	mov	r4, r0
 80013da:	4608      	mov	r0, r1
 80013dc:	4611      	mov	r1, r2
 80013de:	2200      	movs	r2, #0
 80013e0:	602a      	str	r2, [r5, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	f7ff f9db 	bl	800079e <_write>
 80013e8:	1c43      	adds	r3, r0, #1
 80013ea:	d102      	bne.n	80013f2 <_write_r+0x1e>
 80013ec:	682b      	ldr	r3, [r5, #0]
 80013ee:	b103      	cbz	r3, 80013f2 <_write_r+0x1e>
 80013f0:	6023      	str	r3, [r4, #0]
 80013f2:	bd38      	pop	{r3, r4, r5, pc}
 80013f4:	20000090 	.word	0x20000090

080013f8 <__swsetup_r>:
 80013f8:	4b32      	ldr	r3, [pc, #200]	; (80014c4 <__swsetup_r+0xcc>)
 80013fa:	b570      	push	{r4, r5, r6, lr}
 80013fc:	681d      	ldr	r5, [r3, #0]
 80013fe:	4606      	mov	r6, r0
 8001400:	460c      	mov	r4, r1
 8001402:	b125      	cbz	r5, 800140e <__swsetup_r+0x16>
 8001404:	69ab      	ldr	r3, [r5, #24]
 8001406:	b913      	cbnz	r3, 800140e <__swsetup_r+0x16>
 8001408:	4628      	mov	r0, r5
 800140a:	f7ff fb1b 	bl	8000a44 <__sinit>
 800140e:	4b2e      	ldr	r3, [pc, #184]	; (80014c8 <__swsetup_r+0xd0>)
 8001410:	429c      	cmp	r4, r3
 8001412:	d10f      	bne.n	8001434 <__swsetup_r+0x3c>
 8001414:	686c      	ldr	r4, [r5, #4]
 8001416:	89a3      	ldrh	r3, [r4, #12]
 8001418:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800141c:	0719      	lsls	r1, r3, #28
 800141e:	d42c      	bmi.n	800147a <__swsetup_r+0x82>
 8001420:	06dd      	lsls	r5, r3, #27
 8001422:	d411      	bmi.n	8001448 <__swsetup_r+0x50>
 8001424:	2309      	movs	r3, #9
 8001426:	6033      	str	r3, [r6, #0]
 8001428:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800142c:	81a3      	strh	r3, [r4, #12]
 800142e:	f04f 30ff 	mov.w	r0, #4294967295
 8001432:	e03e      	b.n	80014b2 <__swsetup_r+0xba>
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <__swsetup_r+0xd4>)
 8001436:	429c      	cmp	r4, r3
 8001438:	d101      	bne.n	800143e <__swsetup_r+0x46>
 800143a:	68ac      	ldr	r4, [r5, #8]
 800143c:	e7eb      	b.n	8001416 <__swsetup_r+0x1e>
 800143e:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <__swsetup_r+0xd8>)
 8001440:	429c      	cmp	r4, r3
 8001442:	bf08      	it	eq
 8001444:	68ec      	ldreq	r4, [r5, #12]
 8001446:	e7e6      	b.n	8001416 <__swsetup_r+0x1e>
 8001448:	0758      	lsls	r0, r3, #29
 800144a:	d512      	bpl.n	8001472 <__swsetup_r+0x7a>
 800144c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800144e:	b141      	cbz	r1, 8001462 <__swsetup_r+0x6a>
 8001450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001454:	4299      	cmp	r1, r3
 8001456:	d002      	beq.n	800145e <__swsetup_r+0x66>
 8001458:	4630      	mov	r0, r6
 800145a:	f000 f991 	bl	8001780 <_free_r>
 800145e:	2300      	movs	r3, #0
 8001460:	6363      	str	r3, [r4, #52]	; 0x34
 8001462:	89a3      	ldrh	r3, [r4, #12]
 8001464:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001468:	81a3      	strh	r3, [r4, #12]
 800146a:	2300      	movs	r3, #0
 800146c:	6063      	str	r3, [r4, #4]
 800146e:	6923      	ldr	r3, [r4, #16]
 8001470:	6023      	str	r3, [r4, #0]
 8001472:	89a3      	ldrh	r3, [r4, #12]
 8001474:	f043 0308 	orr.w	r3, r3, #8
 8001478:	81a3      	strh	r3, [r4, #12]
 800147a:	6923      	ldr	r3, [r4, #16]
 800147c:	b94b      	cbnz	r3, 8001492 <__swsetup_r+0x9a>
 800147e:	89a3      	ldrh	r3, [r4, #12]
 8001480:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001488:	d003      	beq.n	8001492 <__swsetup_r+0x9a>
 800148a:	4621      	mov	r1, r4
 800148c:	4630      	mov	r0, r6
 800148e:	f000 f92b 	bl	80016e8 <__smakebuf_r>
 8001492:	89a0      	ldrh	r0, [r4, #12]
 8001494:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001498:	f010 0301 	ands.w	r3, r0, #1
 800149c:	d00a      	beq.n	80014b4 <__swsetup_r+0xbc>
 800149e:	2300      	movs	r3, #0
 80014a0:	60a3      	str	r3, [r4, #8]
 80014a2:	6963      	ldr	r3, [r4, #20]
 80014a4:	425b      	negs	r3, r3
 80014a6:	61a3      	str	r3, [r4, #24]
 80014a8:	6923      	ldr	r3, [r4, #16]
 80014aa:	b943      	cbnz	r3, 80014be <__swsetup_r+0xc6>
 80014ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80014b0:	d1ba      	bne.n	8001428 <__swsetup_r+0x30>
 80014b2:	bd70      	pop	{r4, r5, r6, pc}
 80014b4:	0781      	lsls	r1, r0, #30
 80014b6:	bf58      	it	pl
 80014b8:	6963      	ldrpl	r3, [r4, #20]
 80014ba:	60a3      	str	r3, [r4, #8]
 80014bc:	e7f4      	b.n	80014a8 <__swsetup_r+0xb0>
 80014be:	2000      	movs	r0, #0
 80014c0:	e7f7      	b.n	80014b2 <__swsetup_r+0xba>
 80014c2:	bf00      	nop
 80014c4:	20000000 	.word	0x20000000
 80014c8:	0800190c 	.word	0x0800190c
 80014cc:	0800192c 	.word	0x0800192c
 80014d0:	080018ec 	.word	0x080018ec

080014d4 <_close_r>:
 80014d4:	b538      	push	{r3, r4, r5, lr}
 80014d6:	4d06      	ldr	r5, [pc, #24]	; (80014f0 <_close_r+0x1c>)
 80014d8:	2300      	movs	r3, #0
 80014da:	4604      	mov	r4, r0
 80014dc:	4608      	mov	r0, r1
 80014de:	602b      	str	r3, [r5, #0]
 80014e0:	f7ff f979 	bl	80007d6 <_close>
 80014e4:	1c43      	adds	r3, r0, #1
 80014e6:	d102      	bne.n	80014ee <_close_r+0x1a>
 80014e8:	682b      	ldr	r3, [r5, #0]
 80014ea:	b103      	cbz	r3, 80014ee <_close_r+0x1a>
 80014ec:	6023      	str	r3, [r4, #0]
 80014ee:	bd38      	pop	{r3, r4, r5, pc}
 80014f0:	20000090 	.word	0x20000090

080014f4 <__sflush_r>:
 80014f4:	898a      	ldrh	r2, [r1, #12]
 80014f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014fa:	4605      	mov	r5, r0
 80014fc:	0710      	lsls	r0, r2, #28
 80014fe:	460c      	mov	r4, r1
 8001500:	d458      	bmi.n	80015b4 <__sflush_r+0xc0>
 8001502:	684b      	ldr	r3, [r1, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	dc05      	bgt.n	8001514 <__sflush_r+0x20>
 8001508:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800150a:	2b00      	cmp	r3, #0
 800150c:	dc02      	bgt.n	8001514 <__sflush_r+0x20>
 800150e:	2000      	movs	r0, #0
 8001510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001514:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001516:	2e00      	cmp	r6, #0
 8001518:	d0f9      	beq.n	800150e <__sflush_r+0x1a>
 800151a:	2300      	movs	r3, #0
 800151c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001520:	682f      	ldr	r7, [r5, #0]
 8001522:	602b      	str	r3, [r5, #0]
 8001524:	d032      	beq.n	800158c <__sflush_r+0x98>
 8001526:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001528:	89a3      	ldrh	r3, [r4, #12]
 800152a:	075a      	lsls	r2, r3, #29
 800152c:	d505      	bpl.n	800153a <__sflush_r+0x46>
 800152e:	6863      	ldr	r3, [r4, #4]
 8001530:	1ac0      	subs	r0, r0, r3
 8001532:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001534:	b10b      	cbz	r3, 800153a <__sflush_r+0x46>
 8001536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001538:	1ac0      	subs	r0, r0, r3
 800153a:	2300      	movs	r3, #0
 800153c:	4602      	mov	r2, r0
 800153e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001540:	6a21      	ldr	r1, [r4, #32]
 8001542:	4628      	mov	r0, r5
 8001544:	47b0      	blx	r6
 8001546:	1c43      	adds	r3, r0, #1
 8001548:	89a3      	ldrh	r3, [r4, #12]
 800154a:	d106      	bne.n	800155a <__sflush_r+0x66>
 800154c:	6829      	ldr	r1, [r5, #0]
 800154e:	291d      	cmp	r1, #29
 8001550:	d82c      	bhi.n	80015ac <__sflush_r+0xb8>
 8001552:	4a2a      	ldr	r2, [pc, #168]	; (80015fc <__sflush_r+0x108>)
 8001554:	40ca      	lsrs	r2, r1
 8001556:	07d6      	lsls	r6, r2, #31
 8001558:	d528      	bpl.n	80015ac <__sflush_r+0xb8>
 800155a:	2200      	movs	r2, #0
 800155c:	6062      	str	r2, [r4, #4]
 800155e:	04d9      	lsls	r1, r3, #19
 8001560:	6922      	ldr	r2, [r4, #16]
 8001562:	6022      	str	r2, [r4, #0]
 8001564:	d504      	bpl.n	8001570 <__sflush_r+0x7c>
 8001566:	1c42      	adds	r2, r0, #1
 8001568:	d101      	bne.n	800156e <__sflush_r+0x7a>
 800156a:	682b      	ldr	r3, [r5, #0]
 800156c:	b903      	cbnz	r3, 8001570 <__sflush_r+0x7c>
 800156e:	6560      	str	r0, [r4, #84]	; 0x54
 8001570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001572:	602f      	str	r7, [r5, #0]
 8001574:	2900      	cmp	r1, #0
 8001576:	d0ca      	beq.n	800150e <__sflush_r+0x1a>
 8001578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800157c:	4299      	cmp	r1, r3
 800157e:	d002      	beq.n	8001586 <__sflush_r+0x92>
 8001580:	4628      	mov	r0, r5
 8001582:	f000 f8fd 	bl	8001780 <_free_r>
 8001586:	2000      	movs	r0, #0
 8001588:	6360      	str	r0, [r4, #52]	; 0x34
 800158a:	e7c1      	b.n	8001510 <__sflush_r+0x1c>
 800158c:	6a21      	ldr	r1, [r4, #32]
 800158e:	2301      	movs	r3, #1
 8001590:	4628      	mov	r0, r5
 8001592:	47b0      	blx	r6
 8001594:	1c41      	adds	r1, r0, #1
 8001596:	d1c7      	bne.n	8001528 <__sflush_r+0x34>
 8001598:	682b      	ldr	r3, [r5, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0c4      	beq.n	8001528 <__sflush_r+0x34>
 800159e:	2b1d      	cmp	r3, #29
 80015a0:	d001      	beq.n	80015a6 <__sflush_r+0xb2>
 80015a2:	2b16      	cmp	r3, #22
 80015a4:	d101      	bne.n	80015aa <__sflush_r+0xb6>
 80015a6:	602f      	str	r7, [r5, #0]
 80015a8:	e7b1      	b.n	800150e <__sflush_r+0x1a>
 80015aa:	89a3      	ldrh	r3, [r4, #12]
 80015ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015b0:	81a3      	strh	r3, [r4, #12]
 80015b2:	e7ad      	b.n	8001510 <__sflush_r+0x1c>
 80015b4:	690f      	ldr	r7, [r1, #16]
 80015b6:	2f00      	cmp	r7, #0
 80015b8:	d0a9      	beq.n	800150e <__sflush_r+0x1a>
 80015ba:	0793      	lsls	r3, r2, #30
 80015bc:	680e      	ldr	r6, [r1, #0]
 80015be:	bf08      	it	eq
 80015c0:	694b      	ldreq	r3, [r1, #20]
 80015c2:	600f      	str	r7, [r1, #0]
 80015c4:	bf18      	it	ne
 80015c6:	2300      	movne	r3, #0
 80015c8:	eba6 0807 	sub.w	r8, r6, r7
 80015cc:	608b      	str	r3, [r1, #8]
 80015ce:	f1b8 0f00 	cmp.w	r8, #0
 80015d2:	dd9c      	ble.n	800150e <__sflush_r+0x1a>
 80015d4:	6a21      	ldr	r1, [r4, #32]
 80015d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80015d8:	4643      	mov	r3, r8
 80015da:	463a      	mov	r2, r7
 80015dc:	4628      	mov	r0, r5
 80015de:	47b0      	blx	r6
 80015e0:	2800      	cmp	r0, #0
 80015e2:	dc06      	bgt.n	80015f2 <__sflush_r+0xfe>
 80015e4:	89a3      	ldrh	r3, [r4, #12]
 80015e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015ea:	81a3      	strh	r3, [r4, #12]
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	e78e      	b.n	8001510 <__sflush_r+0x1c>
 80015f2:	4407      	add	r7, r0
 80015f4:	eba8 0800 	sub.w	r8, r8, r0
 80015f8:	e7e9      	b.n	80015ce <__sflush_r+0xda>
 80015fa:	bf00      	nop
 80015fc:	20400001 	.word	0x20400001

08001600 <_fflush_r>:
 8001600:	b538      	push	{r3, r4, r5, lr}
 8001602:	690b      	ldr	r3, [r1, #16]
 8001604:	4605      	mov	r5, r0
 8001606:	460c      	mov	r4, r1
 8001608:	b913      	cbnz	r3, 8001610 <_fflush_r+0x10>
 800160a:	2500      	movs	r5, #0
 800160c:	4628      	mov	r0, r5
 800160e:	bd38      	pop	{r3, r4, r5, pc}
 8001610:	b118      	cbz	r0, 800161a <_fflush_r+0x1a>
 8001612:	6983      	ldr	r3, [r0, #24]
 8001614:	b90b      	cbnz	r3, 800161a <_fflush_r+0x1a>
 8001616:	f7ff fa15 	bl	8000a44 <__sinit>
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <_fflush_r+0x6c>)
 800161c:	429c      	cmp	r4, r3
 800161e:	d11b      	bne.n	8001658 <_fflush_r+0x58>
 8001620:	686c      	ldr	r4, [r5, #4]
 8001622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0ef      	beq.n	800160a <_fflush_r+0xa>
 800162a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800162c:	07d0      	lsls	r0, r2, #31
 800162e:	d404      	bmi.n	800163a <_fflush_r+0x3a>
 8001630:	0599      	lsls	r1, r3, #22
 8001632:	d402      	bmi.n	800163a <_fflush_r+0x3a>
 8001634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001636:	f7ff faa3 	bl	8000b80 <__retarget_lock_acquire_recursive>
 800163a:	4628      	mov	r0, r5
 800163c:	4621      	mov	r1, r4
 800163e:	f7ff ff59 	bl	80014f4 <__sflush_r>
 8001642:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001644:	07da      	lsls	r2, r3, #31
 8001646:	4605      	mov	r5, r0
 8001648:	d4e0      	bmi.n	800160c <_fflush_r+0xc>
 800164a:	89a3      	ldrh	r3, [r4, #12]
 800164c:	059b      	lsls	r3, r3, #22
 800164e:	d4dd      	bmi.n	800160c <_fflush_r+0xc>
 8001650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001652:	f7ff fa96 	bl	8000b82 <__retarget_lock_release_recursive>
 8001656:	e7d9      	b.n	800160c <_fflush_r+0xc>
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <_fflush_r+0x70>)
 800165a:	429c      	cmp	r4, r3
 800165c:	d101      	bne.n	8001662 <_fflush_r+0x62>
 800165e:	68ac      	ldr	r4, [r5, #8]
 8001660:	e7df      	b.n	8001622 <_fflush_r+0x22>
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <_fflush_r+0x74>)
 8001664:	429c      	cmp	r4, r3
 8001666:	bf08      	it	eq
 8001668:	68ec      	ldreq	r4, [r5, #12]
 800166a:	e7da      	b.n	8001622 <_fflush_r+0x22>
 800166c:	0800190c 	.word	0x0800190c
 8001670:	0800192c 	.word	0x0800192c
 8001674:	080018ec 	.word	0x080018ec

08001678 <_lseek_r>:
 8001678:	b538      	push	{r3, r4, r5, lr}
 800167a:	4d07      	ldr	r5, [pc, #28]	; (8001698 <_lseek_r+0x20>)
 800167c:	4604      	mov	r4, r0
 800167e:	4608      	mov	r0, r1
 8001680:	4611      	mov	r1, r2
 8001682:	2200      	movs	r2, #0
 8001684:	602a      	str	r2, [r5, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	f7ff f8cc 	bl	8000824 <_lseek>
 800168c:	1c43      	adds	r3, r0, #1
 800168e:	d102      	bne.n	8001696 <_lseek_r+0x1e>
 8001690:	682b      	ldr	r3, [r5, #0]
 8001692:	b103      	cbz	r3, 8001696 <_lseek_r+0x1e>
 8001694:	6023      	str	r3, [r4, #0]
 8001696:	bd38      	pop	{r3, r4, r5, pc}
 8001698:	20000090 	.word	0x20000090

0800169c <__swhatbuf_r>:
 800169c:	b570      	push	{r4, r5, r6, lr}
 800169e:	460e      	mov	r6, r1
 80016a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016a4:	2900      	cmp	r1, #0
 80016a6:	b096      	sub	sp, #88	; 0x58
 80016a8:	4614      	mov	r4, r2
 80016aa:	461d      	mov	r5, r3
 80016ac:	da08      	bge.n	80016c0 <__swhatbuf_r+0x24>
 80016ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	602a      	str	r2, [r5, #0]
 80016b6:	061a      	lsls	r2, r3, #24
 80016b8:	d410      	bmi.n	80016dc <__swhatbuf_r+0x40>
 80016ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016be:	e00e      	b.n	80016de <__swhatbuf_r+0x42>
 80016c0:	466a      	mov	r2, sp
 80016c2:	f000 f8bb 	bl	800183c <_fstat_r>
 80016c6:	2800      	cmp	r0, #0
 80016c8:	dbf1      	blt.n	80016ae <__swhatbuf_r+0x12>
 80016ca:	9a01      	ldr	r2, [sp, #4]
 80016cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80016d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80016d4:	425a      	negs	r2, r3
 80016d6:	415a      	adcs	r2, r3
 80016d8:	602a      	str	r2, [r5, #0]
 80016da:	e7ee      	b.n	80016ba <__swhatbuf_r+0x1e>
 80016dc:	2340      	movs	r3, #64	; 0x40
 80016de:	2000      	movs	r0, #0
 80016e0:	6023      	str	r3, [r4, #0]
 80016e2:	b016      	add	sp, #88	; 0x58
 80016e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080016e8 <__smakebuf_r>:
 80016e8:	898b      	ldrh	r3, [r1, #12]
 80016ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80016ec:	079d      	lsls	r5, r3, #30
 80016ee:	4606      	mov	r6, r0
 80016f0:	460c      	mov	r4, r1
 80016f2:	d507      	bpl.n	8001704 <__smakebuf_r+0x1c>
 80016f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80016f8:	6023      	str	r3, [r4, #0]
 80016fa:	6123      	str	r3, [r4, #16]
 80016fc:	2301      	movs	r3, #1
 80016fe:	6163      	str	r3, [r4, #20]
 8001700:	b002      	add	sp, #8
 8001702:	bd70      	pop	{r4, r5, r6, pc}
 8001704:	ab01      	add	r3, sp, #4
 8001706:	466a      	mov	r2, sp
 8001708:	f7ff ffc8 	bl	800169c <__swhatbuf_r>
 800170c:	9900      	ldr	r1, [sp, #0]
 800170e:	4605      	mov	r5, r0
 8001710:	4630      	mov	r0, r6
 8001712:	f7ff fa57 	bl	8000bc4 <_malloc_r>
 8001716:	b948      	cbnz	r0, 800172c <__smakebuf_r+0x44>
 8001718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800171c:	059a      	lsls	r2, r3, #22
 800171e:	d4ef      	bmi.n	8001700 <__smakebuf_r+0x18>
 8001720:	f023 0303 	bic.w	r3, r3, #3
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	81a3      	strh	r3, [r4, #12]
 800172a:	e7e3      	b.n	80016f4 <__smakebuf_r+0xc>
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <__smakebuf_r+0x7c>)
 800172e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001730:	89a3      	ldrh	r3, [r4, #12]
 8001732:	6020      	str	r0, [r4, #0]
 8001734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001738:	81a3      	strh	r3, [r4, #12]
 800173a:	9b00      	ldr	r3, [sp, #0]
 800173c:	6163      	str	r3, [r4, #20]
 800173e:	9b01      	ldr	r3, [sp, #4]
 8001740:	6120      	str	r0, [r4, #16]
 8001742:	b15b      	cbz	r3, 800175c <__smakebuf_r+0x74>
 8001744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001748:	4630      	mov	r0, r6
 800174a:	f000 f889 	bl	8001860 <_isatty_r>
 800174e:	b128      	cbz	r0, 800175c <__smakebuf_r+0x74>
 8001750:	89a3      	ldrh	r3, [r4, #12]
 8001752:	f023 0303 	bic.w	r3, r3, #3
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	81a3      	strh	r3, [r4, #12]
 800175c:	89a0      	ldrh	r0, [r4, #12]
 800175e:	4305      	orrs	r5, r0
 8001760:	81a5      	strh	r5, [r4, #12]
 8001762:	e7cd      	b.n	8001700 <__smakebuf_r+0x18>
 8001764:	080009dd 	.word	0x080009dd

08001768 <__malloc_lock>:
 8001768:	4801      	ldr	r0, [pc, #4]	; (8001770 <__malloc_lock+0x8>)
 800176a:	f7ff ba09 	b.w	8000b80 <__retarget_lock_acquire_recursive>
 800176e:	bf00      	nop
 8001770:	20000084 	.word	0x20000084

08001774 <__malloc_unlock>:
 8001774:	4801      	ldr	r0, [pc, #4]	; (800177c <__malloc_unlock+0x8>)
 8001776:	f7ff ba04 	b.w	8000b82 <__retarget_lock_release_recursive>
 800177a:	bf00      	nop
 800177c:	20000084 	.word	0x20000084

08001780 <_free_r>:
 8001780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001782:	2900      	cmp	r1, #0
 8001784:	d044      	beq.n	8001810 <_free_r+0x90>
 8001786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800178a:	9001      	str	r0, [sp, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	f1a1 0404 	sub.w	r4, r1, #4
 8001792:	bfb8      	it	lt
 8001794:	18e4      	addlt	r4, r4, r3
 8001796:	f7ff ffe7 	bl	8001768 <__malloc_lock>
 800179a:	4a1e      	ldr	r2, [pc, #120]	; (8001814 <_free_r+0x94>)
 800179c:	9801      	ldr	r0, [sp, #4]
 800179e:	6813      	ldr	r3, [r2, #0]
 80017a0:	b933      	cbnz	r3, 80017b0 <_free_r+0x30>
 80017a2:	6063      	str	r3, [r4, #4]
 80017a4:	6014      	str	r4, [r2, #0]
 80017a6:	b003      	add	sp, #12
 80017a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80017ac:	f7ff bfe2 	b.w	8001774 <__malloc_unlock>
 80017b0:	42a3      	cmp	r3, r4
 80017b2:	d908      	bls.n	80017c6 <_free_r+0x46>
 80017b4:	6825      	ldr	r5, [r4, #0]
 80017b6:	1961      	adds	r1, r4, r5
 80017b8:	428b      	cmp	r3, r1
 80017ba:	bf01      	itttt	eq
 80017bc:	6819      	ldreq	r1, [r3, #0]
 80017be:	685b      	ldreq	r3, [r3, #4]
 80017c0:	1949      	addeq	r1, r1, r5
 80017c2:	6021      	streq	r1, [r4, #0]
 80017c4:	e7ed      	b.n	80017a2 <_free_r+0x22>
 80017c6:	461a      	mov	r2, r3
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	b10b      	cbz	r3, 80017d0 <_free_r+0x50>
 80017cc:	42a3      	cmp	r3, r4
 80017ce:	d9fa      	bls.n	80017c6 <_free_r+0x46>
 80017d0:	6811      	ldr	r1, [r2, #0]
 80017d2:	1855      	adds	r5, r2, r1
 80017d4:	42a5      	cmp	r5, r4
 80017d6:	d10b      	bne.n	80017f0 <_free_r+0x70>
 80017d8:	6824      	ldr	r4, [r4, #0]
 80017da:	4421      	add	r1, r4
 80017dc:	1854      	adds	r4, r2, r1
 80017de:	42a3      	cmp	r3, r4
 80017e0:	6011      	str	r1, [r2, #0]
 80017e2:	d1e0      	bne.n	80017a6 <_free_r+0x26>
 80017e4:	681c      	ldr	r4, [r3, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	6053      	str	r3, [r2, #4]
 80017ea:	4421      	add	r1, r4
 80017ec:	6011      	str	r1, [r2, #0]
 80017ee:	e7da      	b.n	80017a6 <_free_r+0x26>
 80017f0:	d902      	bls.n	80017f8 <_free_r+0x78>
 80017f2:	230c      	movs	r3, #12
 80017f4:	6003      	str	r3, [r0, #0]
 80017f6:	e7d6      	b.n	80017a6 <_free_r+0x26>
 80017f8:	6825      	ldr	r5, [r4, #0]
 80017fa:	1961      	adds	r1, r4, r5
 80017fc:	428b      	cmp	r3, r1
 80017fe:	bf04      	itt	eq
 8001800:	6819      	ldreq	r1, [r3, #0]
 8001802:	685b      	ldreq	r3, [r3, #4]
 8001804:	6063      	str	r3, [r4, #4]
 8001806:	bf04      	itt	eq
 8001808:	1949      	addeq	r1, r1, r5
 800180a:	6021      	streq	r1, [r4, #0]
 800180c:	6054      	str	r4, [r2, #4]
 800180e:	e7ca      	b.n	80017a6 <_free_r+0x26>
 8001810:	b003      	add	sp, #12
 8001812:	bd30      	pop	{r4, r5, pc}
 8001814:	20000088 	.word	0x20000088

08001818 <_read_r>:
 8001818:	b538      	push	{r3, r4, r5, lr}
 800181a:	4d07      	ldr	r5, [pc, #28]	; (8001838 <_read_r+0x20>)
 800181c:	4604      	mov	r4, r0
 800181e:	4608      	mov	r0, r1
 8001820:	4611      	mov	r1, r2
 8001822:	2200      	movs	r2, #0
 8001824:	602a      	str	r2, [r5, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	f7fe ff9c 	bl	8000764 <_read>
 800182c:	1c43      	adds	r3, r0, #1
 800182e:	d102      	bne.n	8001836 <_read_r+0x1e>
 8001830:	682b      	ldr	r3, [r5, #0]
 8001832:	b103      	cbz	r3, 8001836 <_read_r+0x1e>
 8001834:	6023      	str	r3, [r4, #0]
 8001836:	bd38      	pop	{r3, r4, r5, pc}
 8001838:	20000090 	.word	0x20000090

0800183c <_fstat_r>:
 800183c:	b538      	push	{r3, r4, r5, lr}
 800183e:	4d07      	ldr	r5, [pc, #28]	; (800185c <_fstat_r+0x20>)
 8001840:	2300      	movs	r3, #0
 8001842:	4604      	mov	r4, r0
 8001844:	4608      	mov	r0, r1
 8001846:	4611      	mov	r1, r2
 8001848:	602b      	str	r3, [r5, #0]
 800184a:	f7fe ffd0 	bl	80007ee <_fstat>
 800184e:	1c43      	adds	r3, r0, #1
 8001850:	d102      	bne.n	8001858 <_fstat_r+0x1c>
 8001852:	682b      	ldr	r3, [r5, #0]
 8001854:	b103      	cbz	r3, 8001858 <_fstat_r+0x1c>
 8001856:	6023      	str	r3, [r4, #0]
 8001858:	bd38      	pop	{r3, r4, r5, pc}
 800185a:	bf00      	nop
 800185c:	20000090 	.word	0x20000090

08001860 <_isatty_r>:
 8001860:	b538      	push	{r3, r4, r5, lr}
 8001862:	4d06      	ldr	r5, [pc, #24]	; (800187c <_isatty_r+0x1c>)
 8001864:	2300      	movs	r3, #0
 8001866:	4604      	mov	r4, r0
 8001868:	4608      	mov	r0, r1
 800186a:	602b      	str	r3, [r5, #0]
 800186c:	f7fe ffcf 	bl	800080e <_isatty>
 8001870:	1c43      	adds	r3, r0, #1
 8001872:	d102      	bne.n	800187a <_isatty_r+0x1a>
 8001874:	682b      	ldr	r3, [r5, #0]
 8001876:	b103      	cbz	r3, 800187a <_isatty_r+0x1a>
 8001878:	6023      	str	r3, [r4, #0]
 800187a:	bd38      	pop	{r3, r4, r5, pc}
 800187c:	20000090 	.word	0x20000090

08001880 <_init>:
 8001880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001882:	bf00      	nop
 8001884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001886:	bc08      	pop	{r3}
 8001888:	469e      	mov	lr, r3
 800188a:	4770      	bx	lr

0800188c <_fini>:
 800188c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188e:	bf00      	nop
 8001890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001892:	bc08      	pop	{r3}
 8001894:	469e      	mov	lr, r3
 8001896:	4770      	bx	lr
