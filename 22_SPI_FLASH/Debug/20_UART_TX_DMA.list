
20_UART_TX_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000394  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800055c  0800055c  0001055c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800057c  0800057c  00010584  2**0
                  CONTENTS
  4 .ARM          00000000  0800057c  0800057c  00010584  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800057c  08000584  00010584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800057c  0800057c  0001057c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000580  08000580  00010580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000584  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000584  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010584  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f2c  00000000  00000000  000105b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000035b  00000000  00000000  000114e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  00011840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000098  00000000  00000000  00011900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c6ae  00000000  00000000  00011998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f98  00000000  00000000  0002e046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f10d  00000000  00000000  0002efde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce0eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000204  00000000  00000000  000ce13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000544 	.word	0x08000544

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	08000544 	.word	0x08000544

08000208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	2b00      	cmp	r3, #0
 8000218:	db0b      	blt.n	8000232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	f003 021f 	and.w	r2, r3, #31
 8000220:	4907      	ldr	r1, [pc, #28]	; (8000240 <__NVIC_EnableIRQ+0x38>)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	095b      	lsrs	r3, r3, #5
 8000228:	2001      	movs	r0, #1
 800022a:	fa00 f202 	lsl.w	r2, r0, r2
 800022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	e000e100 	.word	0xe000e100

08000244 <DMA1_stream3_init>:
	uart3_write(ch);
	return ch;
}

void DMA1_stream3_init(uint32_t src, uint32_t dst, uint32_t len)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	60f8      	str	r0, [r7, #12]
 800024c:	60b9      	str	r1, [r7, #8]
 800024e:	607a      	str	r2, [r7, #4]
	//Enable clock access to DMA1
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8000250:	4b27      	ldr	r3, [pc, #156]	; (80002f0 <DMA1_stream3_init+0xac>)
 8000252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000254:	4a26      	ldr	r2, [pc, #152]	; (80002f0 <DMA1_stream3_init+0xac>)
 8000256:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800025a:	6313      	str	r3, [r2, #48]	; 0x30

	//Disable DMA1 stream 3
	DMA1_Stream3->CR &=~ DMA_SxCR_EN;
 800025c:	4b25      	ldr	r3, [pc, #148]	; (80002f4 <DMA1_stream3_init+0xb0>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a24      	ldr	r2, [pc, #144]	; (80002f4 <DMA1_stream3_init+0xb0>)
 8000262:	f023 0301 	bic.w	r3, r3, #1
 8000266:	6013      	str	r3, [r2, #0]

	//wait until stream 3 is disabled
	while(DMA1_Stream3->CR & DMA_SxCR_EN){}
 8000268:	bf00      	nop
 800026a:	4b22      	ldr	r3, [pc, #136]	; (80002f4 <DMA1_stream3_init+0xb0>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f003 0301 	and.w	r3, r3, #1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d1f9      	bne.n	800026a <DMA1_stream3_init+0x26>

	//clear all interrupt flags for stream 3
	DMA1->LIFCR |= DMA_LIFCR_CTCIF3 | DMA_LIFCR_CHTIF3 | DMA_LIFCR_CTEIF3 | DMA_LIFCR_CDMEIF3 | DMA_LIFCR_CFEIF3;
 8000276:	4b20      	ldr	r3, [pc, #128]	; (80002f8 <DMA1_stream3_init+0xb4>)
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	4a1f      	ldr	r2, [pc, #124]	; (80002f8 <DMA1_stream3_init+0xb4>)
 800027c:	f043 6374 	orr.w	r3, r3, #255852544	; 0xf400000
 8000280:	6093      	str	r3, [r2, #8]

	//set the destination buffer
	DMA1_Stream3->PAR = dst;
 8000282:	4a1c      	ldr	r2, [pc, #112]	; (80002f4 <DMA1_stream3_init+0xb0>)
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	6093      	str	r3, [r2, #8]

	//set the source buffer
	DMA1_Stream3->M0AR = src;
 8000288:	4a1a      	ldr	r2, [pc, #104]	; (80002f4 <DMA1_stream3_init+0xb0>)
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	60d3      	str	r3, [r2, #12]

	//set length
	DMA1_Stream3->NDTR = len;
 800028e:	4a19      	ldr	r2, [pc, #100]	; (80002f4 <DMA1_stream3_init+0xb0>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6053      	str	r3, [r2, #4]

	//select stream 3 CH4
	DMA1_Stream3->CR |= 4U << DMA_SxCR_CHSEL_Pos;
 8000294:	4b17      	ldr	r3, [pc, #92]	; (80002f4 <DMA1_stream3_init+0xb0>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a16      	ldr	r2, [pc, #88]	; (80002f4 <DMA1_stream3_init+0xb0>)
 800029a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800029e:	6013      	str	r3, [r2, #0]

	//Enable memory increment
	DMA1_Stream3->CR |= DMA_SxCR_MINC;
 80002a0:	4b14      	ldr	r3, [pc, #80]	; (80002f4 <DMA1_stream3_init+0xb0>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a13      	ldr	r2, [pc, #76]	; (80002f4 <DMA1_stream3_init+0xb0>)
 80002a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002aa:	6013      	str	r3, [r2, #0]

	//configure transfer direction (Memory to Peripheral)
	DMA1_Stream3->CR |= 0b01 << DMA_SxCR_DIR_Pos;
 80002ac:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <DMA1_stream3_init+0xb0>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a10      	ldr	r2, [pc, #64]	; (80002f4 <DMA1_stream3_init+0xb0>)
 80002b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002b6:	6013      	str	r3, [r2, #0]

	//Enable DMA transfer complete interrupt
	DMA1_Stream3->CR |= DMA_SxCR_TCIE;
 80002b8:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <DMA1_stream3_init+0xb0>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a0d      	ldr	r2, [pc, #52]	; (80002f4 <DMA1_stream3_init+0xb0>)
 80002be:	f043 0310 	orr.w	r3, r3, #16
 80002c2:	6013      	str	r3, [r2, #0]

	//Enable direct mode and disable FIFO
	DMA1_Stream3->FCR = 0;
 80002c4:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <DMA1_stream3_init+0xb0>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	615a      	str	r2, [r3, #20]

	//Enable DMA1 stream 3 again
	DMA1_Stream3->CR |= DMA_SxCR_EN;
 80002ca:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <DMA1_stream3_init+0xb0>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a09      	ldr	r2, [pc, #36]	; (80002f4 <DMA1_stream3_init+0xb0>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6013      	str	r3, [r2, #0]

	//Enable UART3 transmitter DMA
	USART3->CR3 |= USART_CR3_DMAT;
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <DMA1_stream3_init+0xb8>)
 80002d8:	689b      	ldr	r3, [r3, #8]
 80002da:	4a08      	ldr	r2, [pc, #32]	; (80002fc <DMA1_stream3_init+0xb8>)
 80002dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002e0:	6093      	str	r3, [r2, #8]

	//DMA interrupt enable in NVIC
	NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80002e2:	200e      	movs	r0, #14
 80002e4:	f7ff ff90 	bl	8000208 <__NVIC_EnableIRQ>
}
 80002e8:	bf00      	nop
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	40023800 	.word	0x40023800
 80002f4:	40026058 	.word	0x40026058
 80002f8:	40026000 	.word	0x40026000
 80002fc:	40004800 	.word	0x40004800

08000300 <uart3_tx_init>:
	/*Enable UART Module*/
	USART3->CR1 |= USART_CR1_UE;
}

void uart3_tx_init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	/******************Configure USART GPIO Pin******************/

	/*Enable GPIOD clock (Pin for USART3_TX is PD8)*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000304:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <uart3_tx_init+0x70>)
 8000306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000308:	4a19      	ldr	r2, [pc, #100]	; (8000370 <uart3_tx_init+0x70>)
 800030a:	f043 0308 	orr.w	r3, r3, #8
 800030e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set pin D8 to alternate function mode*/
	GPIOD->MODER &=~ GPIO_MODER_MODER8_0;
 8000310:	4b18      	ldr	r3, [pc, #96]	; (8000374 <uart3_tx_init+0x74>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a17      	ldr	r2, [pc, #92]	; (8000374 <uart3_tx_init+0x74>)
 8000316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800031a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODER8_1;
 800031c:	4b15      	ldr	r3, [pc, #84]	; (8000374 <uart3_tx_init+0x74>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a14      	ldr	r2, [pc, #80]	; (8000374 <uart3_tx_init+0x74>)
 8000322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000326:	6013      	str	r3, [r2, #0]

	/*Set PD8 alternate function mode to UART_TX*/
	GPIOD->AFR[1] |= (GPIO_AFRH_AFRH0_0 | GPIO_AFRH_AFRH0_1 | GPIO_AFRH_AFRH0_2) ; 	/*((1U<<8) | (1U<<9) | (1U<<10))*/
 8000328:	4b12      	ldr	r3, [pc, #72]	; (8000374 <uart3_tx_init+0x74>)
 800032a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800032c:	4a11      	ldr	r2, [pc, #68]	; (8000374 <uart3_tx_init+0x74>)
 800032e:	f043 0307 	orr.w	r3, r3, #7
 8000332:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &=~ GPIO_AFRH_AFRH0_3; 	/*(1U<<11)*/
 8000334:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <uart3_tx_init+0x74>)
 8000336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000338:	4a0e      	ldr	r2, [pc, #56]	; (8000374 <uart3_tx_init+0x74>)
 800033a:	f023 0308 	bic.w	r3, r3, #8
 800033e:	6253      	str	r3, [r2, #36]	; 0x24


	/******************Configure USART module******************/

	/*Enable USART3 clock*/
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 8000340:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <uart3_tx_init+0x70>)
 8000342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000344:	4a0a      	ldr	r2, [pc, #40]	; (8000370 <uart3_tx_init+0x70>)
 8000346:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800034a:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure Baudrate*/
	uart_set_baudrate(USART3, APB1_CLK, UART_BAUDRATE);
 800034c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000350:	4909      	ldr	r1, [pc, #36]	; (8000378 <uart3_tx_init+0x78>)
 8000352:	480a      	ldr	r0, [pc, #40]	; (800037c <uart3_tx_init+0x7c>)
 8000354:	f000 f814 	bl	8000380 <uart_set_baudrate>

	/*Configure transfer direction to Transmit and set UART defaults*/
	USART3->CR1 = USART_CR1_TE;
 8000358:	4b08      	ldr	r3, [pc, #32]	; (800037c <uart3_tx_init+0x7c>)
 800035a:	2208      	movs	r2, #8
 800035c:	601a      	str	r2, [r3, #0]

	/*Enable UART Module*/
	USART3->CR1 |= USART_CR1_UE;
 800035e:	4b07      	ldr	r3, [pc, #28]	; (800037c <uart3_tx_init+0x7c>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a06      	ldr	r2, [pc, #24]	; (800037c <uart3_tx_init+0x7c>)
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	6013      	str	r3, [r2, #0]
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40023800 	.word	0x40023800
 8000374:	40020c00 	.word	0x40020c00
 8000378:	00f42400 	.word	0x00f42400
 800037c:	40004800 	.word	0x40004800

08000380 <uart_set_baudrate>:
	/*Write to TX data register*/
	USART3->TDR = (ch & 0xFF);
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	60f8      	str	r0, [r7, #12]
 8000388:	60b9      	str	r1, [r7, #8]
 800038a:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 800038c:	6879      	ldr	r1, [r7, #4]
 800038e:	68b8      	ldr	r0, [r7, #8]
 8000390:	f000 f808 	bl	80003a4 <compute_uart_bd>
 8000394:	4603      	mov	r3, r0
 8000396:	461a      	mov	r2, r3
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	60da      	str	r2, [r3, #12]
}
 800039c:	bf00      	nop
 800039e:	3710      	adds	r7, #16
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	085a      	lsrs	r2, r3, #1
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	441a      	add	r2, r3
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80003bc:	b29b      	uxth	r3, r3
}
 80003be:	4618      	mov	r0, r3
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
	...

080003cc <main>:
#define BTN_Pin			(1U<<13)

static void dma_callback(void);

int main(void)
{
 80003cc:	b5b0      	push	{r4, r5, r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0
	/*setup*/

	char message[31] = "Hello from Stm32 DMA transfer\n\r";
 80003d2:	4b1f      	ldr	r3, [pc, #124]	; (8000450 <main+0x84>)
 80003d4:	463c      	mov	r4, r7
 80003d6:	461d      	mov	r5, r3
 80003d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80003e0:	c407      	stmia	r4!, {r0, r1, r2}
 80003e2:	8023      	strh	r3, [r4, #0]
 80003e4:	3402      	adds	r4, #2
 80003e6:	0c1b      	lsrs	r3, r3, #16
 80003e8:	7023      	strb	r3, [r4, #0]
	/*Enable clock to GPIOB*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80003ea:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <main+0x88>)
 80003ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ee:	4a19      	ldr	r2, [pc, #100]	; (8000454 <main+0x88>)
 80003f0:	f043 0302 	orr.w	r3, r3, #2
 80003f4:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PB0 as output pin*/
	GPIOB->MODER |= GPIO_MODER_MODER0_0;
 80003f6:	4b18      	ldr	r3, [pc, #96]	; (8000458 <main+0x8c>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a17      	ldr	r2, [pc, #92]	; (8000458 <main+0x8c>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &=~ GPIO_MODER_MODER0_1;
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <main+0x8c>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a14      	ldr	r2, [pc, #80]	; (8000458 <main+0x8c>)
 8000408:	f023 0302 	bic.w	r3, r3, #2
 800040c:	6013      	str	r3, [r2, #0]

	/*Set PB7 as output pin*/
	GPIOB->MODER |= GPIO_MODER_MODER7_0;
 800040e:	4b12      	ldr	r3, [pc, #72]	; (8000458 <main+0x8c>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a11      	ldr	r2, [pc, #68]	; (8000458 <main+0x8c>)
 8000414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000418:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &=~ GPIO_MODER_MODER7_1;
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <main+0x8c>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <main+0x8c>)
 8000420:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000424:	6013      	str	r3, [r2, #0]

	/*Set PB14 as output pin*/
	GPIOB->MODER |= GPIO_MODER_MODER14_0;
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <main+0x8c>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a0b      	ldr	r2, [pc, #44]	; (8000458 <main+0x8c>)
 800042c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000430:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &=~ GPIO_MODER_MODER14_1;
 8000432:	4b09      	ldr	r3, [pc, #36]	; (8000458 <main+0x8c>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a08      	ldr	r2, [pc, #32]	; (8000458 <main+0x8c>)
 8000438:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800043c:	6013      	str	r3, [r2, #0]

	uart3_tx_init();
 800043e:	f7ff ff5f 	bl	8000300 <uart3_tx_init>
	DMA1_stream3_init((uint32_t) message, (uint32_t) &(USART3->TDR), (uint32_t) 31);
 8000442:	463b      	mov	r3, r7
 8000444:	221f      	movs	r2, #31
 8000446:	4905      	ldr	r1, [pc, #20]	; (800045c <main+0x90>)
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff fefb 	bl	8000244 <DMA1_stream3_init>


	/*run loop*/
	while(1)
 800044e:	e7fe      	b.n	800044e <main+0x82>
 8000450:	0800055c 	.word	0x0800055c
 8000454:	40023800 	.word	0x40023800
 8000458:	40020400 	.word	0x40020400
 800045c:	40004828 	.word	0x40004828

08000460 <dma_callback>:

	};
}

static void dma_callback(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
	GPIOB->ODR ^= R_LED_PIN | G_LED_PIN | B_LED_PIN;
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <dma_callback+0x1c>)
 8000466:	695a      	ldr	r2, [r3, #20]
 8000468:	4904      	ldr	r1, [pc, #16]	; (800047c <dma_callback+0x1c>)
 800046a:	f244 0381 	movw	r3, #16513	; 0x4081
 800046e:	4053      	eors	r3, r2
 8000470:	614b      	str	r3, [r1, #20]
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	40020400 	.word	0x40020400

08000480 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	//check for transfer complete interrupt
	if(DMA1->LISR & DMA_LISR_TCIF3)
 8000484:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <DMA1_Stream3_IRQHandler+0x24>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800048c:	2b00      	cmp	r3, #0
 800048e:	d007      	beq.n	80004a0 <DMA1_Stream3_IRQHandler+0x20>
	{
		//clear the flag
		DMA1->LISR |= DMA_LIFCR_CTCIF3;
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <DMA1_Stream3_IRQHandler+0x24>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a03      	ldr	r2, [pc, #12]	; (80004a4 <DMA1_Stream3_IRQHandler+0x24>)
 8000496:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800049a:	6013      	str	r3, [r2, #0]
		//Do the thing
		dma_callback();
 800049c:	f7ff ffe0 	bl	8000460 <dma_callback>
	}
}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40026000 	.word	0x40026000

080004a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004a8:	480d      	ldr	r0, [pc, #52]	; (80004e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b0:	480c      	ldr	r0, [pc, #48]	; (80004e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004b2:	490d      	ldr	r1, [pc, #52]	; (80004e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004b4:	4a0d      	ldr	r2, [pc, #52]	; (80004ec <LoopForever+0xe>)
  movs r3, #0
 80004b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b8:	e002      	b.n	80004c0 <LoopCopyDataInit>

080004ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004be:	3304      	adds	r3, #4

080004c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c4:	d3f9      	bcc.n	80004ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c6:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004c8:	4c0a      	ldr	r4, [pc, #40]	; (80004f4 <LoopForever+0x16>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004cc:	e001      	b.n	80004d2 <LoopFillZerobss>

080004ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d0:	3204      	adds	r2, #4

080004d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d4:	d3fb      	bcc.n	80004ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004d6:	f000 f811 	bl	80004fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004da:	f7ff ff77 	bl	80003cc <main>

080004de <LoopForever>:

LoopForever:
  b LoopForever
 80004de:	e7fe      	b.n	80004de <LoopForever>
  ldr   r0, =_estack
 80004e0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80004e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004ec:	08000584 	.word	0x08000584
  ldr r2, =_sbss
 80004f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004f4:	2000001c 	.word	0x2000001c

080004f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f8:	e7fe      	b.n	80004f8 <ADC_IRQHandler>
	...

080004fc <__libc_init_array>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	4d0d      	ldr	r5, [pc, #52]	; (8000534 <__libc_init_array+0x38>)
 8000500:	4c0d      	ldr	r4, [pc, #52]	; (8000538 <__libc_init_array+0x3c>)
 8000502:	1b64      	subs	r4, r4, r5
 8000504:	10a4      	asrs	r4, r4, #2
 8000506:	2600      	movs	r6, #0
 8000508:	42a6      	cmp	r6, r4
 800050a:	d109      	bne.n	8000520 <__libc_init_array+0x24>
 800050c:	4d0b      	ldr	r5, [pc, #44]	; (800053c <__libc_init_array+0x40>)
 800050e:	4c0c      	ldr	r4, [pc, #48]	; (8000540 <__libc_init_array+0x44>)
 8000510:	f000 f818 	bl	8000544 <_init>
 8000514:	1b64      	subs	r4, r4, r5
 8000516:	10a4      	asrs	r4, r4, #2
 8000518:	2600      	movs	r6, #0
 800051a:	42a6      	cmp	r6, r4
 800051c:	d105      	bne.n	800052a <__libc_init_array+0x2e>
 800051e:	bd70      	pop	{r4, r5, r6, pc}
 8000520:	f855 3b04 	ldr.w	r3, [r5], #4
 8000524:	4798      	blx	r3
 8000526:	3601      	adds	r6, #1
 8000528:	e7ee      	b.n	8000508 <__libc_init_array+0xc>
 800052a:	f855 3b04 	ldr.w	r3, [r5], #4
 800052e:	4798      	blx	r3
 8000530:	3601      	adds	r6, #1
 8000532:	e7f2      	b.n	800051a <__libc_init_array+0x1e>
 8000534:	0800057c 	.word	0x0800057c
 8000538:	0800057c 	.word	0x0800057c
 800053c:	0800057c 	.word	0x0800057c
 8000540:	08000580 	.word	0x08000580

08000544 <_init>:
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000546:	bf00      	nop
 8000548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054a:	bc08      	pop	{r3}
 800054c:	469e      	mov	lr, r3
 800054e:	4770      	bx	lr

08000550 <_fini>:
 8000550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000552:	bf00      	nop
 8000554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000556:	bc08      	pop	{r3}
 8000558:	469e      	mov	lr, r3
 800055a:	4770      	bx	lr
